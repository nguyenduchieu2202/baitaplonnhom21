
Don_nhiem_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08006fa0  08006fa0  00007fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d0  080073d0  000091f0  2**0
                  CONTENTS
  4 .ARM          00000008  080073d0  080073d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d8  080073d8  000091f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073dc  080073dc  000083dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  080073e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001f0  080075d0  000091f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080075d0  00009464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf0  00000000  00000000  00009219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  00016f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00018f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000baa  00000000  00000000  00019e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b07  00000000  00000000  0001aa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102d0  00000000  00000000  00033521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcb9  00000000  00000000  000437f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d14aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050fc  00000000  00000000  000d14f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d65ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f84 	.word	0x08006f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08006f84 	.word	0x08006f84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t system_running = 1;  // Biến trạng thái: 1 là chạy, 0 là dừng
uint8_t received_data;       // Biến lưu dữ liệu nhận được qua UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Kiểm tra UART1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <HAL_UART_RxCpltCallback+0x60>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d121      	bne.n	8000dda <HAL_UART_RxCpltCallback+0x56>
        if (received_data == '1') {
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_UART_RxCpltCallback+0x64>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b31      	cmp	r3, #49	@ 0x31
 8000d9c:	d10a      	bne.n	8000db4 <HAL_UART_RxCpltCallback+0x30>
            system_running = 1;  // Hệ thống chạy
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_UART_RxCpltCallback+0x68>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)" System Running\r\n", 16, HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2210      	movs	r2, #16
 8000daa:	4911      	ldr	r1, [pc, #68]	@ (8000df0 <HAL_UART_RxCpltCallback+0x6c>)
 8000dac:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <HAL_UART_RxCpltCallback+0x70>)
 8000dae:	f002 fc69 	bl	8003684 <HAL_UART_Transmit>
 8000db2:	e00d      	b.n	8000dd0 <HAL_UART_RxCpltCallback+0x4c>
        } else if (received_data == '0') {
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_UART_RxCpltCallback+0x64>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b30      	cmp	r3, #48	@ 0x30
 8000dba:	d109      	bne.n	8000dd0 <HAL_UART_RxCpltCallback+0x4c>
            system_running = 0;  // Hệ thống dừng
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_UART_RxCpltCallback+0x68>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)" System Stopped\r\n", 16, HAL_MAX_DELAY);
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	490b      	ldr	r1, [pc, #44]	@ (8000df8 <HAL_UART_RxCpltCallback+0x74>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <HAL_UART_RxCpltCallback+0x70>)
 8000dcc:	f002 fc5a 	bl	8003684 <HAL_UART_Transmit>
        }
        // Tiếp tục nhận dữ liệu qua UART
        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4905      	ldr	r1, [pc, #20]	@ (8000de8 <HAL_UART_RxCpltCallback+0x64>)
 8000dd4:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <HAL_UART_RxCpltCallback+0x70>)
 8000dd6:	f002 fce0 	bl	800379a <HAL_UART_Receive_IT>
    }
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013800 	.word	0x40013800
 8000de8:	200002f4 	.word	0x200002f4
 8000dec:	20000000 	.word	0x20000000
 8000df0:	08006fa0 	.word	0x08006fa0
 8000df4:	200002ac 	.word	0x200002ac
 8000df8:	08006fb4 	.word	0x08006fb4

08000dfc <ConvertNumberToDigits>:
    0x78, // 7
    0x00, // 8
    0x10  // 9
};

void ConvertNumberToDigits(uint16_t number, uint8_t *digits){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
    digits[3] = digit_codes[number % 10];
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <ConvertNumberToDigits+0xbc>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	08d9      	lsrs	r1, r3, #3
 8000e12:	460b      	mov	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3303      	adds	r3, #3
 8000e24:	4a25      	ldr	r2, [pc, #148]	@ (8000ebc <ConvertNumberToDigits+0xc0>)
 8000e26:	5c52      	ldrb	r2, [r2, r1]
 8000e28:	701a      	strb	r2, [r3, #0]
    digits[2] = digit_codes[(number / 10) % 10];
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <ConvertNumberToDigits+0xbc>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <ConvertNumberToDigits+0xbc>)
 8000e38:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3c:	08d9      	lsrs	r1, r3, #3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	4a1a      	ldr	r2, [pc, #104]	@ (8000ebc <ConvertNumberToDigits+0xc0>)
 8000e52:	5c52      	ldrb	r2, [r2, r1]
 8000e54:	701a      	strb	r2, [r3, #0]
    digits[1] = dp[(number / 100) % 10];
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4a19      	ldr	r2, [pc, #100]	@ (8000ec0 <ConvertNumberToDigits+0xc4>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <ConvertNumberToDigits+0xbc>)
 8000e64:	fba3 1302 	umull	r1, r3, r3, r2
 8000e68:	08d9      	lsrs	r1, r3, #3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <ConvertNumberToDigits+0xc8>)
 8000e7e:	5c52      	ldrb	r2, [r2, r1]
 8000e80:	701a      	strb	r2, [r3, #0]
    digits[0] = digit_codes[(number / 1000) % 10];
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <ConvertNumberToDigits+0xcc>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	099b      	lsrs	r3, r3, #6
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <ConvertNumberToDigits+0xbc>)
 8000e90:	fba3 1302 	umull	r1, r3, r3, r2
 8000e94:	08d9      	lsrs	r1, r3, #3
 8000e96:	460b      	mov	r3, r1
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <ConvertNumberToDigits+0xc0>)
 8000ea6:	5c9a      	ldrb	r2, [r3, r2]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	701a      	strb	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	cccccccd 	.word	0xcccccccd
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	51eb851f 	.word	0x51eb851f
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	10624dd3 	.word	0x10624dd3

08000ecc <SendToLED_SPI>:

void SendToLED_SPI(uint8_t* digits){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    // LOAD xuống thấp trước khi gửi dữ liệu
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4810      	ldr	r0, [pc, #64]	@ (8000f1c <SendToLED_SPI+0x50>)
 8000eda:	f001 fa16 	bl	800230a <HAL_GPIO_WritePin>

    // Gửi lần lượt 4 byte (4 chữ số) qua SPI
    for (int i = 0; i < 4; i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e00e      	b.n	8000f02 <SendToLED_SPI+0x36>
        HAL_SPI_Transmit(&hspi1, &digits[3 - i], 1, HAL_MAX_DELAY); // Gửi byte từ trái sang phải
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f1c3 0303 	rsb	r3, r3, #3
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	1899      	adds	r1, r3, r2
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	480a      	ldr	r0, [pc, #40]	@ (8000f20 <SendToLED_SPI+0x54>)
 8000ef8:	f001 feb4 	bl	8002c64 <HAL_SPI_Transmit>
    for (int i = 0; i < 4; i++){
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	dded      	ble.n	8000ee4 <SendToLED_SPI+0x18>
    }

    // LOAD lên cao để chốt dữ liệu hiển thị
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <SendToLED_SPI+0x50>)
 8000f0e:	f001 f9fc 	bl	800230a <HAL_GPIO_WritePin>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	2000020c 	.word	0x2000020c

08000f24 <delay>:

void delay(uint16_t time){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COUNTER(&htim1,0);
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <delay+0x2c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
	 while((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 8000f36:	bf00      	nop
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <delay+0x2c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d3f9      	bcc.n	8000f38 <delay+0x14>
 }
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	20000264 	.word	0x20000264

08000f54 <SET_PIN_OUTPUT>:
 float RH, TEMP;
 float Temperature = 0;
 float Humidity = 0;
 uint8_t Presence = 0;

 void SET_PIN_OUTPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <SET_PIN_OUTPUT+0x40>)
 8000f86:	f001 f825 	bl	8001fd4 <HAL_GPIO_Init>
 }
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010800 	.word	0x40010800

08000f98 <SET_PIN_INPUT>:

 void SET_PIN_INPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <SET_PIN_INPUT+0x3c>)
 8000fc6:	f001 f805 	bl	8001fd4 <HAL_GPIO_Init>
 }
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <DHT11_Start>:

 void DHT11_Start (void){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
 	SET_PIN_OUTPUT(DHT11_PORT, DHT11_PIN);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <DHT11_Start+0x3c>)
 8000fe0:	f7ff ffb8 	bl	8000f54 <SET_PIN_OUTPUT>
 	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	480a      	ldr	r0, [pc, #40]	@ (8001014 <DHT11_Start+0x3c>)
 8000fea:	f001 f98e 	bl	800230a <HAL_GPIO_WritePin>
 	delay(18000);   // wait for 18ms
 8000fee:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000ff2:	f7ff ff97 	bl	8000f24 <delay>
 	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <DHT11_Start+0x3c>)
 8000ffc:	f001 f985 	bl	800230a <HAL_GPIO_WritePin>
 	delay(20);
 8001000:	2014      	movs	r0, #20
 8001002:	f7ff ff8f 	bl	8000f24 <delay>
 	SET_PIN_INPUT(DHT11_PORT, DHT11_PIN);
 8001006:	2102      	movs	r1, #2
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <DHT11_Start+0x3c>)
 800100a:	f7ff ffc5 	bl	8000f98 <SET_PIN_INPUT>
 }
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010800 	.word	0x40010800

08001018 <Check_Response>:

  uint8_t Check_Response (void){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 	uint8_t Response = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
 	delay (40);
 8001022:	2028      	movs	r0, #40	@ 0x28
 8001024:	f7ff ff7e 	bl	8000f24 <delay>
 	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))){
 8001028:	2102      	movs	r1, #2
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <Check_Response+0x58>)
 800102c:	f001 f956 	bl	80022dc <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10e      	bne.n	8001054 <Check_Response+0x3c>
 		delay (80);
 8001036:	2050      	movs	r0, #80	@ 0x50
 8001038:	f7ff ff74 	bl	8000f24 <delay>
 		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800103c:	2102      	movs	r1, #2
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <Check_Response+0x58>)
 8001040:	f001 f94c 	bl	80022dc <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <Check_Response+0x38>
 800104a:	2301      	movs	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	e001      	b.n	8001054 <Check_Response+0x3c>
 		else Response = -1;  //255
 8001050:	23ff      	movs	r3, #255	@ 0xff
 8001052:	71fb      	strb	r3, [r7, #7]
 	}
 	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // doi pin xung thap
 8001054:	bf00      	nop
 8001056:	2102      	movs	r1, #2
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <Check_Response+0x58>)
 800105a:	f001 f93f 	bl	80022dc <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f8      	bne.n	8001056 <Check_Response+0x3e>

 	return Response;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 }
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010800 	.word	0x40010800

08001074 <DHT11_Read>:

 uint8_t DHT11_Read (void){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 	uint8_t i, j;
 	for (j=0; j<8; j++){
 800107a:	2300      	movs	r3, #0
 800107c:	71bb      	strb	r3, [r7, #6]
 800107e:	e037      	b.n	80010f0 <DHT11_Read+0x7c>
 		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001080:	bf00      	nop
 8001082:	2102      	movs	r1, #2
 8001084:	481e      	ldr	r0, [pc, #120]	@ (8001100 <DHT11_Read+0x8c>)
 8001086:	f001 f929 	bl	80022dc <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f8      	beq.n	8001082 <DHT11_Read+0xe>
 		delay (40);   // wait for 40 us, cho trong 40us, neu Readdht11 ma xuong 0 --> nhan bit 0, neu sau 40us ma chua xuong 0--> nhan bit 1
 8001090:	2028      	movs	r0, #40	@ 0x28
 8001092:	f7ff ff47 	bl	8000f24 <delay>
 		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001096:	2102      	movs	r1, #2
 8001098:	4819      	ldr	r0, [pc, #100]	@ (8001100 <DHT11_Read+0x8c>)
 800109a:	f001 f91f 	bl	80022dc <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10e      	bne.n	80010c2 <DHT11_Read+0x4e>
 		{
 			i&= ~(1<<(7-j));   // write 0
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2201      	movs	r2, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	b25a      	sxtb	r2, r3
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	4013      	ands	r3, r2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	e00b      	b.n	80010da <DHT11_Read+0x66>
 		}
 		else {
 			i|= (1<<(7-j));
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	f1c3 0307 	rsb	r3, r3, #7
 80010c8:	2201      	movs	r2, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	71fb      	strb	r3, [r7, #7]
 		}			// pin high , write 1
 		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80010da:	bf00      	nop
 80010dc:	2102      	movs	r1, #2
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <DHT11_Read+0x8c>)
 80010e0:	f001 f8fc 	bl	80022dc <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f8      	bne.n	80010dc <DHT11_Read+0x68>
 	for (j=0; j<8; j++){
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	3301      	adds	r3, #1
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d9c4      	bls.n	8001080 <DHT11_Read+0xc>
 	}
 	return i;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 }
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010800 	.word	0x40010800

08001104 <Task1_Get_Temperature>:

 float Task1_Get_Temperature(void) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	    char msg[] = "Task 1 is running\r\n";
 800110a:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <Task1_Get_Temperature+0xc4>)
 800110c:	1d3c      	adds	r4, r7, #4
 800110e:	461d      	mov	r5, r3
 8001110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f818 	bl	8000150 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	1d39      	adds	r1, r7, #4
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	4828      	ldr	r0, [pc, #160]	@ (80011cc <Task1_Get_Temperature+0xc8>)
 800112c:	f002 faaa 	bl	8003684 <HAL_UART_Transmit>
     DHT11_Start();                     // Kích hoạt giao tiếp với DHT11
 8001130:	f7ff ff52 	bl	8000fd8 <DHT11_Start>
     Presence = Check_Response();       // Kiểm tra phản hồi từ DHT11
 8001134:	f7ff ff70 	bl	8001018 <Check_Response>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <Task1_Get_Temperature+0xcc>)
 800113e:	701a      	strb	r2, [r3, #0]
         R1 = DHT11_Read();             // �?�?c phần nguyên độ ẩm
 8001140:	f7ff ff98 	bl	8001074 <DHT11_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <Task1_Get_Temperature+0xd0>)
 800114a:	701a      	strb	r2, [r3, #0]
         R2 = DHT11_Read();             // �?�?c phần thập phân độ ẩm
 800114c:	f7ff ff92 	bl	8001074 <DHT11_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <Task1_Get_Temperature+0xd4>)
 8001156:	701a      	strb	r2, [r3, #0]
         T1 = DHT11_Read();             // �?�?c phần nguyên nhiệt độ
 8001158:	f7ff ff8c 	bl	8001074 <DHT11_Read>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <Task1_Get_Temperature+0xd8>)
 8001162:	701a      	strb	r2, [r3, #0]
         T2 = DHT11_Read();             // �?�?c phần thập phân nhiệt độ
 8001164:	f7ff ff86 	bl	8001074 <DHT11_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <Task1_Get_Temperature+0xdc>)
 800116e:	701a      	strb	r2, [r3, #0]
         sum = DHT11_Read();            // �?�?c checksum để kiểm tra tính hợp lệ
 8001170:	f7ff ff80 	bl	8001074 <DHT11_Read>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <Task1_Get_Temperature+0xe0>)
 800117a:	801a      	strh	r2, [r3, #0]

         TEMP = T1 + T2 / 10.0;         // Tính nhiệt độ (phần nguyên + phần thập phân)
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <Task1_Get_Temperature+0xd8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f93f 	bl	8000404 <__aeabi_i2d>
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <Task1_Get_Temperature+0xdc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f938 	bl	8000404 <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <Task1_Get_Temperature+0xe4>)
 800119a:	f7ff fac7 	bl	800072c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7fe ffe1 	bl	800016c <__adddf3>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc69 	bl	8000a88 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <Task1_Get_Temperature+0xe8>)
 80011ba:	6013      	str	r3, [r2, #0]
         return TEMP;                   // Trả v�? giá trị nhiệt độ
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <Task1_Get_Temperature+0xe8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 }
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bdb0      	pop	{r4, r5, r7, pc}
 80011c8:	08006fc8 	.word	0x08006fc8
 80011cc:	200002ac 	.word	0x200002ac
 80011d0:	2000030c 	.word	0x2000030c
 80011d4:	200002f5 	.word	0x200002f5
 80011d8:	200002f6 	.word	0x200002f6
 80011dc:	200002f7 	.word	0x200002f7
 80011e0:	200002f8 	.word	0x200002f8
 80011e4:	200002fa 	.word	0x200002fa
 80011e8:	40240000 	.word	0x40240000
 80011ec:	20000300 	.word	0x20000300

080011f0 <Task2_Get_Humidity>:

 float Task2_Get_Humidity(void) {
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
	    char msg[] = "Task 2 is running\r\n";
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <Task2_Get_Humidity+0x48>)
 80011f8:	1d3c      	adds	r4, r7, #4
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffa2 	bl	8000150 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	1d39      	adds	r1, r7, #4
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	4809      	ldr	r0, [pc, #36]	@ (800123c <Task2_Get_Humidity+0x4c>)
 8001218:	f002 fa34 	bl	8003684 <HAL_UART_Transmit>

         RH = R1;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Task2_Get_Humidity+0x50>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd37 	bl	8000c94 <__aeabi_ui2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <Task2_Get_Humidity+0x54>)
 800122a:	6013      	str	r3, [r2, #0]
         return RH;
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <Task2_Get_Humidity+0x54>)
 800122e:	681b      	ldr	r3, [r3, #0]
 }
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}
 8001238:	08006fdc 	.word	0x08006fdc
 800123c:	200002ac 	.word	0x200002ac
 8001240:	200002f5 	.word	0x200002f5
 8001244:	200002fc 	.word	0x200002fc

08001248 <Task3_Send_Temp_Humidity>:

 void Task3_Send_Temp_Humidity(UART_HandleTypeDef *huart, float Temperature, float Humidity) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b098      	sub	sp, #96	@ 0x60
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	    char msg[] = "Task 3 is running\r\n";
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <Task3_Send_Temp_Humidity+0xb4>)
 8001256:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800125a:	461d      	mov	r5, r3
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001264:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ff71 	bl	8000150 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <Task3_Send_Temp_Humidity+0xb8>)
 800127c:	f002 fa02 	bl	8003684 <HAL_UART_Transmit>
     char buffer[50];

     // Gửi nhiệt độ
     snprintf(buffer, sizeof(buffer), "Temp: %.1f \n", Temperature);
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f7ff f8d1 	bl	8000428 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	f107 0010 	add.w	r0, r7, #16
 800128e:	e9cd 2300 	strd	r2, r3, [sp]
 8001292:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <Task3_Send_Temp_Humidity+0xbc>)
 8001294:	2132      	movs	r1, #50	@ 0x32
 8001296:	f003 fd2d 	bl	8004cf4 <sniprintf>
     HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ff56 	bl	8000150 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0110 	add.w	r1, r7, #16
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f002 f9e7 	bl	8003684 <HAL_UART_Transmit>
     //HAL_Delay(1000);

     // Gửi độ ẩm
     snprintf(buffer, sizeof(buffer), "Hum: %.1f \n", Humidity);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f8b6 	bl	8000428 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	f107 0010 	add.w	r0, r7, #16
 80012c4:	e9cd 2300 	strd	r2, r3, [sp]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <Task3_Send_Temp_Humidity+0xc0>)
 80012ca:	2132      	movs	r1, #50	@ 0x32
 80012cc:	f003 fd12 	bl	8004cf4 <sniprintf>
     HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff3b 	bl	8000150 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0110 	add.w	r1, r7, #16
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f002 f9cc 	bl	8003684 <HAL_UART_Transmit>
     HAL_Delay(1000);
 80012ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f0:	f000 fc8c 	bl	8001c0c <HAL_Delay>
 }
 80012f4:	bf00      	nop
 80012f6:	3758      	adds	r7, #88	@ 0x58
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	0800700c 	.word	0x0800700c
 8001300:	200002ac 	.word	0x200002ac
 8001304:	08006ff0 	.word	0x08006ff0
 8001308:	08007000 	.word	0x08007000

0800130c <Task4_Display_Temp_Humidity>:

 void Task4_Display_Temp_Humidity(float Temperature, float Humidity) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	    char msg[] = "Task 4 is running\r\n";
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <Task4_Display_Temp_Humidity+0x84>)
 8001318:	f107 0410 	add.w	r4, r7, #16
 800131c:	461d      	mov	r5, r3
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff10 	bl	8000150 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f107 0110 	add.w	r1, r7, #16
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4815      	ldr	r0, [pc, #84]	@ (8001394 <Task4_Display_Temp_Humidity+0x88>)
 800133e:	f002 f9a1 	bl	8003684 <HAL_UART_Transmit>
     uint16_t temp_humi_display;
     uint8_t digits[4]; // Mảng lưu từng chữ số

     // Chuyển đổi nhiệt độ và độ ẩm thành giá trị nguyên để hiển thị
     temp_humi_display = (uint8_t)Temperature * 100 + (uint8_t)Humidity;
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fcfe 	bl	8000d44 <__aeabi_f2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	461a      	mov	r2, r3
 8001354:	0091      	lsls	r1, r2, #2
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	b29c      	uxth	r4, r3
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff fcef 	bl	8000d44 <__aeabi_f2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4423      	add	r3, r4
 800136c:	84fb      	strh	r3, [r7, #38]	@ 0x26

     // Tách từng chữ số từ giá trị
     ConvertNumberToDigits(temp_humi_display, digits);
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd40 	bl	8000dfc <ConvertNumberToDigits>

     // Gửi dữ liệu đến LED thông qua giao tiếp SPI
     SendToLED_SPI(digits);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fda3 	bl	8000ecc <SendToLED_SPI>
 }
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	bf00      	nop
 8001390:	08007020 	.word	0x08007020
 8001394:	200002ac 	.word	0x200002ac

08001398 <Display>:
 void Display(float Temperature, float Humidity) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	    //HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
     uint16_t temp_humi_display;
     uint8_t digits[4]; // Mảng lưu từng chữ số

     // Chuyển đổi nhiệt độ và độ ẩm thành giá trị nguyên để hiển thị
     temp_humi_display = (uint8_t)Temperature * 100 + (uint8_t)Humidity;
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcce 	bl	8000d44 <__aeabi_f2uiz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	461a      	mov	r2, r3
 80013b4:	0091      	lsls	r1, r2, #2
 80013b6:	461a      	mov	r2, r3
 80013b8:	460b      	mov	r3, r1
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	b29c      	uxth	r4, r3
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff fcbf 	bl	8000d44 <__aeabi_f2uiz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4423      	add	r3, r4
 80013cc:	81fb      	strh	r3, [r7, #14]

     // Tách từng chữ số từ giá trị
     ConvertNumberToDigits(temp_humi_display, digits);
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd10 	bl	8000dfc <ConvertNumberToDigits>

     // Gửi dữ liệu đến LED thông qua giao tiếp SPI
     SendToLED_SPI(digits);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd73 	bl	8000ecc <SendToLED_SPI>
 }
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
	...

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fba8 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f858 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 f94c 	bl	8001698 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001400:	f000 f89a 	bl	8001538 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001404:	f000 f8ce 	bl	80015a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001408:	f000 f91c 	bl	8001644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800140c:	4821      	ldr	r0, [pc, #132]	@ (8001494 <main+0xa4>)
 800140e:	f001 fe75 	bl	80030fc <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	4920      	ldr	r1, [pc, #128]	@ (8001498 <main+0xa8>)
 8001416:	4821      	ldr	r0, [pc, #132]	@ (800149c <main+0xac>)
 8001418:	f002 f9bf 	bl	800379a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (system_running) {
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <main+0xb0>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d026      	beq.n	8001472 <main+0x82>
	  Temperature = Task1_Get_Temperature();
 8001424:	f7ff fe6e 	bl	8001104 <Task1_Get_Temperature>
 8001428:	4603      	mov	r3, r0
 800142a:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <main+0xb4>)
 800142c:	6013      	str	r3, [r2, #0]
	  if (!system_running) continue;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <main+0xb0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d028      	beq.n	8001488 <main+0x98>
	  Humidity = Task2_Get_Humidity();
 8001436:	f7ff fedb 	bl	80011f0 <Task2_Get_Humidity>
 800143a:	4603      	mov	r3, r0
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <main+0xb8>)
 800143e:	6013      	str	r3, [r2, #0]
	  if (!system_running) continue;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <main+0xb0>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <main+0x9c>
	  Task3_Send_Temp_Humidity(&huart1, Temperature, Humidity);
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <main+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a16      	ldr	r2, [pc, #88]	@ (80014a8 <main+0xb8>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4812      	ldr	r0, [pc, #72]	@ (800149c <main+0xac>)
 8001454:	f7ff fef8 	bl	8001248 <Task3_Send_Temp_Humidity>
	  if (!system_running) continue;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <main+0xb0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <main+0xa0>
	  Task4_Display_Temp_Humidity(Temperature, Humidity);
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <main+0xb4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <main+0xb8>)
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff4e 	bl	800130c <Task4_Display_Temp_Humidity>
 8001470:	e7d4      	b.n	800141c <main+0x2c>
    } else {
    	Display(00, 00);
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f7ff ff8d 	bl	8001398 <Display>
    	HAL_Delay(2000);
 800147e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001482:	f000 fbc3 	bl	8001c0c <HAL_Delay>
 8001486:	e7c9      	b.n	800141c <main+0x2c>
	  if (!system_running) continue;
 8001488:	bf00      	nop
 800148a:	e7c7      	b.n	800141c <main+0x2c>
	  if (!system_running) continue;
 800148c:	bf00      	nop
 800148e:	e7c5      	b.n	800141c <main+0x2c>
	  if (!system_running) continue;
 8001490:	bf00      	nop
    if (system_running) {
 8001492:	e7c3      	b.n	800141c <main+0x2c>
 8001494:	20000264 	.word	0x20000264
 8001498:	200002f4 	.word	0x200002f4
 800149c:	200002ac 	.word	0x200002ac
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000304 	.word	0x20000304
 80014a8:	20000308 	.word	0x20000308

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b090      	sub	sp, #64	@ 0x40
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2228      	movs	r2, #40	@ 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fc91 	bl	8004de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80014d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014de:	2301      	movs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80014ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 ff20 	bl	800233c <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001502:	f000 f915 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f98e 	bl	8002840 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152a:	f000 f901 	bl	8001730 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3740      	adds	r7, #64	@ 0x40
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_SPI1_Init+0x64>)
 800153e:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <MX_SPI1_Init+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_SPI1_Init+0x64>)
 8001544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_SPI1_Init+0x64>)
 8001564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_SPI1_Init+0x64>)
 800156c:	2218      	movs	r2, #24
 800156e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_SPI1_Init+0x64>)
 8001584:	220a      	movs	r2, #10
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_SPI1_Init+0x64>)
 800158a:	f001 fae7 	bl	8002b5c <HAL_SPI_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001594:	f000 f8cc 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000020c 	.word	0x2000020c
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <MX_TIM1_Init+0x98>)
 80015c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <MX_TIM1_Init+0x9c>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <MX_TIM1_Init+0x98>)
 80015c8:	220f      	movs	r2, #15
 80015ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <MX_TIM1_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <MX_TIM1_Init+0x98>)
 80015d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <MX_TIM1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <MX_TIM1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <MX_TIM1_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ec:	4813      	ldr	r0, [pc, #76]	@ (800163c <MX_TIM1_Init+0x98>)
 80015ee:	f001 fd36 	bl	800305e <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015f8:	f000 f89a 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_TIM1_Init+0x98>)
 800160a:	f001 fdc1 	bl	8003190 <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001614:	f000 f88c 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_TIM1_Init+0x98>)
 8001626:	f001 ff7f 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001630:	f000 f87e 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000264 	.word	0x20000264
 8001640:	40012c00 	.word	0x40012c00

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f001 ffb2 	bl	80035e4 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f853 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002ac 	.word	0x200002ac
 8001694:	40013800 	.word	0x40013800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <MX_GPIO_Init+0x90>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2112      	movs	r1, #18
 80016e0:	4812      	ldr	r0, [pc, #72]	@ (800172c <MX_GPIO_Init+0x94>)
 80016e2:	f000 fe12 	bl	800230a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e6:	2302      	movs	r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2302      	movs	r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <MX_GPIO_Init+0x94>)
 80016fe:	f000 fc69 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001702:	2310      	movs	r3, #16
 8001704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_GPIO_Init+0x94>)
 800171a:	f000 fc5b 	bl	8001fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <Error_Handler+0x8>

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_MspInit+0x5c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_MspInit+0x5c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_MspInit+0x60>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_MspInit+0x60>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <HAL_SPI_MspInit+0x70>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d123      	bne.n	8001808 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a13      	ldr	r2, [pc, #76]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_SPI_MspInit+0x74>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017f0:	23a0      	movs	r3, #160	@ 0xa0
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_SPI_MspInit+0x78>)
 8001804:	f000 fbe6 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40013000 	.word	0x40013000
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <HAL_TIM_Base_MspInit+0x34>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_TIM_Base_MspInit+0x38>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_TIM_Base_MspInit+0x38>)
 8001834:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_TIM_Base_MspInit+0x38>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <HAL_UART_MspInit+0x9c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d139      	bne.n	80018ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_UART_MspInit+0xa0>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	480f      	ldr	r0, [pc, #60]	@ (80018fc <HAL_UART_MspInit+0xa4>)
 80018be:	f000 fb89 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4809      	ldr	r0, [pc, #36]	@ (80018fc <HAL_UART_MspInit+0xa4>)
 80018d8:	f000 fb7c 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2025      	movs	r0, #37	@ 0x25
 80018e2:	f000 fa8e 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018e6:	2025      	movs	r0, #37	@ 0x25
 80018e8:	f000 faa7 	bl	8001e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <NMI_Handler+0x4>

08001908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <MemManage_Handler+0x4>

08001918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <UsageFault_Handler+0x4>

08001928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f940 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <USART1_IRQHandler+0x10>)
 800195e:	f001 ff41 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002ac 	.word	0x200002ac

0800196c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <_kill>:

int _kill(int pid, int sig)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001984:	f003 fa80 	bl	8004e88 <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	2216      	movs	r2, #22
 800198c:	601a      	str	r2, [r3, #0]
  return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_exit>:

void _exit (int status)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a2:	f04f 31ff 	mov.w	r1, #4294967295
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffe7 	bl	800197a <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <_exit+0x12>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
  }

  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
  }
  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a48:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <_isatty>:

int _isatty(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f003 f9e8 	bl	8004e88 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20005000 	.word	0x20005000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	20000310 	.word	0x20000310
 8001aec:	20000468 	.word	0x20000468

08001af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afc:	f7ff fff8 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	@ (8001b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b02:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b04:	4a0c      	ldr	r2, [pc, #48]	@ (8001b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b18:	4c09      	ldr	r4, [pc, #36]	@ (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 f9b5 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fc61 	bl	80013f0 <main>
  bx lr
 8001b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b38:	080073e0 	.word	0x080073e0
  ldr r2, =_sbss
 8001b3c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b40:	20000464 	.word	0x20000464

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_Init+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_Init+0x28>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f947 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fdea 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f95f 	bl	8001e56 <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f927 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000001c 	.word	0x2000001c
 8001bcc:	20000024 	.word	0x20000024
 8001bd0:	20000020 	.word	0x20000020

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_IncTick+0x1c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000024 	.word	0x20000024
 8001bf4:	20000314 	.word	0x20000314

08001bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	@ (8001c08 <HAL_GetTick+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000314 	.word	0x20000314

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffe0 	bl	8001bf8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000024 	.word	0x20000024

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <__NVIC_EnableIRQ+0x34>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f7ff ff90 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff2d 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff42 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff90 	bl	8001d44 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5f 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff35 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffa2 	bl	8001da8 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d008      	beq.n	8001e98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e020      	b.n	8001eda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020e 	bic.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d005      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2204      	movs	r2, #4
 8001f00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e051      	b.n	8001fac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020e 	bic.w	r2, r2, #14
 8001f16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <HAL_DMA_Abort_IT+0xd4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d029      	beq.n	8001f86 <HAL_DMA_Abort_IT+0xa2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_DMA_Abort_IT+0xd8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x9e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_DMA_Abort_IT+0xdc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01a      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x98>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_DMA_Abort_IT+0xe0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d012      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x92>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <HAL_DMA_Abort_IT+0xe4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00a      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x8c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fcc <HAL_DMA_Abort_IT+0xe8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d102      	bne.n	8001f6a <HAL_DMA_Abort_IT+0x86>
 8001f64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f68:	e00e      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6e:	e00b      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f74:	e008      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7a:	e005      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f80:	e002      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f82:	2310      	movs	r3, #16
 8001f84:	e000      	b.n	8001f88 <HAL_DMA_Abort_IT+0xa4>
 8001f86:	2301      	movs	r3, #1
 8001f88:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <HAL_DMA_Abort_IT+0xec>)
 8001f8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
    } 
  }
  return status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020008 	.word	0x40020008
 8001fbc:	4002001c 	.word	0x4002001c
 8001fc0:	40020030 	.word	0x40020030
 8001fc4:	40020044 	.word	0x40020044
 8001fc8:	40020058 	.word	0x40020058
 8001fcc:	4002006c 	.word	0x4002006c
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b08b      	sub	sp, #44	@ 0x2c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e169      	b.n	80022bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8158 	bne.w	80022b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a9a      	ldr	r2, [pc, #616]	@ (8002274 <HAL_GPIO_Init+0x2a0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d05e      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002010:	4a98      	ldr	r2, [pc, #608]	@ (8002274 <HAL_GPIO_Init+0x2a0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d875      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002016:	4a98      	ldr	r2, [pc, #608]	@ (8002278 <HAL_GPIO_Init+0x2a4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d058      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 800201c:	4a96      	ldr	r2, [pc, #600]	@ (8002278 <HAL_GPIO_Init+0x2a4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d86f      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002022:	4a96      	ldr	r2, [pc, #600]	@ (800227c <HAL_GPIO_Init+0x2a8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d052      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002028:	4a94      	ldr	r2, [pc, #592]	@ (800227c <HAL_GPIO_Init+0x2a8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d869      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800202e:	4a94      	ldr	r2, [pc, #592]	@ (8002280 <HAL_GPIO_Init+0x2ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d04c      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002034:	4a92      	ldr	r2, [pc, #584]	@ (8002280 <HAL_GPIO_Init+0x2ac>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d863      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800203a:	4a92      	ldr	r2, [pc, #584]	@ (8002284 <HAL_GPIO_Init+0x2b0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d046      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002040:	4a90      	ldr	r2, [pc, #576]	@ (8002284 <HAL_GPIO_Init+0x2b0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d85d      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002046:	2b12      	cmp	r3, #18
 8002048:	d82a      	bhi.n	80020a0 <HAL_GPIO_Init+0xcc>
 800204a:	2b12      	cmp	r3, #18
 800204c:	d859      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800204e:	a201      	add	r2, pc, #4	@ (adr r2, 8002054 <HAL_GPIO_Init+0x80>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	080020cf 	.word	0x080020cf
 8002058:	080020a9 	.word	0x080020a9
 800205c:	080020bb 	.word	0x080020bb
 8002060:	080020fd 	.word	0x080020fd
 8002064:	08002103 	.word	0x08002103
 8002068:	08002103 	.word	0x08002103
 800206c:	08002103 	.word	0x08002103
 8002070:	08002103 	.word	0x08002103
 8002074:	08002103 	.word	0x08002103
 8002078:	08002103 	.word	0x08002103
 800207c:	08002103 	.word	0x08002103
 8002080:	08002103 	.word	0x08002103
 8002084:	08002103 	.word	0x08002103
 8002088:	08002103 	.word	0x08002103
 800208c:	08002103 	.word	0x08002103
 8002090:	08002103 	.word	0x08002103
 8002094:	08002103 	.word	0x08002103
 8002098:	080020b1 	.word	0x080020b1
 800209c:	080020c5 	.word	0x080020c5
 80020a0:	4a79      	ldr	r2, [pc, #484]	@ (8002288 <HAL_GPIO_Init+0x2b4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020a6:	e02c      	b.n	8002102 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	623b      	str	r3, [r7, #32]
          break;
 80020ae:	e029      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	3304      	adds	r3, #4
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e024      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	3308      	adds	r3, #8
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e01f      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	330c      	adds	r3, #12
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e01a      	b.n	8002104 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d6:	2304      	movs	r3, #4
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e013      	b.n	8002104 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e4:	2308      	movs	r3, #8
 80020e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	611a      	str	r2, [r3, #16]
          break;
 80020ee:	e009      	b.n	8002104 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f0:	2308      	movs	r3, #8
 80020f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	615a      	str	r2, [r3, #20]
          break;
 80020fa:	e003      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x130>
          break;
 8002102:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2bff      	cmp	r3, #255	@ 0xff
 8002108:	d801      	bhi.n	800210e <HAL_GPIO_Init+0x13a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_Init+0x13e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	@ 0xff
 8002118:	d802      	bhi.n	8002120 <HAL_GPIO_Init+0x14c>
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x152>
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	3b08      	subs	r3, #8
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	210f      	movs	r1, #15
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	6a39      	ldr	r1, [r7, #32]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80b1 	beq.w	80022b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002154:	4b4d      	ldr	r3, [pc, #308]	@ (800228c <HAL_GPIO_Init+0x2b8>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4a4c      	ldr	r2, [pc, #304]	@ (800228c <HAL_GPIO_Init+0x2b8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6193      	str	r3, [r2, #24]
 8002160:	4b4a      	ldr	r3, [pc, #296]	@ (800228c <HAL_GPIO_Init+0x2b8>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800216c:	4a48      	ldr	r2, [pc, #288]	@ (8002290 <HAL_GPIO_Init+0x2bc>)
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	@ (8002294 <HAL_GPIO_Init+0x2c0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_GPIO_Init+0x1ec>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3f      	ldr	r2, [pc, #252]	@ (8002298 <HAL_GPIO_Init+0x2c4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_GPIO_Init+0x1e8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3e      	ldr	r2, [pc, #248]	@ (800229c <HAL_GPIO_Init+0x2c8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x1e4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_GPIO_Init+0x1e0>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021c0:	2300      	movs	r3, #0
 80021c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d2:	492f      	ldr	r1, [pc, #188]	@ (8002290 <HAL_GPIO_Init+0x2bc>)
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ec:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	492c      	ldr	r1, [pc, #176]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021fa:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	4928      	ldr	r1, [pc, #160]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4922      	ldr	r1, [pc, #136]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	43db      	mvns	r3, r3
 800222a:	491e      	ldr	r1, [pc, #120]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 800222c:	4013      	ands	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4918      	ldr	r1, [pc, #96]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	43db      	mvns	r3, r3
 8002252:	4914      	ldr	r1, [pc, #80]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002254:	4013      	ands	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d021      	beq.n	80022a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	490e      	ldr	r1, [pc, #56]	@ (80022a4 <HAL_GPIO_Init+0x2d0>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e021      	b.n	80022b6 <HAL_GPIO_Init+0x2e2>
 8002272:	bf00      	nop
 8002274:	10320000 	.word	0x10320000
 8002278:	10310000 	.word	0x10310000
 800227c:	10220000 	.word	0x10220000
 8002280:	10210000 	.word	0x10210000
 8002284:	10120000 	.word	0x10120000
 8002288:	10110000 	.word	0x10110000
 800228c:	40021000 	.word	0x40021000
 8002290:	40010000 	.word	0x40010000
 8002294:	40010800 	.word	0x40010800
 8002298:	40010c00 	.word	0x40010c00
 800229c:	40011000 	.word	0x40011000
 80022a0:	40011400 	.word	0x40011400
 80022a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <HAL_GPIO_Init+0x304>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	4909      	ldr	r1, [pc, #36]	@ (80022d8 <HAL_GPIO_Init+0x304>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	3301      	adds	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f47f ae8e 	bne.w	8001fe8 <HAL_GPIO_Init+0x14>
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	372c      	adds	r7, #44	@ 0x2c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231a:	787b      	ldrb	r3, [r7, #1]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002326:	e003      	b.n	8002330 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e272      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4b8f      	ldr	r3, [pc, #572]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d112      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 8002374:	4b8c      	ldr	r3, [pc, #560]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b89      	ldr	r3, [pc, #548]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <HAL_RCC_OscConfig+0x12c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d168      	bne.n	8002468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e24c      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76>
 80023a4:	4b80      	ldr	r3, [pc, #512]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e02e      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7b      	ldr	r3, [pc, #492]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7a      	ldr	r2, [pc, #488]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0xbc>
 80023de:	4b72      	ldr	r3, [pc, #456]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a71      	ldr	r2, [pc, #452]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6f      	ldr	r3, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023f8:	4b6b      	ldr	r3, [pc, #428]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fbee 	bl	8001bf8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fbea 	bl	8001bf8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e200      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5d      	ldr	r3, [pc, #372]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xe4>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fbda 	bl	8001bf8 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fbd6 	bl	8001bf8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ec      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x10c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002482:	4b49      	ldr	r3, [pc, #292]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
 800248e:	4b46      	ldr	r3, [pc, #280]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c0      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4939      	ldr	r1, [pc, #228]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_RCC_OscConfig+0x270>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7ff fb8f 	bl	8001bf8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff fb8b 	bl	8001bf8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4927      	ldr	r1, [pc, #156]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_RCC_OscConfig+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fb6e 	bl	8001bf8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7ff fb6a 	bl	8001bf8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e180      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fb4e 	bl	8001bf8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff fb4a 	bl	8001bf8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e160      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 face 	bl	8002b20 <RCC_Delay>
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7ff fb34 	bl	8001bf8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff fb30 	bl	8001bf8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e146      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420000 	.word	0x42420000
 80025b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b92      	ldr	r3, [pc, #584]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e9      	bne.n	8002594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a6 	beq.w	800271a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a87      	ldr	r2, [pc, #540]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b82      	ldr	r3, [pc, #520]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff faf1 	bl	8001bf8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff faed 	bl	8001bf8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	@ 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e103      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002640:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6e      	ldr	r2, [pc, #440]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002656:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a69      	ldr	r2, [pc, #420]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a66      	ldr	r2, [pc, #408]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x356>
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a60      	ldr	r2, [pc, #384]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b5e      	ldr	r3, [pc, #376]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a5d      	ldr	r2, [pc, #372]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002692:	4b5b      	ldr	r3, [pc, #364]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a5a      	ldr	r2, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b58      	ldr	r3, [pc, #352]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a57      	ldr	r2, [pc, #348]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff faa1 	bl	8001bf8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff fa9d 	bl	8001bf8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x37e>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff fa8b 	bl	8001bf8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7ff fa87 	bl	8001bf8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09b      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b40      	ldr	r3, [pc, #256]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a3b      	ldr	r2, [pc, #236]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b36      	ldr	r3, [pc, #216]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d061      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d146      	bne.n	80027c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff fa5b 	bl	8001bf8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7ff fa57 	bl	8001bf8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e06d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4921      	ldr	r1, [pc, #132]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	430b      	orrs	r3, r1
 8002792:	491b      	ldr	r1, [pc, #108]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fa2b 	bl	8001bf8 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff fa27 	bl	8001bf8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
 80027c4:	e035      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff fa14 	bl	8001bf8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff fa10 	bl	8001bf8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e026      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x498>
 80027f2:	e01e      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e019      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x500>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4965      	ldr	r1, [pc, #404]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7ff f962 	bl	8001bf8 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7ff f95e 	bl	8001bf8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4922      	ldr	r1, [pc, #136]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1cc>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f8c0 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08007034 	.word	0x08007034
 8002a0c:	2000001c 	.word	0x2000001c
 8002a10:	20000020 	.word	0x20000020

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x36>
 8002a42:	e027      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	e027      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	fb03 f202 	mul.w	r2, r3, r2
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e004      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	613b      	str	r3, [r7, #16]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	693b      	ldr	r3, [r7, #16]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	0800704c 	.word	0x0800704c
 8002ab4:	0800705c 	.word	0x0800705c
 8002ab8:	003d0900 	.word	0x003d0900

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b02      	ldr	r3, [pc, #8]	@ (8002acc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	2000001c 	.word	0x2000001c

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff2 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08007044 	.word	0x08007044

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffde 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08007044 	.word	0x08007044

08002b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <RCC_Delay+0x34>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <RCC_Delay+0x38>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0a5b      	lsrs	r3, r3, #9
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b3c:	bf00      	nop
  }
  while (Delay --);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	60fa      	str	r2, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <RCC_Delay+0x1c>
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	2000001c 	.word	0x2000001c
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e076      	b.n	8002c5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b7e:	d009      	beq.n	8002b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
 8002b86:	e005      	b.n	8002b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fdf6 	bl	80017a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c18:	ea42 0103 	orr.w	r1, r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	0c1a      	lsrs	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f002 0204 	and.w	r2, r2, #4
 8002c3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c74:	f7fe ffc0 	bl	8001bf8 <HAL_GetTick>
 8002c78:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e12a      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Transmit+0x36>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e122      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_SPI_Transmit+0x48>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e11b      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfa:	d10f      	bne.n	8002d1c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b40      	cmp	r3, #64	@ 0x40
 8002d28:	d007      	beq.n	8002d3a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d42:	d152      	bne.n	8002dea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit+0xee>
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d145      	bne.n	8002dde <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d76:	e032      	b.n	8002dde <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d112      	bne.n	8002dac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	1c9a      	adds	r2, r3, #2
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002daa:	e018      	b.n	8002dde <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dac:	f7fe ff24 	bl	8001bf8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d803      	bhi.n	8002dc4 <HAL_SPI_Transmit+0x160>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d102      	bne.n	8002dca <HAL_SPI_Transmit+0x166>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e082      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1c7      	bne.n	8002d78 <HAL_SPI_Transmit+0x114>
 8002de8:	e053      	b.n	8002e92 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Transmit+0x194>
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d147      	bne.n	8002e88 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e1e:	e033      	b.n	8002e88 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d113      	bne.n	8002e56 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e54:	e018      	b.n	8002e88 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e56:	f7fe fecf 	bl	8001bf8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d803      	bhi.n	8002e6e <HAL_SPI_Transmit+0x20a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_Transmit+0x210>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e02d      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1c6      	bne.n	8002e20 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8b0 	bl	8002ffc <SPI_EndRxTxTransaction>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002efc:	f7fe fe7c 	bl	8001bf8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	4413      	add	r3, r2
 8002f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f0c:	f7fe fe74 	bl	8001bf8 <HAL_GetTick>
 8002f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f12:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	015b      	lsls	r3, r3, #5
 8002f18:	0d1b      	lsrs	r3, r3, #20
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f22:	e054      	b.n	8002fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d050      	beq.n	8002fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f2c:	f7fe fe64 	bl	8001bf8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d902      	bls.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d13d      	bne.n	8002fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f5a:	d111      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f64:	d004      	beq.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d107      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f88:	d10f      	bne.n	8002faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e017      	b.n	8002fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d19b      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000001c 	.word	0x2000001c

08002ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2201      	movs	r2, #1
 8003010:	2102      	movs	r1, #2
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff6a 	bl	8002eec <SPI_WaitFlagStateUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e013      	b.n	8003056 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff57 	bl	8002eec <SPI_WaitFlagStateUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e000      	b.n	8003056 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e041      	b.n	80030f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fe fbc9 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 f93f 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_TIM_Base_Start+0x88>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <HAL_TIM_Base_Start+0x8c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a13      	ldr	r2, [pc, #76]	@ (800318c <HAL_TIM_Base_Start+0x90>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d010      	beq.n	8003178 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	e007      	b.n	8003178 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800

08003190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0b4      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x186>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e4:	d03e      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0xd4>
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ea:	f200 8087 	bhi.w	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f2:	f000 8086 	beq.w	8003302 <HAL_TIM_ConfigClockSource+0x172>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fa:	d87f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b70      	cmp	r3, #112	@ 0x70
 80031fe:	d01a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xa6>
 8003200:	2b70      	cmp	r3, #112	@ 0x70
 8003202:	d87b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b60      	cmp	r3, #96	@ 0x60
 8003206:	d050      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x11a>
 8003208:	2b60      	cmp	r3, #96	@ 0x60
 800320a:	d877      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b50      	cmp	r3, #80	@ 0x50
 800320e:	d03c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xfa>
 8003210:	2b50      	cmp	r3, #80	@ 0x50
 8003212:	d873      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d058      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x13a>
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d86f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b30      	cmp	r3, #48	@ 0x30
 800321e:	d064      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003220:	2b30      	cmp	r3, #48	@ 0x30
 8003222:	d86b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d060      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d867      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	2b10      	cmp	r3, #16
 8003232:	d05a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	e062      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003246:	f000 f950 	bl	80034ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
      break;
 8003262:	e04f      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003274:	f000 f939 	bl	80034ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003286:	609a      	str	r2, [r3, #8]
      break;
 8003288:	e03c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	461a      	mov	r2, r3
 8003298:	f000 f8b0 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2150      	movs	r1, #80	@ 0x50
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f907 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e02c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 f8ce 	bl	8003458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2160      	movs	r1, #96	@ 0x60
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8f7 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032c8:	e01c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 f890 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2140      	movs	r1, #64	@ 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f8e7 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032e8:	e00c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f000 f8de 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032fa:	e003      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003300:	e000      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <TIM_Base_SetConfig+0xd8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1f      	ldr	r2, [pc, #124]	@ (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1e      	ldr	r2, [pc, #120]	@ (80033f8 <TIM_Base_SetConfig+0xd8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d103      	bne.n	80033c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]
  }
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e046      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f924 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fdb7 	bl	800419c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d175      	bne.n	8003790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	@ 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe fa99 	bl	8001bf8 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02e      	b.n	8003758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fb1c 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cb      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fae8 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d112      	bne.n	80037da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Receive_IT+0x26>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e00b      	b.n	80037dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	461a      	mov	r2, r3
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fb0f 	bl	8003df4 <UART_Start_Receive_IT>
 80037d6:	4603      	mov	r3, r0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b0ba      	sub	sp, #232	@ 0xe8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_UART_IRQHandler+0x66>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fbec 	bl	8004020 <UART_Receive_IT>
      return;
 8003848:	e25b      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800384a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80de 	beq.w	8003a10 <HAL_UART_IRQHandler+0x22c>
 8003854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80d1 	beq.w	8003a10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xae>
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f043 0202 	orr.w	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
 80038c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0208 	orr.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 81f2 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x14e>
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fb77 	bl	8004020 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_UART_IRQHandler+0x17a>
 8003956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04f      	beq.n	80039fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa81 	bl	8003e66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d041      	beq.n	80039f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800398c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800399e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1d9      	bne.n	8003972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d013      	beq.n	80039ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc4 <HAL_UART_IRQHandler+0x3e0>)
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fa86 	bl	8001ee4 <HAL_DMA_Abort_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039e8:	4610      	mov	r0, r2
 80039ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e00e      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f993 	bl	8003d1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	e00a      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f98f 	bl	8003d1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	e006      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f98b 	bl	8003d1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a0a:	e175      	b.n	8003cf8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	bf00      	nop
    return;
 8003a0e:	e173      	b.n	8003cf8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 814f 	bne.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8148 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8141 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80b6 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8145 	beq.w	8003cfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f080 813e 	bcs.w	8003cfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f000 8088 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ac0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003acc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1d9      	bne.n	8003a94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003af0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e1      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b40:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e3      	bne.n	8003b1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b74:	f023 0310 	bic.w	r3, r3, #16
 8003b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b88:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e3      	bne.n	8003b62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe f965 	bl	8001e6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8b6 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc0:	e09c      	b.n	8003cfc <HAL_UART_IRQHandler+0x518>
 8003bc2:	bf00      	nop
 8003bc4:	08003f2b 	.word	0x08003f2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 808e 	beq.w	8003d00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8089 	beq.w	8003d00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e3      	bne.n	8003bee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e3      	bne.n	8003c26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e3      	bne.n	8003c6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f83b 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb6:	e023      	b.n	8003d00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x4f4>
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f93e 	bl	8003f52 <UART_Transmit_IT>
    return;
 8003cd6:	e014      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <HAL_UART_IRQHandler+0x51e>
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f97d 	bl	8003ff0 <UART_EndTransmit_IT>
    return;
 8003cf6:	e004      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d00:	bf00      	nop
  }
}
 8003d02:	37e8      	adds	r7, #232	@ 0xe8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d52:	e03b      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d037      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fd ff4c 	bl	8001bf8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e03a      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d020      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d01d      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d116      	bne.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f856 	bl	8003e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e00f      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d0b4      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2222      	movs	r2, #34	@ 0x22
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b095      	sub	sp, #84	@ 0x54
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d119      	bne.n	8003f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0310 	bic.w	r3, r3, #16
 8003ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003efe:	61ba      	str	r2, [r7, #24]
 8003f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f20:	bf00      	nop
 8003f22:	3754      	adds	r7, #84	@ 0x54
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fee8 	bl	8003d1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b21      	cmp	r3, #33	@ 0x21
 8003f64:	d13e      	bne.n	8003fe4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6e:	d114      	bne.n	8003f9a <UART_Transmit_IT+0x48>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d110      	bne.n	8003f9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	1c9a      	adds	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	e008      	b.n	8003fac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6211      	str	r1, [r2, #32]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10f      	bne.n	8003fe0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004006:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fe79 	bl	8003d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	@ 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b22      	cmp	r3, #34	@ 0x22
 8004032:	f040 80ae 	bne.w	8004192 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403e:	d117      	bne.n	8004070 <UART_Receive_IT+0x50>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d113      	bne.n	8004070 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	b29a      	uxth	r2, r3
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28
 800406e:	e026      	b.n	80040be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004082:	d007      	beq.n	8004094 <UART_Receive_IT+0x74>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <UART_Receive_IT+0x82>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e008      	b.n	80040b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4619      	mov	r1, r3
 80040cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d15d      	bne.n	800418e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0220 	bic.w	r2, r2, #32
 80040e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	d135      	bne.n	8004184 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 0310 	bic.w	r3, r3, #16
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413e:	623a      	str	r2, [r7, #32]
 8004140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69f9      	ldr	r1, [r7, #28]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	61bb      	str	r3, [r7, #24]
   return(result);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d10a      	bne.n	8004176 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fdd5 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
 8004182:	e002      	b.n	800418a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc fdfd 	bl	8000d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e002      	b.n	8004194 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3730      	adds	r7, #48	@ 0x30
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041d6:	f023 030c 	bic.w	r3, r3, #12
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	@ (80042b0 <UART_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe fc78 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	e002      	b.n	8004212 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fc60 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004210:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	4a22      	ldr	r2, [pc, #136]	@ (80042b4 <UART_SetConfig+0x118>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	0119      	lsls	r1, r3, #4
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fbb2 f2f3 	udiv	r2, r2, r3
 8004248:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <UART_SetConfig+0x118>)
 800424a:	fba3 0302 	umull	r0, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2064      	movs	r0, #100	@ 0x64
 8004252:	fb00 f303 	mul.w	r3, r0, r3
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	3332      	adds	r3, #50	@ 0x32
 800425c:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <UART_SetConfig+0x118>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004268:	4419      	add	r1, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004280:	4b0c      	ldr	r3, [pc, #48]	@ (80042b4 <UART_SetConfig+0x118>)
 8004282:	fba3 0302 	umull	r0, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2064      	movs	r0, #100	@ 0x64
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	3332      	adds	r3, #50	@ 0x32
 8004294:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <UART_SetConfig+0x118>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	440a      	add	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40013800 	.word	0x40013800
 80042b4:	51eb851f 	.word	0x51eb851f

080042b8 <__cvt>:
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042be:	461d      	mov	r5, r3
 80042c0:	bfbb      	ittet	lt
 80042c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80042c6:	461d      	movlt	r5, r3
 80042c8:	2300      	movge	r3, #0
 80042ca:	232d      	movlt	r3, #45	@ 0x2d
 80042cc:	b088      	sub	sp, #32
 80042ce:	4614      	mov	r4, r2
 80042d0:	bfb8      	it	lt
 80042d2:	4614      	movlt	r4, r2
 80042d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80042d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80042d8:	7013      	strb	r3, [r2, #0]
 80042da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80042e0:	f023 0820 	bic.w	r8, r3, #32
 80042e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042e8:	d005      	beq.n	80042f6 <__cvt+0x3e>
 80042ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80042ee:	d100      	bne.n	80042f2 <__cvt+0x3a>
 80042f0:	3601      	adds	r6, #1
 80042f2:	2302      	movs	r3, #2
 80042f4:	e000      	b.n	80042f8 <__cvt+0x40>
 80042f6:	2303      	movs	r3, #3
 80042f8:	aa07      	add	r2, sp, #28
 80042fa:	9204      	str	r2, [sp, #16]
 80042fc:	aa06      	add	r2, sp, #24
 80042fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004302:	e9cd 3600 	strd	r3, r6, [sp]
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	f000 fe81 	bl	8005010 <_dtoa_r>
 800430e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004312:	4607      	mov	r7, r0
 8004314:	d119      	bne.n	800434a <__cvt+0x92>
 8004316:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d50e      	bpl.n	800433a <__cvt+0x82>
 800431c:	eb00 0906 	add.w	r9, r0, r6
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	4620      	mov	r0, r4
 8004326:	4629      	mov	r1, r5
 8004328:	f7fc fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800432c:	b108      	cbz	r0, 8004332 <__cvt+0x7a>
 800432e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004332:	2230      	movs	r2, #48	@ 0x30
 8004334:	9b07      	ldr	r3, [sp, #28]
 8004336:	454b      	cmp	r3, r9
 8004338:	d31e      	bcc.n	8004378 <__cvt+0xc0>
 800433a:	4638      	mov	r0, r7
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004340:	1bdb      	subs	r3, r3, r7
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	b008      	add	sp, #32
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800434e:	eb00 0906 	add.w	r9, r0, r6
 8004352:	d1e5      	bne.n	8004320 <__cvt+0x68>
 8004354:	7803      	ldrb	r3, [r0, #0]
 8004356:	2b30      	cmp	r3, #48	@ 0x30
 8004358:	d10a      	bne.n	8004370 <__cvt+0xb8>
 800435a:	2200      	movs	r2, #0
 800435c:	2300      	movs	r3, #0
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f7fc fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8004366:	b918      	cbnz	r0, 8004370 <__cvt+0xb8>
 8004368:	f1c6 0601 	rsb	r6, r6, #1
 800436c:	f8ca 6000 	str.w	r6, [sl]
 8004370:	f8da 3000 	ldr.w	r3, [sl]
 8004374:	4499      	add	r9, r3
 8004376:	e7d3      	b.n	8004320 <__cvt+0x68>
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	9107      	str	r1, [sp, #28]
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e7d9      	b.n	8004334 <__cvt+0x7c>

08004380 <__exponent>:
 8004380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004382:	2900      	cmp	r1, #0
 8004384:	bfb6      	itet	lt
 8004386:	232d      	movlt	r3, #45	@ 0x2d
 8004388:	232b      	movge	r3, #43	@ 0x2b
 800438a:	4249      	neglt	r1, r1
 800438c:	2909      	cmp	r1, #9
 800438e:	7002      	strb	r2, [r0, #0]
 8004390:	7043      	strb	r3, [r0, #1]
 8004392:	dd29      	ble.n	80043e8 <__exponent+0x68>
 8004394:	f10d 0307 	add.w	r3, sp, #7
 8004398:	461d      	mov	r5, r3
 800439a:	270a      	movs	r7, #10
 800439c:	fbb1 f6f7 	udiv	r6, r1, r7
 80043a0:	461a      	mov	r2, r3
 80043a2:	fb07 1416 	mls	r4, r7, r6, r1
 80043a6:	3430      	adds	r4, #48	@ 0x30
 80043a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80043ac:	460c      	mov	r4, r1
 80043ae:	2c63      	cmp	r4, #99	@ 0x63
 80043b0:	4631      	mov	r1, r6
 80043b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80043b6:	dcf1      	bgt.n	800439c <__exponent+0x1c>
 80043b8:	3130      	adds	r1, #48	@ 0x30
 80043ba:	1e94      	subs	r4, r2, #2
 80043bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043c0:	4623      	mov	r3, r4
 80043c2:	1c41      	adds	r1, r0, #1
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	d30a      	bcc.n	80043de <__exponent+0x5e>
 80043c8:	f10d 0309 	add.w	r3, sp, #9
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	42ac      	cmp	r4, r5
 80043d0:	bf88      	it	hi
 80043d2:	2300      	movhi	r3, #0
 80043d4:	3302      	adds	r3, #2
 80043d6:	4403      	add	r3, r0
 80043d8:	1a18      	subs	r0, r3, r0
 80043da:	b003      	add	sp, #12
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80043e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80043e6:	e7ed      	b.n	80043c4 <__exponent+0x44>
 80043e8:	2330      	movs	r3, #48	@ 0x30
 80043ea:	3130      	adds	r1, #48	@ 0x30
 80043ec:	7083      	strb	r3, [r0, #2]
 80043ee:	70c1      	strb	r1, [r0, #3]
 80043f0:	1d03      	adds	r3, r0, #4
 80043f2:	e7f1      	b.n	80043d8 <__exponent+0x58>

080043f4 <_printf_float>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	b091      	sub	sp, #68	@ 0x44
 80043fa:	460c      	mov	r4, r1
 80043fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004400:	4616      	mov	r6, r2
 8004402:	461f      	mov	r7, r3
 8004404:	4605      	mov	r5, r0
 8004406:	f000 fcf5 	bl	8004df4 <_localeconv_r>
 800440a:	6803      	ldr	r3, [r0, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	9308      	str	r3, [sp, #32]
 8004410:	f7fb fe9e 	bl	8000150 <strlen>
 8004414:	2300      	movs	r3, #0
 8004416:	930e      	str	r3, [sp, #56]	@ 0x38
 8004418:	f8d8 3000 	ldr.w	r3, [r8]
 800441c:	9009      	str	r0, [sp, #36]	@ 0x24
 800441e:	3307      	adds	r3, #7
 8004420:	f023 0307 	bic.w	r3, r3, #7
 8004424:	f103 0208 	add.w	r2, r3, #8
 8004428:	f894 a018 	ldrb.w	sl, [r4, #24]
 800442c:	f8d4 b000 	ldr.w	fp, [r4]
 8004430:	f8c8 2000 	str.w	r2, [r8]
 8004434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004438:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800443c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800443e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004442:	f04f 32ff 	mov.w	r2, #4294967295
 8004446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800444a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800444e:	4b9c      	ldr	r3, [pc, #624]	@ (80046c0 <_printf_float+0x2cc>)
 8004450:	f7fc fadc 	bl	8000a0c <__aeabi_dcmpun>
 8004454:	bb70      	cbnz	r0, 80044b4 <_printf_float+0xc0>
 8004456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800445a:	f04f 32ff 	mov.w	r2, #4294967295
 800445e:	4b98      	ldr	r3, [pc, #608]	@ (80046c0 <_printf_float+0x2cc>)
 8004460:	f7fc fab6 	bl	80009d0 <__aeabi_dcmple>
 8004464:	bb30      	cbnz	r0, 80044b4 <_printf_float+0xc0>
 8004466:	2200      	movs	r2, #0
 8004468:	2300      	movs	r3, #0
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f7fc faa5 	bl	80009bc <__aeabi_dcmplt>
 8004472:	b110      	cbz	r0, 800447a <_printf_float+0x86>
 8004474:	232d      	movs	r3, #45	@ 0x2d
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800447a:	4a92      	ldr	r2, [pc, #584]	@ (80046c4 <_printf_float+0x2d0>)
 800447c:	4b92      	ldr	r3, [pc, #584]	@ (80046c8 <_printf_float+0x2d4>)
 800447e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004482:	bf94      	ite	ls
 8004484:	4690      	movls	r8, r2
 8004486:	4698      	movhi	r8, r3
 8004488:	2303      	movs	r3, #3
 800448a:	f04f 0900 	mov.w	r9, #0
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	f02b 0304 	bic.w	r3, fp, #4
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	4633      	mov	r3, r6
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	9700      	str	r7, [sp, #0]
 800449e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80044a0:	f000 f9d4 	bl	800484c <_printf_common>
 80044a4:	3001      	adds	r0, #1
 80044a6:	f040 8090 	bne.w	80045ca <_printf_float+0x1d6>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	b011      	add	sp, #68	@ 0x44
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc faa6 	bl	8000a0c <__aeabi_dcmpun>
 80044c0:	b148      	cbz	r0, 80044d6 <_printf_float+0xe2>
 80044c2:	464b      	mov	r3, r9
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bfb8      	it	lt
 80044c8:	232d      	movlt	r3, #45	@ 0x2d
 80044ca:	4a80      	ldr	r2, [pc, #512]	@ (80046cc <_printf_float+0x2d8>)
 80044cc:	bfb8      	it	lt
 80044ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80044d2:	4b7f      	ldr	r3, [pc, #508]	@ (80046d0 <_printf_float+0x2dc>)
 80044d4:	e7d3      	b.n	800447e <_printf_float+0x8a>
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	d13f      	bne.n	8004560 <_printf_float+0x16c>
 80044e0:	2306      	movs	r3, #6
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	9206      	str	r2, [sp, #24]
 80044ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80044f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80044f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80044f6:	9203      	str	r2, [sp, #12]
 80044f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80044fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	4642      	mov	r2, r8
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	4628      	mov	r0, r5
 8004508:	464b      	mov	r3, r9
 800450a:	910a      	str	r1, [sp, #40]	@ 0x28
 800450c:	f7ff fed4 	bl	80042b8 <__cvt>
 8004510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004512:	4680      	mov	r8, r0
 8004514:	2947      	cmp	r1, #71	@ 0x47
 8004516:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004518:	d128      	bne.n	800456c <_printf_float+0x178>
 800451a:	1cc8      	adds	r0, r1, #3
 800451c:	db02      	blt.n	8004524 <_printf_float+0x130>
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	4299      	cmp	r1, r3
 8004522:	dd40      	ble.n	80045a6 <_printf_float+0x1b2>
 8004524:	f1aa 0a02 	sub.w	sl, sl, #2
 8004528:	fa5f fa8a 	uxtb.w	sl, sl
 800452c:	4652      	mov	r2, sl
 800452e:	3901      	subs	r1, #1
 8004530:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004534:	910d      	str	r1, [sp, #52]	@ 0x34
 8004536:	f7ff ff23 	bl	8004380 <__exponent>
 800453a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800453c:	4681      	mov	r9, r0
 800453e:	1813      	adds	r3, r2, r0
 8004540:	2a01      	cmp	r2, #1
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	dc02      	bgt.n	800454c <_printf_float+0x158>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	07d2      	lsls	r2, r2, #31
 800454a:	d501      	bpl.n	8004550 <_printf_float+0x15c>
 800454c:	3301      	adds	r3, #1
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004554:	2b00      	cmp	r3, #0
 8004556:	d09e      	beq.n	8004496 <_printf_float+0xa2>
 8004558:	232d      	movs	r3, #45	@ 0x2d
 800455a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800455e:	e79a      	b.n	8004496 <_printf_float+0xa2>
 8004560:	2947      	cmp	r1, #71	@ 0x47
 8004562:	d1bf      	bne.n	80044e4 <_printf_float+0xf0>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1bd      	bne.n	80044e4 <_printf_float+0xf0>
 8004568:	2301      	movs	r3, #1
 800456a:	e7ba      	b.n	80044e2 <_printf_float+0xee>
 800456c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004570:	d9dc      	bls.n	800452c <_printf_float+0x138>
 8004572:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004576:	d118      	bne.n	80045aa <_printf_float+0x1b6>
 8004578:	2900      	cmp	r1, #0
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	dd0b      	ble.n	8004596 <_printf_float+0x1a2>
 800457e:	6121      	str	r1, [r4, #16]
 8004580:	b913      	cbnz	r3, 8004588 <_printf_float+0x194>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	07d0      	lsls	r0, r2, #31
 8004586:	d502      	bpl.n	800458e <_printf_float+0x19a>
 8004588:	3301      	adds	r3, #1
 800458a:	440b      	add	r3, r1
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	f04f 0900 	mov.w	r9, #0
 8004592:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004594:	e7dc      	b.n	8004550 <_printf_float+0x15c>
 8004596:	b913      	cbnz	r3, 800459e <_printf_float+0x1aa>
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	07d2      	lsls	r2, r2, #31
 800459c:	d501      	bpl.n	80045a2 <_printf_float+0x1ae>
 800459e:	3302      	adds	r3, #2
 80045a0:	e7f4      	b.n	800458c <_printf_float+0x198>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7f2      	b.n	800458c <_printf_float+0x198>
 80045a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80045aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045ac:	4299      	cmp	r1, r3
 80045ae:	db05      	blt.n	80045bc <_printf_float+0x1c8>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	6121      	str	r1, [r4, #16]
 80045b4:	07d8      	lsls	r0, r3, #31
 80045b6:	d5ea      	bpl.n	800458e <_printf_float+0x19a>
 80045b8:	1c4b      	adds	r3, r1, #1
 80045ba:	e7e7      	b.n	800458c <_printf_float+0x198>
 80045bc:	2900      	cmp	r1, #0
 80045be:	bfcc      	ite	gt
 80045c0:	2201      	movgt	r2, #1
 80045c2:	f1c1 0202 	rsble	r2, r1, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	e7e0      	b.n	800458c <_printf_float+0x198>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	055a      	lsls	r2, r3, #21
 80045ce:	d407      	bmi.n	80045e0 <_printf_float+0x1ec>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	4642      	mov	r2, r8
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	d12b      	bne.n	8004636 <_printf_float+0x242>
 80045de:	e764      	b.n	80044aa <_printf_float+0xb6>
 80045e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045e4:	f240 80dc 	bls.w	80047a0 <_printf_float+0x3ac>
 80045e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	f7fc f9da 	bl	80009a8 <__aeabi_dcmpeq>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d033      	beq.n	8004660 <_printf_float+0x26c>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	4a35      	ldr	r2, [pc, #212]	@ (80046d4 <_printf_float+0x2e0>)
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	f43f af51 	beq.w	80044aa <_printf_float+0xb6>
 8004608:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800460c:	4543      	cmp	r3, r8
 800460e:	db02      	blt.n	8004616 <_printf_float+0x222>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	07d8      	lsls	r0, r3, #31
 8004614:	d50f      	bpl.n	8004636 <_printf_float+0x242>
 8004616:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800461a:	4631      	mov	r1, r6
 800461c:	4628      	mov	r0, r5
 800461e:	47b8      	blx	r7
 8004620:	3001      	adds	r0, #1
 8004622:	f43f af42 	beq.w	80044aa <_printf_float+0xb6>
 8004626:	f04f 0900 	mov.w	r9, #0
 800462a:	f108 38ff 	add.w	r8, r8, #4294967295
 800462e:	f104 0a1a 	add.w	sl, r4, #26
 8004632:	45c8      	cmp	r8, r9
 8004634:	dc09      	bgt.n	800464a <_printf_float+0x256>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	079b      	lsls	r3, r3, #30
 800463a:	f100 8102 	bmi.w	8004842 <_printf_float+0x44e>
 800463e:	68e0      	ldr	r0, [r4, #12]
 8004640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004642:	4298      	cmp	r0, r3
 8004644:	bfb8      	it	lt
 8004646:	4618      	movlt	r0, r3
 8004648:	e731      	b.n	80044ae <_printf_float+0xba>
 800464a:	2301      	movs	r3, #1
 800464c:	4652      	mov	r2, sl
 800464e:	4631      	mov	r1, r6
 8004650:	4628      	mov	r0, r5
 8004652:	47b8      	blx	r7
 8004654:	3001      	adds	r0, #1
 8004656:	f43f af28 	beq.w	80044aa <_printf_float+0xb6>
 800465a:	f109 0901 	add.w	r9, r9, #1
 800465e:	e7e8      	b.n	8004632 <_printf_float+0x23e>
 8004660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	dc38      	bgt.n	80046d8 <_printf_float+0x2e4>
 8004666:	2301      	movs	r3, #1
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <_printf_float+0x2e0>)
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f af1a 	beq.w	80044aa <_printf_float+0xb6>
 8004676:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800467a:	ea59 0303 	orrs.w	r3, r9, r3
 800467e:	d102      	bne.n	8004686 <_printf_float+0x292>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	07d9      	lsls	r1, r3, #31
 8004684:	d5d7      	bpl.n	8004636 <_printf_float+0x242>
 8004686:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f af0a 	beq.w	80044aa <_printf_float+0xb6>
 8004696:	f04f 0a00 	mov.w	sl, #0
 800469a:	f104 0b1a 	add.w	fp, r4, #26
 800469e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046a0:	425b      	negs	r3, r3
 80046a2:	4553      	cmp	r3, sl
 80046a4:	dc01      	bgt.n	80046aa <_printf_float+0x2b6>
 80046a6:	464b      	mov	r3, r9
 80046a8:	e793      	b.n	80045d2 <_printf_float+0x1de>
 80046aa:	2301      	movs	r3, #1
 80046ac:	465a      	mov	r2, fp
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f aef8 	beq.w	80044aa <_printf_float+0xb6>
 80046ba:	f10a 0a01 	add.w	sl, sl, #1
 80046be:	e7ee      	b.n	800469e <_printf_float+0x2aa>
 80046c0:	7fefffff 	.word	0x7fefffff
 80046c4:	0800705e 	.word	0x0800705e
 80046c8:	08007062 	.word	0x08007062
 80046cc:	08007066 	.word	0x08007066
 80046d0:	0800706a 	.word	0x0800706a
 80046d4:	0800706e 	.word	0x0800706e
 80046d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80046de:	4553      	cmp	r3, sl
 80046e0:	bfa8      	it	ge
 80046e2:	4653      	movge	r3, sl
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	4699      	mov	r9, r3
 80046e8:	dc36      	bgt.n	8004758 <_printf_float+0x364>
 80046ea:	f04f 0b00 	mov.w	fp, #0
 80046ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046f2:	f104 021a 	add.w	r2, r4, #26
 80046f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046fa:	eba3 0309 	sub.w	r3, r3, r9
 80046fe:	455b      	cmp	r3, fp
 8004700:	dc31      	bgt.n	8004766 <_printf_float+0x372>
 8004702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004704:	459a      	cmp	sl, r3
 8004706:	dc3a      	bgt.n	800477e <_printf_float+0x38a>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d437      	bmi.n	800477e <_printf_float+0x38a>
 800470e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004710:	ebaa 0903 	sub.w	r9, sl, r3
 8004714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004716:	ebaa 0303 	sub.w	r3, sl, r3
 800471a:	4599      	cmp	r9, r3
 800471c:	bfa8      	it	ge
 800471e:	4699      	movge	r9, r3
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	dc33      	bgt.n	800478e <_printf_float+0x39a>
 8004726:	f04f 0800 	mov.w	r8, #0
 800472a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800472e:	f104 0b1a 	add.w	fp, r4, #26
 8004732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004734:	ebaa 0303 	sub.w	r3, sl, r3
 8004738:	eba3 0309 	sub.w	r3, r3, r9
 800473c:	4543      	cmp	r3, r8
 800473e:	f77f af7a 	ble.w	8004636 <_printf_float+0x242>
 8004742:	2301      	movs	r3, #1
 8004744:	465a      	mov	r2, fp
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	f43f aeac 	beq.w	80044aa <_printf_float+0xb6>
 8004752:	f108 0801 	add.w	r8, r8, #1
 8004756:	e7ec      	b.n	8004732 <_printf_float+0x33e>
 8004758:	4642      	mov	r2, r8
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	d1c2      	bne.n	80046ea <_printf_float+0x2f6>
 8004764:	e6a1      	b.n	80044aa <_printf_float+0xb6>
 8004766:	2301      	movs	r3, #1
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	920a      	str	r2, [sp, #40]	@ 0x28
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f ae9a 	beq.w	80044aa <_printf_float+0xb6>
 8004776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004778:	f10b 0b01 	add.w	fp, fp, #1
 800477c:	e7bb      	b.n	80046f6 <_printf_float+0x302>
 800477e:	4631      	mov	r1, r6
 8004780:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	d1c0      	bne.n	800470e <_printf_float+0x31a>
 800478c:	e68d      	b.n	80044aa <_printf_float+0xb6>
 800478e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004790:	464b      	mov	r3, r9
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	4442      	add	r2, r8
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	d1c3      	bne.n	8004726 <_printf_float+0x332>
 800479e:	e684      	b.n	80044aa <_printf_float+0xb6>
 80047a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80047a4:	f1ba 0f01 	cmp.w	sl, #1
 80047a8:	dc01      	bgt.n	80047ae <_printf_float+0x3ba>
 80047aa:	07db      	lsls	r3, r3, #31
 80047ac:	d536      	bpl.n	800481c <_printf_float+0x428>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4642      	mov	r2, r8
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae76 	beq.w	80044aa <_printf_float+0xb6>
 80047be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047c2:	4631      	mov	r1, r6
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b8      	blx	r7
 80047c8:	3001      	adds	r0, #1
 80047ca:	f43f ae6e 	beq.w	80044aa <_printf_float+0xb6>
 80047ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047d2:	2200      	movs	r2, #0
 80047d4:	2300      	movs	r3, #0
 80047d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047da:	f7fc f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80047de:	b9c0      	cbnz	r0, 8004812 <_printf_float+0x41e>
 80047e0:	4653      	mov	r3, sl
 80047e2:	f108 0201 	add.w	r2, r8, #1
 80047e6:	4631      	mov	r1, r6
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	d10c      	bne.n	800480a <_printf_float+0x416>
 80047f0:	e65b      	b.n	80044aa <_printf_float+0xb6>
 80047f2:	2301      	movs	r3, #1
 80047f4:	465a      	mov	r2, fp
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	f43f ae54 	beq.w	80044aa <_printf_float+0xb6>
 8004802:	f108 0801 	add.w	r8, r8, #1
 8004806:	45d0      	cmp	r8, sl
 8004808:	dbf3      	blt.n	80047f2 <_printf_float+0x3fe>
 800480a:	464b      	mov	r3, r9
 800480c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004810:	e6e0      	b.n	80045d4 <_printf_float+0x1e0>
 8004812:	f04f 0800 	mov.w	r8, #0
 8004816:	f104 0b1a 	add.w	fp, r4, #26
 800481a:	e7f4      	b.n	8004806 <_printf_float+0x412>
 800481c:	2301      	movs	r3, #1
 800481e:	4642      	mov	r2, r8
 8004820:	e7e1      	b.n	80047e6 <_printf_float+0x3f2>
 8004822:	2301      	movs	r3, #1
 8004824:	464a      	mov	r2, r9
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f ae3c 	beq.w	80044aa <_printf_float+0xb6>
 8004832:	f108 0801 	add.w	r8, r8, #1
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	4543      	cmp	r3, r8
 800483e:	dcf0      	bgt.n	8004822 <_printf_float+0x42e>
 8004840:	e6fd      	b.n	800463e <_printf_float+0x24a>
 8004842:	f04f 0800 	mov.w	r8, #0
 8004846:	f104 0919 	add.w	r9, r4, #25
 800484a:	e7f4      	b.n	8004836 <_printf_float+0x442>

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4698      	mov	r8, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4607      	mov	r7, r0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfb8      	it	lt
 800485e:	4613      	movlt	r3, r2
 8004860:	6033      	str	r3, [r6, #0]
 8004862:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc2b      	bgt.n	80048ec <_printf_common+0xa0>
 8004894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	3b00      	subs	r3, #0
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d430      	bmi.n	8004906 <_printf_common+0xba>
 80048a4:	4641      	mov	r1, r8
 80048a6:	4638      	mov	r0, r7
 80048a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048ac:	47c8      	blx	r9
 80048ae:	3001      	adds	r0, #1
 80048b0:	d023      	beq.n	80048fa <_printf_common+0xae>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf14      	ite	ne
 80048be:	2500      	movne	r5, #0
 80048c0:	6833      	ldreq	r3, [r6, #0]
 80048c2:	f04f 0600 	mov.w	r6, #0
 80048c6:	bf08      	it	eq
 80048c8:	68e5      	ldreq	r5, [r4, #12]
 80048ca:	f104 041a 	add.w	r4, r4, #26
 80048ce:	bf08      	it	eq
 80048d0:	1aed      	subeq	r5, r5, r3
 80048d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048d6:	bf08      	it	eq
 80048d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfc4      	itt	gt
 80048e0:	1a9b      	subgt	r3, r3, r2
 80048e2:	18ed      	addgt	r5, r5, r3
 80048e4:	42b5      	cmp	r5, r6
 80048e6:	d11a      	bne.n	800491e <_printf_common+0xd2>
 80048e8:	2000      	movs	r0, #0
 80048ea:	e008      	b.n	80048fe <_printf_common+0xb2>
 80048ec:	2301      	movs	r3, #1
 80048ee:	4652      	mov	r2, sl
 80048f0:	4641      	mov	r1, r8
 80048f2:	4638      	mov	r0, r7
 80048f4:	47c8      	blx	r9
 80048f6:	3001      	adds	r0, #1
 80048f8:	d103      	bne.n	8004902 <_printf_common+0xb6>
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004902:	3501      	adds	r5, #1
 8004904:	e7c1      	b.n	800488a <_printf_common+0x3e>
 8004906:	2030      	movs	r0, #48	@ 0x30
 8004908:	18e1      	adds	r1, r4, r3
 800490a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004914:	4422      	add	r2, r4
 8004916:	3302      	adds	r3, #2
 8004918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800491c:	e7c2      	b.n	80048a4 <_printf_common+0x58>
 800491e:	2301      	movs	r3, #1
 8004920:	4622      	mov	r2, r4
 8004922:	4641      	mov	r1, r8
 8004924:	4638      	mov	r0, r7
 8004926:	47c8      	blx	r9
 8004928:	3001      	adds	r0, #1
 800492a:	d0e6      	beq.n	80048fa <_printf_common+0xae>
 800492c:	3601      	adds	r6, #1
 800492e:	e7d9      	b.n	80048e4 <_printf_common+0x98>

08004930 <_printf_i>:
 8004930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	7e0f      	ldrb	r7, [r1, #24]
 8004936:	4691      	mov	r9, r2
 8004938:	2f78      	cmp	r7, #120	@ 0x78
 800493a:	4680      	mov	r8, r0
 800493c:	460c      	mov	r4, r1
 800493e:	469a      	mov	sl, r3
 8004940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004946:	d807      	bhi.n	8004958 <_printf_i+0x28>
 8004948:	2f62      	cmp	r7, #98	@ 0x62
 800494a:	d80a      	bhi.n	8004962 <_printf_i+0x32>
 800494c:	2f00      	cmp	r7, #0
 800494e:	f000 80d3 	beq.w	8004af8 <_printf_i+0x1c8>
 8004952:	2f58      	cmp	r7, #88	@ 0x58
 8004954:	f000 80ba 	beq.w	8004acc <_printf_i+0x19c>
 8004958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800495c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004960:	e03a      	b.n	80049d8 <_printf_i+0xa8>
 8004962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004966:	2b15      	cmp	r3, #21
 8004968:	d8f6      	bhi.n	8004958 <_printf_i+0x28>
 800496a:	a101      	add	r1, pc, #4	@ (adr r1, 8004970 <_printf_i+0x40>)
 800496c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004970:	080049c9 	.word	0x080049c9
 8004974:	080049dd 	.word	0x080049dd
 8004978:	08004959 	.word	0x08004959
 800497c:	08004959 	.word	0x08004959
 8004980:	08004959 	.word	0x08004959
 8004984:	08004959 	.word	0x08004959
 8004988:	080049dd 	.word	0x080049dd
 800498c:	08004959 	.word	0x08004959
 8004990:	08004959 	.word	0x08004959
 8004994:	08004959 	.word	0x08004959
 8004998:	08004959 	.word	0x08004959
 800499c:	08004adf 	.word	0x08004adf
 80049a0:	08004a07 	.word	0x08004a07
 80049a4:	08004a99 	.word	0x08004a99
 80049a8:	08004959 	.word	0x08004959
 80049ac:	08004959 	.word	0x08004959
 80049b0:	08004b01 	.word	0x08004b01
 80049b4:	08004959 	.word	0x08004959
 80049b8:	08004a07 	.word	0x08004a07
 80049bc:	08004959 	.word	0x08004959
 80049c0:	08004959 	.word	0x08004959
 80049c4:	08004aa1 	.word	0x08004aa1
 80049c8:	6833      	ldr	r3, [r6, #0]
 80049ca:	1d1a      	adds	r2, r3, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6032      	str	r2, [r6, #0]
 80049d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049d8:	2301      	movs	r3, #1
 80049da:	e09e      	b.n	8004b1a <_printf_i+0x1ea>
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	1d19      	adds	r1, r3, #4
 80049e2:	6031      	str	r1, [r6, #0]
 80049e4:	0606      	lsls	r6, r0, #24
 80049e6:	d501      	bpl.n	80049ec <_printf_i+0xbc>
 80049e8:	681d      	ldr	r5, [r3, #0]
 80049ea:	e003      	b.n	80049f4 <_printf_i+0xc4>
 80049ec:	0645      	lsls	r5, r0, #25
 80049ee:	d5fb      	bpl.n	80049e8 <_printf_i+0xb8>
 80049f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	da03      	bge.n	8004a00 <_printf_i+0xd0>
 80049f8:	232d      	movs	r3, #45	@ 0x2d
 80049fa:	426d      	negs	r5, r5
 80049fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a00:	230a      	movs	r3, #10
 8004a02:	4859      	ldr	r0, [pc, #356]	@ (8004b68 <_printf_i+0x238>)
 8004a04:	e011      	b.n	8004a2a <_printf_i+0xfa>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	0608      	lsls	r0, r1, #24
 8004a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a10:	d402      	bmi.n	8004a18 <_printf_i+0xe8>
 8004a12:	0649      	lsls	r1, r1, #25
 8004a14:	bf48      	it	mi
 8004a16:	b2ad      	uxthmi	r5, r5
 8004a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	bf14      	ite	ne
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2308      	moveq	r3, #8
 8004a22:	4851      	ldr	r0, [pc, #324]	@ (8004b68 <_printf_i+0x238>)
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a2a:	6866      	ldr	r6, [r4, #4]
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	bfa8      	it	ge
 8004a30:	6821      	ldrge	r1, [r4, #0]
 8004a32:	60a6      	str	r6, [r4, #8]
 8004a34:	bfa4      	itt	ge
 8004a36:	f021 0104 	bicge.w	r1, r1, #4
 8004a3a:	6021      	strge	r1, [r4, #0]
 8004a3c:	b90d      	cbnz	r5, 8004a42 <_printf_i+0x112>
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d04b      	beq.n	8004ada <_printf_i+0x1aa>
 8004a42:	4616      	mov	r6, r2
 8004a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a48:	fb03 5711 	mls	r7, r3, r1, r5
 8004a4c:	5dc7      	ldrb	r7, [r0, r7]
 8004a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a52:	462f      	mov	r7, r5
 8004a54:	42bb      	cmp	r3, r7
 8004a56:	460d      	mov	r5, r1
 8004a58:	d9f4      	bls.n	8004a44 <_printf_i+0x114>
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d10b      	bne.n	8004a76 <_printf_i+0x146>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	07df      	lsls	r7, r3, #31
 8004a62:	d508      	bpl.n	8004a76 <_printf_i+0x146>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	6861      	ldr	r1, [r4, #4]
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	bfde      	ittt	le
 8004a6c:	2330      	movle	r3, #48	@ 0x30
 8004a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a76:	1b92      	subs	r2, r2, r6
 8004a78:	6122      	str	r2, [r4, #16]
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f8cd a000 	str.w	sl, [sp]
 8004a84:	aa03      	add	r2, sp, #12
 8004a86:	f7ff fee1 	bl	800484c <_printf_common>
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d14a      	bne.n	8004b24 <_printf_i+0x1f4>
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	b004      	add	sp, #16
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	f043 0320 	orr.w	r3, r3, #32
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	2778      	movs	r7, #120	@ 0x78
 8004aa2:	4832      	ldr	r0, [pc, #200]	@ (8004b6c <_printf_i+0x23c>)
 8004aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	6831      	ldr	r1, [r6, #0]
 8004aac:	061f      	lsls	r7, r3, #24
 8004aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ab2:	d402      	bmi.n	8004aba <_printf_i+0x18a>
 8004ab4:	065f      	lsls	r7, r3, #25
 8004ab6:	bf48      	it	mi
 8004ab8:	b2ad      	uxthmi	r5, r5
 8004aba:	6031      	str	r1, [r6, #0]
 8004abc:	07d9      	lsls	r1, r3, #31
 8004abe:	bf44      	itt	mi
 8004ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac4:	6023      	strmi	r3, [r4, #0]
 8004ac6:	b11d      	cbz	r5, 8004ad0 <_printf_i+0x1a0>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	e7ab      	b.n	8004a24 <_printf_i+0xf4>
 8004acc:	4826      	ldr	r0, [pc, #152]	@ (8004b68 <_printf_i+0x238>)
 8004ace:	e7e9      	b.n	8004aa4 <_printf_i+0x174>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f023 0320 	bic.w	r3, r3, #32
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	e7f6      	b.n	8004ac8 <_printf_i+0x198>
 8004ada:	4616      	mov	r6, r2
 8004adc:	e7bd      	b.n	8004a5a <_printf_i+0x12a>
 8004ade:	6833      	ldr	r3, [r6, #0]
 8004ae0:	6825      	ldr	r5, [r4, #0]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6961      	ldr	r1, [r4, #20]
 8004ae6:	6030      	str	r0, [r6, #0]
 8004ae8:	062e      	lsls	r6, r5, #24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	d501      	bpl.n	8004af2 <_printf_i+0x1c2>
 8004aee:	6019      	str	r1, [r3, #0]
 8004af0:	e002      	b.n	8004af8 <_printf_i+0x1c8>
 8004af2:	0668      	lsls	r0, r5, #25
 8004af4:	d5fb      	bpl.n	8004aee <_printf_i+0x1be>
 8004af6:	8019      	strh	r1, [r3, #0]
 8004af8:	2300      	movs	r3, #0
 8004afa:	4616      	mov	r6, r2
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	e7bc      	b.n	8004a7a <_printf_i+0x14a>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	2100      	movs	r1, #0
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	6032      	str	r2, [r6, #0]
 8004b08:	681e      	ldr	r6, [r3, #0]
 8004b0a:	6862      	ldr	r2, [r4, #4]
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f9e8 	bl	8004ee2 <memchr>
 8004b12:	b108      	cbz	r0, 8004b18 <_printf_i+0x1e8>
 8004b14:	1b80      	subs	r0, r0, r6
 8004b16:	6060      	str	r0, [r4, #4]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b22:	e7aa      	b.n	8004a7a <_printf_i+0x14a>
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	47d0      	blx	sl
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0ad      	beq.n	8004a8e <_printf_i+0x15e>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	079b      	lsls	r3, r3, #30
 8004b36:	d413      	bmi.n	8004b60 <_printf_i+0x230>
 8004b38:	68e0      	ldr	r0, [r4, #12]
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	bfb8      	it	lt
 8004b40:	4618      	movlt	r0, r3
 8004b42:	e7a6      	b.n	8004a92 <_printf_i+0x162>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4632      	mov	r2, r6
 8004b48:	4649      	mov	r1, r9
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	47d0      	blx	sl
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d09d      	beq.n	8004a8e <_printf_i+0x15e>
 8004b52:	3501      	adds	r5, #1
 8004b54:	68e3      	ldr	r3, [r4, #12]
 8004b56:	9903      	ldr	r1, [sp, #12]
 8004b58:	1a5b      	subs	r3, r3, r1
 8004b5a:	42ab      	cmp	r3, r5
 8004b5c:	dcf2      	bgt.n	8004b44 <_printf_i+0x214>
 8004b5e:	e7eb      	b.n	8004b38 <_printf_i+0x208>
 8004b60:	2500      	movs	r5, #0
 8004b62:	f104 0619 	add.w	r6, r4, #25
 8004b66:	e7f5      	b.n	8004b54 <_printf_i+0x224>
 8004b68:	08007070 	.word	0x08007070
 8004b6c:	08007081 	.word	0x08007081

08004b70 <std>:
 8004b70:	2300      	movs	r3, #0
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4604      	mov	r4, r0
 8004b76:	e9c0 3300 	strd	r3, r3, [r0]
 8004b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b7e:	6083      	str	r3, [r0, #8]
 8004b80:	8181      	strh	r1, [r0, #12]
 8004b82:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b84:	81c2      	strh	r2, [r0, #14]
 8004b86:	6183      	str	r3, [r0, #24]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	305c      	adds	r0, #92	@ 0x5c
 8004b8e:	f000 f928 	bl	8004de2 <memset>
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <std+0x58>)
 8004b94:	6224      	str	r4, [r4, #32]
 8004b96:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b98:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <std+0x5c>)
 8004b9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <std+0x60>)
 8004b9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <std+0x64>)
 8004ba2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <std+0x68>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d006      	beq.n	8004bb8 <std+0x48>
 8004baa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bae:	4294      	cmp	r4, r2
 8004bb0:	d002      	beq.n	8004bb8 <std+0x48>
 8004bb2:	33d0      	adds	r3, #208	@ 0xd0
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d105      	bne.n	8004bc4 <std+0x54>
 8004bb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f000 b98c 	b.w	8004edc <__retarget_lock_init_recursive>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08004d5d 	.word	0x08004d5d
 8004bcc:	08004d7f 	.word	0x08004d7f
 8004bd0:	08004db7 	.word	0x08004db7
 8004bd4:	08004ddb 	.word	0x08004ddb
 8004bd8:	20000318 	.word	0x20000318

08004bdc <stdio_exit_handler>:
 8004bdc:	4a02      	ldr	r2, [pc, #8]	@ (8004be8 <stdio_exit_handler+0xc>)
 8004bde:	4903      	ldr	r1, [pc, #12]	@ (8004bec <stdio_exit_handler+0x10>)
 8004be0:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <stdio_exit_handler+0x14>)
 8004be2:	f000 b869 	b.w	8004cb8 <_fwalk_sglue>
 8004be6:	bf00      	nop
 8004be8:	20000028 	.word	0x20000028
 8004bec:	0800684d 	.word	0x0800684d
 8004bf0:	20000038 	.word	0x20000038

08004bf4 <cleanup_stdio>:
 8004bf4:	6841      	ldr	r1, [r0, #4]
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <cleanup_stdio+0x34>)
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	d001      	beq.n	8004c04 <cleanup_stdio+0x10>
 8004c00:	f001 fe24 	bl	800684c <_fflush_r>
 8004c04:	68a1      	ldr	r1, [r4, #8]
 8004c06:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <cleanup_stdio+0x38>)
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d002      	beq.n	8004c12 <cleanup_stdio+0x1e>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f001 fe1d 	bl	800684c <_fflush_r>
 8004c12:	68e1      	ldr	r1, [r4, #12]
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <cleanup_stdio+0x3c>)
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d004      	beq.n	8004c24 <cleanup_stdio+0x30>
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f001 be14 	b.w	800684c <_fflush_r>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	20000318 	.word	0x20000318
 8004c2c:	20000380 	.word	0x20000380
 8004c30:	200003e8 	.word	0x200003e8

08004c34 <global_stdio_init.part.0>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <global_stdio_init.part.0+0x30>)
 8004c38:	4c0b      	ldr	r4, [pc, #44]	@ (8004c68 <global_stdio_init.part.0+0x34>)
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c6c <global_stdio_init.part.0+0x38>)
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	2104      	movs	r1, #4
 8004c42:	2200      	movs	r2, #0
 8004c44:	f7ff ff94 	bl	8004b70 <std>
 8004c48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	2109      	movs	r1, #9
 8004c50:	f7ff ff8e 	bl	8004b70 <std>
 8004c54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c58:	2202      	movs	r2, #2
 8004c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5e:	2112      	movs	r1, #18
 8004c60:	f7ff bf86 	b.w	8004b70 <std>
 8004c64:	20000450 	.word	0x20000450
 8004c68:	20000318 	.word	0x20000318
 8004c6c:	08004bdd 	.word	0x08004bdd

08004c70 <__sfp_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__sfp_lock_acquire+0x8>)
 8004c72:	f000 b934 	b.w	8004ede <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000459 	.word	0x20000459

08004c7c <__sfp_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__sfp_lock_release+0x8>)
 8004c7e:	f000 b92f 	b.w	8004ee0 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000459 	.word	0x20000459

08004c88 <__sinit>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f7ff fff0 	bl	8004c70 <__sfp_lock_acquire>
 8004c90:	6a23      	ldr	r3, [r4, #32]
 8004c92:	b11b      	cbz	r3, 8004c9c <__sinit+0x14>
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f7ff bff0 	b.w	8004c7c <__sfp_lock_release>
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <__sinit+0x28>)
 8004c9e:	6223      	str	r3, [r4, #32]
 8004ca0:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <__sinit+0x2c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f5      	bne.n	8004c94 <__sinit+0xc>
 8004ca8:	f7ff ffc4 	bl	8004c34 <global_stdio_init.part.0>
 8004cac:	e7f2      	b.n	8004c94 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	08004bf5 	.word	0x08004bf5
 8004cb4:	20000450 	.word	0x20000450

08004cb8 <_fwalk_sglue>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	4688      	mov	r8, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004ccc:	d505      	bpl.n	8004cda <_fwalk_sglue+0x22>
 8004cce:	6824      	ldr	r4, [r4, #0]
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	d1f7      	bne.n	8004cc4 <_fwalk_sglue+0xc>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d907      	bls.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d003      	beq.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	4306      	orrs	r6, r0
 8004cf0:	3568      	adds	r5, #104	@ 0x68
 8004cf2:	e7e9      	b.n	8004cc8 <_fwalk_sglue+0x10>

08004cf4 <sniprintf>:
 8004cf4:	b40c      	push	{r2, r3}
 8004cf6:	b530      	push	{r4, r5, lr}
 8004cf8:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <sniprintf+0x64>)
 8004cfa:	1e0c      	subs	r4, r1, #0
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	b09d      	sub	sp, #116	@ 0x74
 8004d00:	da08      	bge.n	8004d14 <sniprintf+0x20>
 8004d02:	238b      	movs	r3, #139	@ 0x8b
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	602b      	str	r3, [r5, #0]
 8004d0a:	b01d      	add	sp, #116	@ 0x74
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	b002      	add	sp, #8
 8004d12:	4770      	bx	lr
 8004d14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d1c:	bf0c      	ite	eq
 8004d1e:	4623      	moveq	r3, r4
 8004d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d2c:	9002      	str	r0, [sp, #8]
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d34:	4628      	mov	r0, r5
 8004d36:	ab21      	add	r3, sp, #132	@ 0x84
 8004d38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d3a:	a902      	add	r1, sp, #8
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f001 fc09 	bl	8006554 <_svfiprintf_r>
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	bfbc      	itt	lt
 8004d46:	238b      	movlt	r3, #139	@ 0x8b
 8004d48:	602b      	strlt	r3, [r5, #0]
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	d0dd      	beq.n	8004d0a <sniprintf+0x16>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	9b02      	ldr	r3, [sp, #8]
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e7d9      	b.n	8004d0a <sniprintf+0x16>
 8004d56:	bf00      	nop
 8004d58:	20000034 	.word	0x20000034

08004d5c <__sread>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	460c      	mov	r4, r1
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	f000 f86c 	bl	8004e40 <_read_r>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	bfab      	itete	ge
 8004d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d70:	181b      	addge	r3, r3, r0
 8004d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d76:	bfac      	ite	ge
 8004d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d7a:	81a3      	strhlt	r3, [r4, #12]
 8004d7c:	bd10      	pop	{r4, pc}

08004d7e <__swrite>:
 8004d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	461f      	mov	r7, r3
 8004d84:	898b      	ldrh	r3, [r1, #12]
 8004d86:	4605      	mov	r5, r0
 8004d88:	05db      	lsls	r3, r3, #23
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	d505      	bpl.n	8004d9c <__swrite+0x1e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	2200      	movs	r2, #0
 8004d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d98:	f000 f840 	bl	8004e1c <_lseek_r>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	4632      	mov	r2, r6
 8004da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	4628      	mov	r0, r5
 8004da8:	463b      	mov	r3, r7
 8004daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	f000 b857 	b.w	8004e64 <_write_r>

08004db6 <__sseek>:
 8004db6:	b510      	push	{r4, lr}
 8004db8:	460c      	mov	r4, r1
 8004dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbe:	f000 f82d 	bl	8004e1c <_lseek_r>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	bf15      	itete	ne
 8004dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004dd2:	81a3      	strheq	r3, [r4, #12]
 8004dd4:	bf18      	it	ne
 8004dd6:	81a3      	strhne	r3, [r4, #12]
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <__sclose>:
 8004dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dde:	f000 b80d 	b.w	8004dfc <_close_r>

08004de2 <memset>:
 8004de2:	4603      	mov	r3, r0
 8004de4:	4402      	add	r2, r0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d100      	bne.n	8004dec <memset+0xa>
 8004dea:	4770      	bx	lr
 8004dec:	f803 1b01 	strb.w	r1, [r3], #1
 8004df0:	e7f9      	b.n	8004de6 <memset+0x4>
	...

08004df4 <_localeconv_r>:
 8004df4:	4800      	ldr	r0, [pc, #0]	@ (8004df8 <_localeconv_r+0x4>)
 8004df6:	4770      	bx	lr
 8004df8:	20000174 	.word	0x20000174

08004dfc <_close_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	2300      	movs	r3, #0
 8004e00:	4d05      	ldr	r5, [pc, #20]	@ (8004e18 <_close_r+0x1c>)
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	f7fc fe0b 	bl	8001a22 <_close>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_close_r+0x1a>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_close_r+0x1a>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	20000454 	.word	0x20000454

08004e1c <_lseek_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	2200      	movs	r2, #0
 8004e26:	4d05      	ldr	r5, [pc, #20]	@ (8004e3c <_lseek_r+0x20>)
 8004e28:	602a      	str	r2, [r5, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f7fc fe1d 	bl	8001a6a <_lseek>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_lseek_r+0x1e>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_lseek_r+0x1e>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	20000454 	.word	0x20000454

08004e40 <_read_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4d05      	ldr	r5, [pc, #20]	@ (8004e60 <_read_r+0x20>)
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fc fdae 	bl	80019b0 <_read>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_read_r+0x1e>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_read_r+0x1e>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000454 	.word	0x20000454

08004e64 <_write_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4d05      	ldr	r5, [pc, #20]	@ (8004e84 <_write_r+0x20>)
 8004e70:	602a      	str	r2, [r5, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f7fc fdb9 	bl	80019ea <_write>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_write_r+0x1e>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_write_r+0x1e>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000454 	.word	0x20000454

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	@ (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000034 	.word	0x20000034

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	2600      	movs	r6, #0
 8004e98:	4d0c      	ldr	r5, [pc, #48]	@ (8004ecc <__libc_init_array+0x38>)
 8004e9a:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed0 <__libc_init_array+0x3c>)
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	f002 f86e 	bl	8006f84 <_init>
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	4d0a      	ldr	r5, [pc, #40]	@ (8004ed4 <__libc_init_array+0x40>)
 8004eac:	4c0a      	ldr	r4, [pc, #40]	@ (8004ed8 <__libc_init_array+0x44>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	080073d8 	.word	0x080073d8
 8004ed0:	080073d8 	.word	0x080073d8
 8004ed4:	080073d8 	.word	0x080073d8
 8004ed8:	080073dc 	.word	0x080073dc

08004edc <__retarget_lock_init_recursive>:
 8004edc:	4770      	bx	lr

08004ede <__retarget_lock_acquire_recursive>:
 8004ede:	4770      	bx	lr

08004ee0 <__retarget_lock_release_recursive>:
 8004ee0:	4770      	bx	lr

08004ee2 <memchr>:
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	b2c9      	uxtb	r1, r1
 8004ee8:	4402      	add	r2, r0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	d101      	bne.n	8004ef4 <memchr+0x12>
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	e003      	b.n	8004efc <memchr+0x1a>
 8004ef4:	7804      	ldrb	r4, [r0, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	428c      	cmp	r4, r1
 8004efa:	d1f6      	bne.n	8004eea <memchr+0x8>
 8004efc:	bd10      	pop	{r4, pc}

08004efe <quorem>:
 8004efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f02:	6903      	ldr	r3, [r0, #16]
 8004f04:	690c      	ldr	r4, [r1, #16]
 8004f06:	4607      	mov	r7, r0
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	db7e      	blt.n	800500a <quorem+0x10c>
 8004f0c:	3c01      	subs	r4, #1
 8004f0e:	00a3      	lsls	r3, r4, #2
 8004f10:	f100 0514 	add.w	r5, r0, #20
 8004f14:	f101 0814 	add.w	r8, r1, #20
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f34:	d32e      	bcc.n	8004f94 <quorem+0x96>
 8004f36:	f04f 0a00 	mov.w	sl, #0
 8004f3a:	46c4      	mov	ip, r8
 8004f3c:	46ae      	mov	lr, r5
 8004f3e:	46d3      	mov	fp, sl
 8004f40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f44:	b298      	uxth	r0, r3
 8004f46:	fb06 a000 	mla	r0, r6, r0, sl
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	0c02      	lsrs	r2, r0, #16
 8004f4e:	fb06 2303 	mla	r3, r6, r3, r2
 8004f52:	f8de 2000 	ldr.w	r2, [lr]
 8004f56:	b280      	uxth	r0, r0
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	1a12      	subs	r2, r2, r0
 8004f5c:	445a      	add	r2, fp
 8004f5e:	f8de 0000 	ldr.w	r0, [lr]
 8004f62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f70:	b292      	uxth	r2, r2
 8004f72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f76:	45e1      	cmp	r9, ip
 8004f78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f7c:	f84e 2b04 	str.w	r2, [lr], #4
 8004f80:	d2de      	bcs.n	8004f40 <quorem+0x42>
 8004f82:	9b00      	ldr	r3, [sp, #0]
 8004f84:	58eb      	ldr	r3, [r5, r3]
 8004f86:	b92b      	cbnz	r3, 8004f94 <quorem+0x96>
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	d32f      	bcc.n	8004ff2 <quorem+0xf4>
 8004f92:	613c      	str	r4, [r7, #16]
 8004f94:	4638      	mov	r0, r7
 8004f96:	f001 f979 	bl	800628c <__mcmp>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	db25      	blt.n	8004fea <quorem+0xec>
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fa6:	f8d1 c000 	ldr.w	ip, [r1]
 8004faa:	fa1f fe82 	uxth.w	lr, r2
 8004fae:	fa1f f38c 	uxth.w	r3, ip
 8004fb2:	eba3 030e 	sub.w	r3, r3, lr
 8004fb6:	4403      	add	r3, r0
 8004fb8:	0c12      	lsrs	r2, r2, #16
 8004fba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004fbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fc8:	45c1      	cmp	r9, r8
 8004fca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fce:	f841 3b04 	str.w	r3, [r1], #4
 8004fd2:	d2e6      	bcs.n	8004fa2 <quorem+0xa4>
 8004fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fdc:	b922      	cbnz	r2, 8004fe8 <quorem+0xea>
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	429d      	cmp	r5, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	d30b      	bcc.n	8004ffe <quorem+0x100>
 8004fe6:	613c      	str	r4, [r7, #16]
 8004fe8:	3601      	adds	r6, #1
 8004fea:	4630      	mov	r0, r6
 8004fec:	b003      	add	sp, #12
 8004fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d1cb      	bne.n	8004f92 <quorem+0x94>
 8004ffa:	3c01      	subs	r4, #1
 8004ffc:	e7c6      	b.n	8004f8c <quorem+0x8e>
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	3b04      	subs	r3, #4
 8005002:	2a00      	cmp	r2, #0
 8005004:	d1ef      	bne.n	8004fe6 <quorem+0xe8>
 8005006:	3c01      	subs	r4, #1
 8005008:	e7ea      	b.n	8004fe0 <quorem+0xe2>
 800500a:	2000      	movs	r0, #0
 800500c:	e7ee      	b.n	8004fec <quorem+0xee>
	...

08005010 <_dtoa_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	69c7      	ldr	r7, [r0, #28]
 800501a:	b097      	sub	sp, #92	@ 0x5c
 800501c:	4683      	mov	fp, r0
 800501e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005022:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005024:	b97f      	cbnz	r7, 8005046 <_dtoa_r+0x36>
 8005026:	2010      	movs	r0, #16
 8005028:	f000 fe02 	bl	8005c30 <malloc>
 800502c:	4602      	mov	r2, r0
 800502e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005032:	b920      	cbnz	r0, 800503e <_dtoa_r+0x2e>
 8005034:	21ef      	movs	r1, #239	@ 0xef
 8005036:	4ba8      	ldr	r3, [pc, #672]	@ (80052d8 <_dtoa_r+0x2c8>)
 8005038:	48a8      	ldr	r0, [pc, #672]	@ (80052dc <_dtoa_r+0x2cc>)
 800503a:	f001 fc67 	bl	800690c <__assert_func>
 800503e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005042:	6007      	str	r7, [r0, #0]
 8005044:	60c7      	str	r7, [r0, #12]
 8005046:	f8db 301c 	ldr.w	r3, [fp, #28]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	b159      	cbz	r1, 8005066 <_dtoa_r+0x56>
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	2301      	movs	r3, #1
 8005052:	4093      	lsls	r3, r2
 8005054:	604a      	str	r2, [r1, #4]
 8005056:	608b      	str	r3, [r1, #8]
 8005058:	4658      	mov	r0, fp
 800505a:	f000 fedf 	bl	8005e1c <_Bfree>
 800505e:	2200      	movs	r2, #0
 8005060:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	1e2b      	subs	r3, r5, #0
 8005068:	bfaf      	iteee	ge
 800506a:	2300      	movge	r3, #0
 800506c:	2201      	movlt	r2, #1
 800506e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005072:	9303      	strlt	r3, [sp, #12]
 8005074:	bfa8      	it	ge
 8005076:	6033      	strge	r3, [r6, #0]
 8005078:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800507c:	4b98      	ldr	r3, [pc, #608]	@ (80052e0 <_dtoa_r+0x2d0>)
 800507e:	bfb8      	it	lt
 8005080:	6032      	strlt	r2, [r6, #0]
 8005082:	ea33 0308 	bics.w	r3, r3, r8
 8005086:	d112      	bne.n	80050ae <_dtoa_r+0x9e>
 8005088:	f242 730f 	movw	r3, #9999	@ 0x270f
 800508c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005094:	4323      	orrs	r3, r4
 8005096:	f000 8550 	beq.w	8005b3a <_dtoa_r+0xb2a>
 800509a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800509c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80052e4 <_dtoa_r+0x2d4>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8552 	beq.w	8005b4a <_dtoa_r+0xb3a>
 80050a6:	f10a 0303 	add.w	r3, sl, #3
 80050aa:	f000 bd4c 	b.w	8005b46 <_dtoa_r+0xb36>
 80050ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80050b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ba:	2200      	movs	r2, #0
 80050bc:	2300      	movs	r3, #0
 80050be:	f7fb fc73 	bl	80009a8 <__aeabi_dcmpeq>
 80050c2:	4607      	mov	r7, r0
 80050c4:	b158      	cbz	r0, 80050de <_dtoa_r+0xce>
 80050c6:	2301      	movs	r3, #1
 80050c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050ce:	b113      	cbz	r3, 80050d6 <_dtoa_r+0xc6>
 80050d0:	4b85      	ldr	r3, [pc, #532]	@ (80052e8 <_dtoa_r+0x2d8>)
 80050d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80052ec <_dtoa_r+0x2dc>
 80050da:	f000 bd36 	b.w	8005b4a <_dtoa_r+0xb3a>
 80050de:	ab14      	add	r3, sp, #80	@ 0x50
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	ab15      	add	r3, sp, #84	@ 0x54
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	4658      	mov	r0, fp
 80050e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050ec:	f001 f97e 	bl	80063ec <__d2b>
 80050f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050f4:	4681      	mov	r9, r0
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	d077      	beq.n	80051ea <_dtoa_r+0x1da>
 80050fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005100:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005108:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800510c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005110:	9712      	str	r7, [sp, #72]	@ 0x48
 8005112:	4619      	mov	r1, r3
 8005114:	2200      	movs	r2, #0
 8005116:	4b76      	ldr	r3, [pc, #472]	@ (80052f0 <_dtoa_r+0x2e0>)
 8005118:	f7fb f826 	bl	8000168 <__aeabi_dsub>
 800511c:	a368      	add	r3, pc, #416	@ (adr r3, 80052c0 <_dtoa_r+0x2b0>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb f9d9 	bl	80004d8 <__aeabi_dmul>
 8005126:	a368      	add	r3, pc, #416	@ (adr r3, 80052c8 <_dtoa_r+0x2b8>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb f81e 	bl	800016c <__adddf3>
 8005130:	4604      	mov	r4, r0
 8005132:	4630      	mov	r0, r6
 8005134:	460d      	mov	r5, r1
 8005136:	f7fb f965 	bl	8000404 <__aeabi_i2d>
 800513a:	a365      	add	r3, pc, #404	@ (adr r3, 80052d0 <_dtoa_r+0x2c0>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	f7fb f80e 	bl	800016c <__adddf3>
 8005150:	4604      	mov	r4, r0
 8005152:	460d      	mov	r5, r1
 8005154:	f7fb fc70 	bl	8000a38 <__aeabi_d2iz>
 8005158:	2200      	movs	r2, #0
 800515a:	4607      	mov	r7, r0
 800515c:	2300      	movs	r3, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fc2b 	bl	80009bc <__aeabi_dcmplt>
 8005166:	b140      	cbz	r0, 800517a <_dtoa_r+0x16a>
 8005168:	4638      	mov	r0, r7
 800516a:	f7fb f94b 	bl	8000404 <__aeabi_i2d>
 800516e:	4622      	mov	r2, r4
 8005170:	462b      	mov	r3, r5
 8005172:	f7fb fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8005176:	b900      	cbnz	r0, 800517a <_dtoa_r+0x16a>
 8005178:	3f01      	subs	r7, #1
 800517a:	2f16      	cmp	r7, #22
 800517c:	d853      	bhi.n	8005226 <_dtoa_r+0x216>
 800517e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005182:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <_dtoa_r+0x2e4>)
 8005184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fb fc16 	bl	80009bc <__aeabi_dcmplt>
 8005190:	2800      	cmp	r0, #0
 8005192:	d04a      	beq.n	800522a <_dtoa_r+0x21a>
 8005194:	2300      	movs	r3, #0
 8005196:	3f01      	subs	r7, #1
 8005198:	930f      	str	r3, [sp, #60]	@ 0x3c
 800519a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	bf46      	itte	mi
 80051a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80051a6:	2300      	movmi	r3, #0
 80051a8:	f04f 0800 	movpl.w	r8, #0
 80051ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80051ae:	bf48      	it	mi
 80051b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80051b2:	2f00      	cmp	r7, #0
 80051b4:	db3b      	blt.n	800522e <_dtoa_r+0x21e>
 80051b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80051ba:	443b      	add	r3, r7
 80051bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80051be:	2300      	movs	r3, #0
 80051c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	d866      	bhi.n	8005296 <_dtoa_r+0x286>
 80051c8:	2b05      	cmp	r3, #5
 80051ca:	bfc4      	itt	gt
 80051cc:	3b04      	subgt	r3, #4
 80051ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80051d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051d2:	bfc8      	it	gt
 80051d4:	2400      	movgt	r4, #0
 80051d6:	f1a3 0302 	sub.w	r3, r3, #2
 80051da:	bfd8      	it	le
 80051dc:	2401      	movle	r4, #1
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d864      	bhi.n	80052ac <_dtoa_r+0x29c>
 80051e2:	e8df f003 	tbb	[pc, r3]
 80051e6:	382b      	.short	0x382b
 80051e8:	5636      	.short	0x5636
 80051ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051ee:	441e      	add	r6, r3
 80051f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	bfc1      	itttt	gt
 80051f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005200:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005204:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005208:	bfd6      	itet	le
 800520a:	f1c3 0320 	rsble	r3, r3, #32
 800520e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005212:	fa04 f003 	lslle.w	r0, r4, r3
 8005216:	f7fb f8e5 	bl	80003e4 <__aeabi_ui2d>
 800521a:	2201      	movs	r2, #1
 800521c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005220:	3e01      	subs	r6, #1
 8005222:	9212      	str	r2, [sp, #72]	@ 0x48
 8005224:	e775      	b.n	8005112 <_dtoa_r+0x102>
 8005226:	2301      	movs	r3, #1
 8005228:	e7b6      	b.n	8005198 <_dtoa_r+0x188>
 800522a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800522c:	e7b5      	b.n	800519a <_dtoa_r+0x18a>
 800522e:	427b      	negs	r3, r7
 8005230:	930a      	str	r3, [sp, #40]	@ 0x28
 8005232:	2300      	movs	r3, #0
 8005234:	eba8 0807 	sub.w	r8, r8, r7
 8005238:	930e      	str	r3, [sp, #56]	@ 0x38
 800523a:	e7c2      	b.n	80051c2 <_dtoa_r+0x1b2>
 800523c:	2300      	movs	r3, #0
 800523e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005240:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005242:	2b00      	cmp	r3, #0
 8005244:	dc35      	bgt.n	80052b2 <_dtoa_r+0x2a2>
 8005246:	2301      	movs	r3, #1
 8005248:	461a      	mov	r2, r3
 800524a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800524e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005250:	e00b      	b.n	800526a <_dtoa_r+0x25a>
 8005252:	2301      	movs	r3, #1
 8005254:	e7f3      	b.n	800523e <_dtoa_r+0x22e>
 8005256:	2300      	movs	r3, #0
 8005258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800525a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	9308      	str	r3, [sp, #32]
 8005260:	3301      	adds	r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	9307      	str	r3, [sp, #28]
 8005266:	bfb8      	it	lt
 8005268:	2301      	movlt	r3, #1
 800526a:	2100      	movs	r1, #0
 800526c:	2204      	movs	r2, #4
 800526e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005272:	f102 0514 	add.w	r5, r2, #20
 8005276:	429d      	cmp	r5, r3
 8005278:	d91f      	bls.n	80052ba <_dtoa_r+0x2aa>
 800527a:	6041      	str	r1, [r0, #4]
 800527c:	4658      	mov	r0, fp
 800527e:	f000 fd8d 	bl	8005d9c <_Balloc>
 8005282:	4682      	mov	sl, r0
 8005284:	2800      	cmp	r0, #0
 8005286:	d139      	bne.n	80052fc <_dtoa_r+0x2ec>
 8005288:	4602      	mov	r2, r0
 800528a:	f240 11af 	movw	r1, #431	@ 0x1af
 800528e:	4b1a      	ldr	r3, [pc, #104]	@ (80052f8 <_dtoa_r+0x2e8>)
 8005290:	e6d2      	b.n	8005038 <_dtoa_r+0x28>
 8005292:	2301      	movs	r3, #1
 8005294:	e7e0      	b.n	8005258 <_dtoa_r+0x248>
 8005296:	2401      	movs	r4, #1
 8005298:	2300      	movs	r3, #0
 800529a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800529c:	9320      	str	r3, [sp, #128]	@ 0x80
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	2200      	movs	r2, #0
 80052a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052a8:	2312      	movs	r3, #18
 80052aa:	e7d0      	b.n	800524e <_dtoa_r+0x23e>
 80052ac:	2301      	movs	r3, #1
 80052ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052b0:	e7f5      	b.n	800529e <_dtoa_r+0x28e>
 80052b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052b8:	e7d7      	b.n	800526a <_dtoa_r+0x25a>
 80052ba:	3101      	adds	r1, #1
 80052bc:	0052      	lsls	r2, r2, #1
 80052be:	e7d8      	b.n	8005272 <_dtoa_r+0x262>
 80052c0:	636f4361 	.word	0x636f4361
 80052c4:	3fd287a7 	.word	0x3fd287a7
 80052c8:	8b60c8b3 	.word	0x8b60c8b3
 80052cc:	3fc68a28 	.word	0x3fc68a28
 80052d0:	509f79fb 	.word	0x509f79fb
 80052d4:	3fd34413 	.word	0x3fd34413
 80052d8:	0800709f 	.word	0x0800709f
 80052dc:	080070b6 	.word	0x080070b6
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	0800709b 	.word	0x0800709b
 80052e8:	0800706f 	.word	0x0800706f
 80052ec:	0800706e 	.word	0x0800706e
 80052f0:	3ff80000 	.word	0x3ff80000
 80052f4:	080071b0 	.word	0x080071b0
 80052f8:	0800710e 	.word	0x0800710e
 80052fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005300:	6018      	str	r0, [r3, #0]
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	2b0e      	cmp	r3, #14
 8005306:	f200 80a4 	bhi.w	8005452 <_dtoa_r+0x442>
 800530a:	2c00      	cmp	r4, #0
 800530c:	f000 80a1 	beq.w	8005452 <_dtoa_r+0x442>
 8005310:	2f00      	cmp	r7, #0
 8005312:	dd33      	ble.n	800537c <_dtoa_r+0x36c>
 8005314:	4b86      	ldr	r3, [pc, #536]	@ (8005530 <_dtoa_r+0x520>)
 8005316:	f007 020f 	and.w	r2, r7, #15
 800531a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800531e:	05f8      	lsls	r0, r7, #23
 8005320:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005324:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800532c:	d516      	bpl.n	800535c <_dtoa_r+0x34c>
 800532e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005332:	4b80      	ldr	r3, [pc, #512]	@ (8005534 <_dtoa_r+0x524>)
 8005334:	2603      	movs	r6, #3
 8005336:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800533a:	f7fb f9f7 	bl	800072c <__aeabi_ddiv>
 800533e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005342:	f004 040f 	and.w	r4, r4, #15
 8005346:	4d7b      	ldr	r5, [pc, #492]	@ (8005534 <_dtoa_r+0x524>)
 8005348:	b954      	cbnz	r4, 8005360 <_dtoa_r+0x350>
 800534a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800534e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005352:	f7fb f9eb 	bl	800072c <__aeabi_ddiv>
 8005356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800535a:	e028      	b.n	80053ae <_dtoa_r+0x39e>
 800535c:	2602      	movs	r6, #2
 800535e:	e7f2      	b.n	8005346 <_dtoa_r+0x336>
 8005360:	07e1      	lsls	r1, r4, #31
 8005362:	d508      	bpl.n	8005376 <_dtoa_r+0x366>
 8005364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800536c:	f7fb f8b4 	bl	80004d8 <__aeabi_dmul>
 8005370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005374:	3601      	adds	r6, #1
 8005376:	1064      	asrs	r4, r4, #1
 8005378:	3508      	adds	r5, #8
 800537a:	e7e5      	b.n	8005348 <_dtoa_r+0x338>
 800537c:	f000 80d2 	beq.w	8005524 <_dtoa_r+0x514>
 8005380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005384:	427c      	negs	r4, r7
 8005386:	4b6a      	ldr	r3, [pc, #424]	@ (8005530 <_dtoa_r+0x520>)
 8005388:	f004 020f 	and.w	r2, r4, #15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f8a0 	bl	80004d8 <__aeabi_dmul>
 8005398:	2602      	movs	r6, #2
 800539a:	2300      	movs	r3, #0
 800539c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a0:	4d64      	ldr	r5, [pc, #400]	@ (8005534 <_dtoa_r+0x524>)
 80053a2:	1124      	asrs	r4, r4, #4
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f040 80b2 	bne.w	800550e <_dtoa_r+0x4fe>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d3      	bne.n	8005356 <_dtoa_r+0x346>
 80053ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80b7 	beq.w	8005528 <_dtoa_r+0x518>
 80053ba:	2200      	movs	r2, #0
 80053bc:	4620      	mov	r0, r4
 80053be:	4629      	mov	r1, r5
 80053c0:	4b5d      	ldr	r3, [pc, #372]	@ (8005538 <_dtoa_r+0x528>)
 80053c2:	f7fb fafb 	bl	80009bc <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f000 80ae 	beq.w	8005528 <_dtoa_r+0x518>
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80aa 	beq.w	8005528 <_dtoa_r+0x518>
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dd37      	ble.n	800544a <_dtoa_r+0x43a>
 80053da:	1e7b      	subs	r3, r7, #1
 80053dc:	4620      	mov	r0, r4
 80053de:	9304      	str	r3, [sp, #16]
 80053e0:	2200      	movs	r2, #0
 80053e2:	4629      	mov	r1, r5
 80053e4:	4b55      	ldr	r3, [pc, #340]	@ (800553c <_dtoa_r+0x52c>)
 80053e6:	f7fb f877 	bl	80004d8 <__aeabi_dmul>
 80053ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ee:	9c08      	ldr	r4, [sp, #32]
 80053f0:	3601      	adds	r6, #1
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7fb f806 	bl	8000404 <__aeabi_i2d>
 80053f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	2200      	movs	r2, #0
 8005402:	4b4f      	ldr	r3, [pc, #316]	@ (8005540 <_dtoa_r+0x530>)
 8005404:	f7fa feb2 	bl	800016c <__adddf3>
 8005408:	4605      	mov	r5, r0
 800540a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800540e:	2c00      	cmp	r4, #0
 8005410:	f040 809a 	bne.w	8005548 <_dtoa_r+0x538>
 8005414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	4b4a      	ldr	r3, [pc, #296]	@ (8005544 <_dtoa_r+0x534>)
 800541c:	f7fa fea4 	bl	8000168 <__aeabi_dsub>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005428:	462a      	mov	r2, r5
 800542a:	4633      	mov	r3, r6
 800542c:	f7fb fae4 	bl	80009f8 <__aeabi_dcmpgt>
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 828e 	bne.w	8005952 <_dtoa_r+0x942>
 8005436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800543a:	462a      	mov	r2, r5
 800543c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005440:	f7fb fabc 	bl	80009bc <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	f040 8127 	bne.w	8005698 <_dtoa_r+0x688>
 800544a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800544e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005452:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005454:	2b00      	cmp	r3, #0
 8005456:	f2c0 8163 	blt.w	8005720 <_dtoa_r+0x710>
 800545a:	2f0e      	cmp	r7, #14
 800545c:	f300 8160 	bgt.w	8005720 <_dtoa_r+0x710>
 8005460:	4b33      	ldr	r3, [pc, #204]	@ (8005530 <_dtoa_r+0x520>)
 8005462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005466:	e9d3 3400 	ldrd	r3, r4, [r3]
 800546a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800546e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005470:	2b00      	cmp	r3, #0
 8005472:	da03      	bge.n	800547c <_dtoa_r+0x46c>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f340 8100 	ble.w	800567c <_dtoa_r+0x66c>
 800547c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005480:	4656      	mov	r6, sl
 8005482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fb f94f 	bl	800072c <__aeabi_ddiv>
 800548e:	f7fb fad3 	bl	8000a38 <__aeabi_d2iz>
 8005492:	4680      	mov	r8, r0
 8005494:	f7fa ffb6 	bl	8000404 <__aeabi_i2d>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fb f81c 	bl	80004d8 <__aeabi_dmul>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fa fe5e 	bl	8000168 <__aeabi_dsub>
 80054ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054b0:	9d07      	ldr	r5, [sp, #28]
 80054b2:	f806 4b01 	strb.w	r4, [r6], #1
 80054b6:	eba6 040a 	sub.w	r4, r6, sl
 80054ba:	42a5      	cmp	r5, r4
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	f040 8116 	bne.w	80056f0 <_dtoa_r+0x6e0>
 80054c4:	f7fa fe52 	bl	800016c <__adddf3>
 80054c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	f7fb fa92 	bl	80009f8 <__aeabi_dcmpgt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f040 80f8 	bne.w	80056ca <_dtoa_r+0x6ba>
 80054da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb fa61 	bl	80009a8 <__aeabi_dcmpeq>
 80054e6:	b118      	cbz	r0, 80054f0 <_dtoa_r+0x4e0>
 80054e8:	f018 0f01 	tst.w	r8, #1
 80054ec:	f040 80ed 	bne.w	80056ca <_dtoa_r+0x6ba>
 80054f0:	4649      	mov	r1, r9
 80054f2:	4658      	mov	r0, fp
 80054f4:	f000 fc92 	bl	8005e1c <_Bfree>
 80054f8:	2300      	movs	r3, #0
 80054fa:	7033      	strb	r3, [r6, #0]
 80054fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80054fe:	3701      	adds	r7, #1
 8005500:	601f      	str	r7, [r3, #0]
 8005502:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8320 	beq.w	8005b4a <_dtoa_r+0xb3a>
 800550a:	601e      	str	r6, [r3, #0]
 800550c:	e31d      	b.n	8005b4a <_dtoa_r+0xb3a>
 800550e:	07e2      	lsls	r2, r4, #31
 8005510:	d505      	bpl.n	800551e <_dtoa_r+0x50e>
 8005512:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005516:	f7fa ffdf 	bl	80004d8 <__aeabi_dmul>
 800551a:	2301      	movs	r3, #1
 800551c:	3601      	adds	r6, #1
 800551e:	1064      	asrs	r4, r4, #1
 8005520:	3508      	adds	r5, #8
 8005522:	e73f      	b.n	80053a4 <_dtoa_r+0x394>
 8005524:	2602      	movs	r6, #2
 8005526:	e742      	b.n	80053ae <_dtoa_r+0x39e>
 8005528:	9c07      	ldr	r4, [sp, #28]
 800552a:	9704      	str	r7, [sp, #16]
 800552c:	e761      	b.n	80053f2 <_dtoa_r+0x3e2>
 800552e:	bf00      	nop
 8005530:	080071b0 	.word	0x080071b0
 8005534:	08007188 	.word	0x08007188
 8005538:	3ff00000 	.word	0x3ff00000
 800553c:	40240000 	.word	0x40240000
 8005540:	401c0000 	.word	0x401c0000
 8005544:	40140000 	.word	0x40140000
 8005548:	4b70      	ldr	r3, [pc, #448]	@ (800570c <_dtoa_r+0x6fc>)
 800554a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800554c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005554:	4454      	add	r4, sl
 8005556:	2900      	cmp	r1, #0
 8005558:	d045      	beq.n	80055e6 <_dtoa_r+0x5d6>
 800555a:	2000      	movs	r0, #0
 800555c:	496c      	ldr	r1, [pc, #432]	@ (8005710 <_dtoa_r+0x700>)
 800555e:	f7fb f8e5 	bl	800072c <__aeabi_ddiv>
 8005562:	4633      	mov	r3, r6
 8005564:	462a      	mov	r2, r5
 8005566:	f7fa fdff 	bl	8000168 <__aeabi_dsub>
 800556a:	4656      	mov	r6, sl
 800556c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005574:	f7fb fa60 	bl	8000a38 <__aeabi_d2iz>
 8005578:	4605      	mov	r5, r0
 800557a:	f7fa ff43 	bl	8000404 <__aeabi_i2d>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005586:	f7fa fdef 	bl	8000168 <__aeabi_dsub>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	3530      	adds	r5, #48	@ 0x30
 8005590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005594:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005598:	f806 5b01 	strb.w	r5, [r6], #1
 800559c:	f7fb fa0e 	bl	80009bc <__aeabi_dcmplt>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d163      	bne.n	800566c <_dtoa_r+0x65c>
 80055a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055a8:	2000      	movs	r0, #0
 80055aa:	495a      	ldr	r1, [pc, #360]	@ (8005714 <_dtoa_r+0x704>)
 80055ac:	f7fa fddc 	bl	8000168 <__aeabi_dsub>
 80055b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055b4:	f7fb fa02 	bl	80009bc <__aeabi_dcmplt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f040 8087 	bne.w	80056cc <_dtoa_r+0x6bc>
 80055be:	42a6      	cmp	r6, r4
 80055c0:	f43f af43 	beq.w	800544a <_dtoa_r+0x43a>
 80055c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055c8:	2200      	movs	r2, #0
 80055ca:	4b53      	ldr	r3, [pc, #332]	@ (8005718 <_dtoa_r+0x708>)
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	2200      	movs	r2, #0
 80055d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	4b4f      	ldr	r3, [pc, #316]	@ (8005718 <_dtoa_r+0x708>)
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e4:	e7c4      	b.n	8005570 <_dtoa_r+0x560>
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	4656      	mov	r6, sl
 80055f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fa:	f7fb fa1d 	bl	8000a38 <__aeabi_d2iz>
 80055fe:	4605      	mov	r5, r0
 8005600:	f7fa ff00 	bl	8000404 <__aeabi_i2d>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	3530      	adds	r5, #48	@ 0x30
 8005616:	f806 5b01 	strb.w	r5, [r6], #1
 800561a:	42a6      	cmp	r6, r4
 800561c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	d124      	bne.n	8005670 <_dtoa_r+0x660>
 8005626:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800562a:	4b39      	ldr	r3, [pc, #228]	@ (8005710 <_dtoa_r+0x700>)
 800562c:	f7fa fd9e 	bl	800016c <__adddf3>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005638:	f7fb f9de 	bl	80009f8 <__aeabi_dcmpgt>
 800563c:	2800      	cmp	r0, #0
 800563e:	d145      	bne.n	80056cc <_dtoa_r+0x6bc>
 8005640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005644:	2000      	movs	r0, #0
 8005646:	4932      	ldr	r1, [pc, #200]	@ (8005710 <_dtoa_r+0x700>)
 8005648:	f7fa fd8e 	bl	8000168 <__aeabi_dsub>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005654:	f7fb f9b2 	bl	80009bc <__aeabi_dcmplt>
 8005658:	2800      	cmp	r0, #0
 800565a:	f43f aef6 	beq.w	800544a <_dtoa_r+0x43a>
 800565e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005660:	1e73      	subs	r3, r6, #1
 8005662:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005664:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005668:	2b30      	cmp	r3, #48	@ 0x30
 800566a:	d0f8      	beq.n	800565e <_dtoa_r+0x64e>
 800566c:	9f04      	ldr	r7, [sp, #16]
 800566e:	e73f      	b.n	80054f0 <_dtoa_r+0x4e0>
 8005670:	4b29      	ldr	r3, [pc, #164]	@ (8005718 <_dtoa_r+0x708>)
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800567a:	e7bc      	b.n	80055f6 <_dtoa_r+0x5e6>
 800567c:	d10c      	bne.n	8005698 <_dtoa_r+0x688>
 800567e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005682:	2200      	movs	r2, #0
 8005684:	4b25      	ldr	r3, [pc, #148]	@ (800571c <_dtoa_r+0x70c>)
 8005686:	f7fa ff27 	bl	80004d8 <__aeabi_dmul>
 800568a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800568e:	f7fb f9a9 	bl	80009e4 <__aeabi_dcmpge>
 8005692:	2800      	cmp	r0, #0
 8005694:	f000 815b 	beq.w	800594e <_dtoa_r+0x93e>
 8005698:	2400      	movs	r4, #0
 800569a:	4625      	mov	r5, r4
 800569c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800569e:	4656      	mov	r6, sl
 80056a0:	43db      	mvns	r3, r3
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	2700      	movs	r7, #0
 80056a6:	4621      	mov	r1, r4
 80056a8:	4658      	mov	r0, fp
 80056aa:	f000 fbb7 	bl	8005e1c <_Bfree>
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	d0dc      	beq.n	800566c <_dtoa_r+0x65c>
 80056b2:	b12f      	cbz	r7, 80056c0 <_dtoa_r+0x6b0>
 80056b4:	42af      	cmp	r7, r5
 80056b6:	d003      	beq.n	80056c0 <_dtoa_r+0x6b0>
 80056b8:	4639      	mov	r1, r7
 80056ba:	4658      	mov	r0, fp
 80056bc:	f000 fbae 	bl	8005e1c <_Bfree>
 80056c0:	4629      	mov	r1, r5
 80056c2:	4658      	mov	r0, fp
 80056c4:	f000 fbaa 	bl	8005e1c <_Bfree>
 80056c8:	e7d0      	b.n	800566c <_dtoa_r+0x65c>
 80056ca:	9704      	str	r7, [sp, #16]
 80056cc:	4633      	mov	r3, r6
 80056ce:	461e      	mov	r6, r3
 80056d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056d4:	2a39      	cmp	r2, #57	@ 0x39
 80056d6:	d107      	bne.n	80056e8 <_dtoa_r+0x6d8>
 80056d8:	459a      	cmp	sl, r3
 80056da:	d1f8      	bne.n	80056ce <_dtoa_r+0x6be>
 80056dc:	9a04      	ldr	r2, [sp, #16]
 80056de:	3201      	adds	r2, #1
 80056e0:	9204      	str	r2, [sp, #16]
 80056e2:	2230      	movs	r2, #48	@ 0x30
 80056e4:	f88a 2000 	strb.w	r2, [sl]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	3201      	adds	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e7bd      	b.n	800566c <_dtoa_r+0x65c>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <_dtoa_r+0x708>)
 80056f4:	f7fa fef0 	bl	80004d8 <__aeabi_dmul>
 80056f8:	2200      	movs	r2, #0
 80056fa:	2300      	movs	r3, #0
 80056fc:	4604      	mov	r4, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	f7fb f952 	bl	80009a8 <__aeabi_dcmpeq>
 8005704:	2800      	cmp	r0, #0
 8005706:	f43f aebc 	beq.w	8005482 <_dtoa_r+0x472>
 800570a:	e6f1      	b.n	80054f0 <_dtoa_r+0x4e0>
 800570c:	080071b0 	.word	0x080071b0
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	3ff00000 	.word	0x3ff00000
 8005718:	40240000 	.word	0x40240000
 800571c:	40140000 	.word	0x40140000
 8005720:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005722:	2a00      	cmp	r2, #0
 8005724:	f000 80db 	beq.w	80058de <_dtoa_r+0x8ce>
 8005728:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800572a:	2a01      	cmp	r2, #1
 800572c:	f300 80bf 	bgt.w	80058ae <_dtoa_r+0x89e>
 8005730:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005732:	2a00      	cmp	r2, #0
 8005734:	f000 80b7 	beq.w	80058a6 <_dtoa_r+0x896>
 8005738:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800573c:	4646      	mov	r6, r8
 800573e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005742:	2101      	movs	r1, #1
 8005744:	441a      	add	r2, r3
 8005746:	4658      	mov	r0, fp
 8005748:	4498      	add	r8, r3
 800574a:	9209      	str	r2, [sp, #36]	@ 0x24
 800574c:	f000 fc1a 	bl	8005f84 <__i2b>
 8005750:	4605      	mov	r5, r0
 8005752:	b15e      	cbz	r6, 800576c <_dtoa_r+0x75c>
 8005754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	dd08      	ble.n	800576c <_dtoa_r+0x75c>
 800575a:	42b3      	cmp	r3, r6
 800575c:	bfa8      	it	ge
 800575e:	4633      	movge	r3, r6
 8005760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005762:	eba8 0803 	sub.w	r8, r8, r3
 8005766:	1af6      	subs	r6, r6, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	9309      	str	r3, [sp, #36]	@ 0x24
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	b1f3      	cbz	r3, 80057ae <_dtoa_r+0x79e>
 8005770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80b7 	beq.w	80058e6 <_dtoa_r+0x8d6>
 8005778:	b18c      	cbz	r4, 800579e <_dtoa_r+0x78e>
 800577a:	4629      	mov	r1, r5
 800577c:	4622      	mov	r2, r4
 800577e:	4658      	mov	r0, fp
 8005780:	f000 fcbe 	bl	8006100 <__pow5mult>
 8005784:	464a      	mov	r2, r9
 8005786:	4601      	mov	r1, r0
 8005788:	4605      	mov	r5, r0
 800578a:	4658      	mov	r0, fp
 800578c:	f000 fc10 	bl	8005fb0 <__multiply>
 8005790:	4649      	mov	r1, r9
 8005792:	9004      	str	r0, [sp, #16]
 8005794:	4658      	mov	r0, fp
 8005796:	f000 fb41 	bl	8005e1c <_Bfree>
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	4699      	mov	r9, r3
 800579e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a0:	1b1a      	subs	r2, r3, r4
 80057a2:	d004      	beq.n	80057ae <_dtoa_r+0x79e>
 80057a4:	4649      	mov	r1, r9
 80057a6:	4658      	mov	r0, fp
 80057a8:	f000 fcaa 	bl	8006100 <__pow5mult>
 80057ac:	4681      	mov	r9, r0
 80057ae:	2101      	movs	r1, #1
 80057b0:	4658      	mov	r0, fp
 80057b2:	f000 fbe7 	bl	8005f84 <__i2b>
 80057b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057b8:	4604      	mov	r4, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 81c9 	beq.w	8005b52 <_dtoa_r+0xb42>
 80057c0:	461a      	mov	r2, r3
 80057c2:	4601      	mov	r1, r0
 80057c4:	4658      	mov	r0, fp
 80057c6:	f000 fc9b 	bl	8006100 <__pow5mult>
 80057ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057cc:	4604      	mov	r4, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	f300 808f 	bgt.w	80058f2 <_dtoa_r+0x8e2>
 80057d4:	9b02      	ldr	r3, [sp, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 8087 	bne.w	80058ea <_dtoa_r+0x8da>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 8083 	bne.w	80058ee <_dtoa_r+0x8de>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ee:	0d1b      	lsrs	r3, r3, #20
 80057f0:	051b      	lsls	r3, r3, #20
 80057f2:	b12b      	cbz	r3, 8005800 <_dtoa_r+0x7f0>
 80057f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f6:	f108 0801 	add.w	r8, r8, #1
 80057fa:	3301      	adds	r3, #1
 80057fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057fe:	2301      	movs	r3, #1
 8005800:	930a      	str	r3, [sp, #40]	@ 0x28
 8005802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 81aa 	beq.w	8005b5e <_dtoa_r+0xb4e>
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005810:	6918      	ldr	r0, [r3, #16]
 8005812:	f000 fb6b 	bl	8005eec <__hi0bits>
 8005816:	f1c0 0020 	rsb	r0, r0, #32
 800581a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581c:	4418      	add	r0, r3
 800581e:	f010 001f 	ands.w	r0, r0, #31
 8005822:	d071      	beq.n	8005908 <_dtoa_r+0x8f8>
 8005824:	f1c0 0320 	rsb	r3, r0, #32
 8005828:	2b04      	cmp	r3, #4
 800582a:	dd65      	ble.n	80058f8 <_dtoa_r+0x8e8>
 800582c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800582e:	f1c0 001c 	rsb	r0, r0, #28
 8005832:	4403      	add	r3, r0
 8005834:	4480      	add	r8, r0
 8005836:	4406      	add	r6, r0
 8005838:	9309      	str	r3, [sp, #36]	@ 0x24
 800583a:	f1b8 0f00 	cmp.w	r8, #0
 800583e:	dd05      	ble.n	800584c <_dtoa_r+0x83c>
 8005840:	4649      	mov	r1, r9
 8005842:	4642      	mov	r2, r8
 8005844:	4658      	mov	r0, fp
 8005846:	f000 fcb5 	bl	80061b4 <__lshift>
 800584a:	4681      	mov	r9, r0
 800584c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd05      	ble.n	800585e <_dtoa_r+0x84e>
 8005852:	4621      	mov	r1, r4
 8005854:	461a      	mov	r2, r3
 8005856:	4658      	mov	r0, fp
 8005858:	f000 fcac 	bl	80061b4 <__lshift>
 800585c:	4604      	mov	r4, r0
 800585e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d053      	beq.n	800590c <_dtoa_r+0x8fc>
 8005864:	4621      	mov	r1, r4
 8005866:	4648      	mov	r0, r9
 8005868:	f000 fd10 	bl	800628c <__mcmp>
 800586c:	2800      	cmp	r0, #0
 800586e:	da4d      	bge.n	800590c <_dtoa_r+0x8fc>
 8005870:	1e7b      	subs	r3, r7, #1
 8005872:	4649      	mov	r1, r9
 8005874:	9304      	str	r3, [sp, #16]
 8005876:	220a      	movs	r2, #10
 8005878:	2300      	movs	r3, #0
 800587a:	4658      	mov	r0, fp
 800587c:	f000 faf0 	bl	8005e60 <__multadd>
 8005880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005882:	4681      	mov	r9, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 816c 	beq.w	8005b62 <_dtoa_r+0xb52>
 800588a:	2300      	movs	r3, #0
 800588c:	4629      	mov	r1, r5
 800588e:	220a      	movs	r2, #10
 8005890:	4658      	mov	r0, fp
 8005892:	f000 fae5 	bl	8005e60 <__multadd>
 8005896:	9b08      	ldr	r3, [sp, #32]
 8005898:	4605      	mov	r5, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	dc61      	bgt.n	8005962 <_dtoa_r+0x952>
 800589e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	dc3b      	bgt.n	800591c <_dtoa_r+0x90c>
 80058a4:	e05d      	b.n	8005962 <_dtoa_r+0x952>
 80058a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058ac:	e746      	b.n	800573c <_dtoa_r+0x72c>
 80058ae:	9b07      	ldr	r3, [sp, #28]
 80058b0:	1e5c      	subs	r4, r3, #1
 80058b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	bfbf      	itttt	lt
 80058b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80058ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80058bc:	1ae3      	sublt	r3, r4, r3
 80058be:	18d2      	addlt	r2, r2, r3
 80058c0:	bfa8      	it	ge
 80058c2:	1b1c      	subge	r4, r3, r4
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	bfbe      	ittt	lt
 80058c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80058ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80058cc:	2400      	movlt	r4, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb5      	itete	lt
 80058d2:	eba8 0603 	sublt.w	r6, r8, r3
 80058d6:	4646      	movge	r6, r8
 80058d8:	2300      	movlt	r3, #0
 80058da:	9b07      	ldrge	r3, [sp, #28]
 80058dc:	e730      	b.n	8005740 <_dtoa_r+0x730>
 80058de:	4646      	mov	r6, r8
 80058e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058e4:	e735      	b.n	8005752 <_dtoa_r+0x742>
 80058e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058e8:	e75c      	b.n	80057a4 <_dtoa_r+0x794>
 80058ea:	2300      	movs	r3, #0
 80058ec:	e788      	b.n	8005800 <_dtoa_r+0x7f0>
 80058ee:	9b02      	ldr	r3, [sp, #8]
 80058f0:	e786      	b.n	8005800 <_dtoa_r+0x7f0>
 80058f2:	2300      	movs	r3, #0
 80058f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f6:	e788      	b.n	800580a <_dtoa_r+0x7fa>
 80058f8:	d09f      	beq.n	800583a <_dtoa_r+0x82a>
 80058fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058fc:	331c      	adds	r3, #28
 80058fe:	441a      	add	r2, r3
 8005900:	4498      	add	r8, r3
 8005902:	441e      	add	r6, r3
 8005904:	9209      	str	r2, [sp, #36]	@ 0x24
 8005906:	e798      	b.n	800583a <_dtoa_r+0x82a>
 8005908:	4603      	mov	r3, r0
 800590a:	e7f6      	b.n	80058fa <_dtoa_r+0x8ea>
 800590c:	9b07      	ldr	r3, [sp, #28]
 800590e:	9704      	str	r7, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	dc20      	bgt.n	8005956 <_dtoa_r+0x946>
 8005914:	9308      	str	r3, [sp, #32]
 8005916:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005918:	2b02      	cmp	r3, #2
 800591a:	dd1e      	ble.n	800595a <_dtoa_r+0x94a>
 800591c:	9b08      	ldr	r3, [sp, #32]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f47f aebc 	bne.w	800569c <_dtoa_r+0x68c>
 8005924:	4621      	mov	r1, r4
 8005926:	2205      	movs	r2, #5
 8005928:	4658      	mov	r0, fp
 800592a:	f000 fa99 	bl	8005e60 <__multadd>
 800592e:	4601      	mov	r1, r0
 8005930:	4604      	mov	r4, r0
 8005932:	4648      	mov	r0, r9
 8005934:	f000 fcaa 	bl	800628c <__mcmp>
 8005938:	2800      	cmp	r0, #0
 800593a:	f77f aeaf 	ble.w	800569c <_dtoa_r+0x68c>
 800593e:	2331      	movs	r3, #49	@ 0x31
 8005940:	4656      	mov	r6, sl
 8005942:	f806 3b01 	strb.w	r3, [r6], #1
 8005946:	9b04      	ldr	r3, [sp, #16]
 8005948:	3301      	adds	r3, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	e6aa      	b.n	80056a4 <_dtoa_r+0x694>
 800594e:	9c07      	ldr	r4, [sp, #28]
 8005950:	9704      	str	r7, [sp, #16]
 8005952:	4625      	mov	r5, r4
 8005954:	e7f3      	b.n	800593e <_dtoa_r+0x92e>
 8005956:	9b07      	ldr	r3, [sp, #28]
 8005958:	9308      	str	r3, [sp, #32]
 800595a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8104 	beq.w	8005b6a <_dtoa_r+0xb5a>
 8005962:	2e00      	cmp	r6, #0
 8005964:	dd05      	ble.n	8005972 <_dtoa_r+0x962>
 8005966:	4629      	mov	r1, r5
 8005968:	4632      	mov	r2, r6
 800596a:	4658      	mov	r0, fp
 800596c:	f000 fc22 	bl	80061b4 <__lshift>
 8005970:	4605      	mov	r5, r0
 8005972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d05a      	beq.n	8005a2e <_dtoa_r+0xa1e>
 8005978:	4658      	mov	r0, fp
 800597a:	6869      	ldr	r1, [r5, #4]
 800597c:	f000 fa0e 	bl	8005d9c <_Balloc>
 8005980:	4606      	mov	r6, r0
 8005982:	b928      	cbnz	r0, 8005990 <_dtoa_r+0x980>
 8005984:	4602      	mov	r2, r0
 8005986:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800598a:	4b83      	ldr	r3, [pc, #524]	@ (8005b98 <_dtoa_r+0xb88>)
 800598c:	f7ff bb54 	b.w	8005038 <_dtoa_r+0x28>
 8005990:	692a      	ldr	r2, [r5, #16]
 8005992:	f105 010c 	add.w	r1, r5, #12
 8005996:	3202      	adds	r2, #2
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	300c      	adds	r0, #12
 800599c:	f000 ffa8 	bl	80068f0 <memcpy>
 80059a0:	2201      	movs	r2, #1
 80059a2:	4631      	mov	r1, r6
 80059a4:	4658      	mov	r0, fp
 80059a6:	f000 fc05 	bl	80061b4 <__lshift>
 80059aa:	462f      	mov	r7, r5
 80059ac:	4605      	mov	r5, r0
 80059ae:	f10a 0301 	add.w	r3, sl, #1
 80059b2:	9307      	str	r3, [sp, #28]
 80059b4:	9b08      	ldr	r3, [sp, #32]
 80059b6:	4453      	add	r3, sl
 80059b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	4621      	mov	r1, r4
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4648      	mov	r0, r9
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	f7ff fa97 	bl	8004efe <quorem>
 80059d0:	4639      	mov	r1, r7
 80059d2:	9008      	str	r0, [sp, #32]
 80059d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059d8:	4648      	mov	r0, r9
 80059da:	f000 fc57 	bl	800628c <__mcmp>
 80059de:	462a      	mov	r2, r5
 80059e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80059e2:	4621      	mov	r1, r4
 80059e4:	4658      	mov	r0, fp
 80059e6:	f000 fc6d 	bl	80062c4 <__mdiff>
 80059ea:	68c2      	ldr	r2, [r0, #12]
 80059ec:	4606      	mov	r6, r0
 80059ee:	bb02      	cbnz	r2, 8005a32 <_dtoa_r+0xa22>
 80059f0:	4601      	mov	r1, r0
 80059f2:	4648      	mov	r0, r9
 80059f4:	f000 fc4a 	bl	800628c <__mcmp>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4631      	mov	r1, r6
 80059fc:	4658      	mov	r0, fp
 80059fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a00:	f000 fa0c 	bl	8005e1c <_Bfree>
 8005a04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a08:	9e07      	ldr	r6, [sp, #28]
 8005a0a:	ea43 0102 	orr.w	r1, r3, r2
 8005a0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a10:	4319      	orrs	r1, r3
 8005a12:	d110      	bne.n	8005a36 <_dtoa_r+0xa26>
 8005a14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a18:	d029      	beq.n	8005a6e <_dtoa_r+0xa5e>
 8005a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dd02      	ble.n	8005a26 <_dtoa_r+0xa16>
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005a26:	9b02      	ldr	r3, [sp, #8]
 8005a28:	f883 8000 	strb.w	r8, [r3]
 8005a2c:	e63b      	b.n	80056a6 <_dtoa_r+0x696>
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e7bb      	b.n	80059aa <_dtoa_r+0x99a>
 8005a32:	2201      	movs	r2, #1
 8005a34:	e7e1      	b.n	80059fa <_dtoa_r+0x9ea>
 8005a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db04      	blt.n	8005a46 <_dtoa_r+0xa36>
 8005a3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a42:	430b      	orrs	r3, r1
 8005a44:	d120      	bne.n	8005a88 <_dtoa_r+0xa78>
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	dded      	ble.n	8005a26 <_dtoa_r+0xa16>
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4658      	mov	r0, fp
 8005a50:	f000 fbb0 	bl	80061b4 <__lshift>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4681      	mov	r9, r0
 8005a58:	f000 fc18 	bl	800628c <__mcmp>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	dc03      	bgt.n	8005a68 <_dtoa_r+0xa58>
 8005a60:	d1e1      	bne.n	8005a26 <_dtoa_r+0xa16>
 8005a62:	f018 0f01 	tst.w	r8, #1
 8005a66:	d0de      	beq.n	8005a26 <_dtoa_r+0xa16>
 8005a68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a6c:	d1d8      	bne.n	8005a20 <_dtoa_r+0xa10>
 8005a6e:	2339      	movs	r3, #57	@ 0x39
 8005a70:	9a02      	ldr	r2, [sp, #8]
 8005a72:	7013      	strb	r3, [r2, #0]
 8005a74:	4633      	mov	r3, r6
 8005a76:	461e      	mov	r6, r3
 8005a78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	2a39      	cmp	r2, #57	@ 0x39
 8005a80:	d052      	beq.n	8005b28 <_dtoa_r+0xb18>
 8005a82:	3201      	adds	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e60e      	b.n	80056a6 <_dtoa_r+0x696>
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	dd07      	ble.n	8005a9c <_dtoa_r+0xa8c>
 8005a8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a90:	d0ed      	beq.n	8005a6e <_dtoa_r+0xa5e>
 8005a92:	9a02      	ldr	r2, [sp, #8]
 8005a94:	f108 0301 	add.w	r3, r8, #1
 8005a98:	7013      	strb	r3, [r2, #0]
 8005a9a:	e604      	b.n	80056a6 <_dtoa_r+0x696>
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	9a07      	ldr	r2, [sp, #28]
 8005aa0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d028      	beq.n	8005afc <_dtoa_r+0xaec>
 8005aaa:	4649      	mov	r1, r9
 8005aac:	2300      	movs	r3, #0
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4658      	mov	r0, fp
 8005ab2:	f000 f9d5 	bl	8005e60 <__multadd>
 8005ab6:	42af      	cmp	r7, r5
 8005ab8:	4681      	mov	r9, r0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	f04f 020a 	mov.w	r2, #10
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	d107      	bne.n	8005ad8 <_dtoa_r+0xac8>
 8005ac8:	f000 f9ca 	bl	8005e60 <__multadd>
 8005acc:	4607      	mov	r7, r0
 8005ace:	4605      	mov	r5, r0
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	e774      	b.n	80059c2 <_dtoa_r+0x9b2>
 8005ad8:	f000 f9c2 	bl	8005e60 <__multadd>
 8005adc:	4629      	mov	r1, r5
 8005ade:	4607      	mov	r7, r0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	f000 f9bb 	bl	8005e60 <__multadd>
 8005aea:	4605      	mov	r5, r0
 8005aec:	e7f0      	b.n	8005ad0 <_dtoa_r+0xac0>
 8005aee:	9b08      	ldr	r3, [sp, #32]
 8005af0:	2700      	movs	r7, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bfcc      	ite	gt
 8005af6:	461e      	movgt	r6, r3
 8005af8:	2601      	movle	r6, #1
 8005afa:	4456      	add	r6, sl
 8005afc:	4649      	mov	r1, r9
 8005afe:	2201      	movs	r2, #1
 8005b00:	4658      	mov	r0, fp
 8005b02:	f000 fb57 	bl	80061b4 <__lshift>
 8005b06:	4621      	mov	r1, r4
 8005b08:	4681      	mov	r9, r0
 8005b0a:	f000 fbbf 	bl	800628c <__mcmp>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	dcb0      	bgt.n	8005a74 <_dtoa_r+0xa64>
 8005b12:	d102      	bne.n	8005b1a <_dtoa_r+0xb0a>
 8005b14:	f018 0f01 	tst.w	r8, #1
 8005b18:	d1ac      	bne.n	8005a74 <_dtoa_r+0xa64>
 8005b1a:	4633      	mov	r3, r6
 8005b1c:	461e      	mov	r6, r3
 8005b1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b22:	2a30      	cmp	r2, #48	@ 0x30
 8005b24:	d0fa      	beq.n	8005b1c <_dtoa_r+0xb0c>
 8005b26:	e5be      	b.n	80056a6 <_dtoa_r+0x696>
 8005b28:	459a      	cmp	sl, r3
 8005b2a:	d1a4      	bne.n	8005a76 <_dtoa_r+0xa66>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	2331      	movs	r3, #49	@ 0x31
 8005b34:	f88a 3000 	strb.w	r3, [sl]
 8005b38:	e5b5      	b.n	80056a6 <_dtoa_r+0x696>
 8005b3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b9c <_dtoa_r+0xb8c>
 8005b40:	b11b      	cbz	r3, 8005b4a <_dtoa_r+0xb3a>
 8005b42:	f10a 0308 	add.w	r3, sl, #8
 8005b46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	4650      	mov	r0, sl
 8005b4c:	b017      	add	sp, #92	@ 0x5c
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f77f ae3d 	ble.w	80057d4 <_dtoa_r+0x7c4>
 8005b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b5e:	2001      	movs	r0, #1
 8005b60:	e65b      	b.n	800581a <_dtoa_r+0x80a>
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f77f aed6 	ble.w	8005916 <_dtoa_r+0x906>
 8005b6a:	4656      	mov	r6, sl
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f7ff f9c5 	bl	8004efe <quorem>
 8005b74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b78:	9b08      	ldr	r3, [sp, #32]
 8005b7a:	f806 8b01 	strb.w	r8, [r6], #1
 8005b7e:	eba6 020a 	sub.w	r2, r6, sl
 8005b82:	4293      	cmp	r3, r2
 8005b84:	ddb3      	ble.n	8005aee <_dtoa_r+0xade>
 8005b86:	4649      	mov	r1, r9
 8005b88:	2300      	movs	r3, #0
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f000 f967 	bl	8005e60 <__multadd>
 8005b92:	4681      	mov	r9, r0
 8005b94:	e7ea      	b.n	8005b6c <_dtoa_r+0xb5c>
 8005b96:	bf00      	nop
 8005b98:	0800710e 	.word	0x0800710e
 8005b9c:	08007092 	.word	0x08007092

08005ba0 <_free_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d040      	beq.n	8005c2a <_free_r+0x8a>
 8005ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bac:	1f0c      	subs	r4, r1, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bfb8      	it	lt
 8005bb2:	18e4      	addlt	r4, r4, r3
 8005bb4:	f000 f8e6 	bl	8005d84 <__malloc_lock>
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <_free_r+0x8c>)
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	b933      	cbnz	r3, 8005bcc <_free_r+0x2c>
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	6014      	str	r4, [r2, #0]
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc8:	f000 b8e2 	b.w	8005d90 <__malloc_unlock>
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d908      	bls.n	8005be2 <_free_r+0x42>
 8005bd0:	6820      	ldr	r0, [r4, #0]
 8005bd2:	1821      	adds	r1, r4, r0
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	bf01      	itttt	eq
 8005bd8:	6819      	ldreq	r1, [r3, #0]
 8005bda:	685b      	ldreq	r3, [r3, #4]
 8005bdc:	1809      	addeq	r1, r1, r0
 8005bde:	6021      	streq	r1, [r4, #0]
 8005be0:	e7ed      	b.n	8005bbe <_free_r+0x1e>
 8005be2:	461a      	mov	r2, r3
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b10b      	cbz	r3, 8005bec <_free_r+0x4c>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d9fa      	bls.n	8005be2 <_free_r+0x42>
 8005bec:	6811      	ldr	r1, [r2, #0]
 8005bee:	1850      	adds	r0, r2, r1
 8005bf0:	42a0      	cmp	r0, r4
 8005bf2:	d10b      	bne.n	8005c0c <_free_r+0x6c>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	4401      	add	r1, r0
 8005bf8:	1850      	adds	r0, r2, r1
 8005bfa:	4283      	cmp	r3, r0
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	d1e0      	bne.n	8005bc2 <_free_r+0x22>
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4408      	add	r0, r1
 8005c06:	6010      	str	r0, [r2, #0]
 8005c08:	6053      	str	r3, [r2, #4]
 8005c0a:	e7da      	b.n	8005bc2 <_free_r+0x22>
 8005c0c:	d902      	bls.n	8005c14 <_free_r+0x74>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	e7d6      	b.n	8005bc2 <_free_r+0x22>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	1821      	adds	r1, r4, r0
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf01      	itttt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	1809      	addeq	r1, r1, r0
 8005c22:	6021      	streq	r1, [r4, #0]
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	6054      	str	r4, [r2, #4]
 8005c28:	e7cb      	b.n	8005bc2 <_free_r+0x22>
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000460 	.word	0x20000460

08005c30 <malloc>:
 8005c30:	4b02      	ldr	r3, [pc, #8]	@ (8005c3c <malloc+0xc>)
 8005c32:	4601      	mov	r1, r0
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	f000 b825 	b.w	8005c84 <_malloc_r>
 8005c3a:	bf00      	nop
 8005c3c:	20000034 	.word	0x20000034

08005c40 <sbrk_aligned>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4e0f      	ldr	r6, [pc, #60]	@ (8005c80 <sbrk_aligned+0x40>)
 8005c44:	460c      	mov	r4, r1
 8005c46:	6831      	ldr	r1, [r6, #0]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	b911      	cbnz	r1, 8005c52 <sbrk_aligned+0x12>
 8005c4c:	f000 fe40 	bl	80068d0 <_sbrk_r>
 8005c50:	6030      	str	r0, [r6, #0]
 8005c52:	4621      	mov	r1, r4
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 fe3b 	bl	80068d0 <_sbrk_r>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	d103      	bne.n	8005c66 <sbrk_aligned+0x26>
 8005c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c62:	4620      	mov	r0, r4
 8005c64:	bd70      	pop	{r4, r5, r6, pc}
 8005c66:	1cc4      	adds	r4, r0, #3
 8005c68:	f024 0403 	bic.w	r4, r4, #3
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d0f8      	beq.n	8005c62 <sbrk_aligned+0x22>
 8005c70:	1a21      	subs	r1, r4, r0
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 fe2c 	bl	80068d0 <_sbrk_r>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d1f2      	bne.n	8005c62 <sbrk_aligned+0x22>
 8005c7c:	e7ef      	b.n	8005c5e <sbrk_aligned+0x1e>
 8005c7e:	bf00      	nop
 8005c80:	2000045c 	.word	0x2000045c

08005c84 <_malloc_r>:
 8005c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c88:	1ccd      	adds	r5, r1, #3
 8005c8a:	f025 0503 	bic.w	r5, r5, #3
 8005c8e:	3508      	adds	r5, #8
 8005c90:	2d0c      	cmp	r5, #12
 8005c92:	bf38      	it	cc
 8005c94:	250c      	movcc	r5, #12
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	4606      	mov	r6, r0
 8005c9a:	db01      	blt.n	8005ca0 <_malloc_r+0x1c>
 8005c9c:	42a9      	cmp	r1, r5
 8005c9e:	d904      	bls.n	8005caa <_malloc_r+0x26>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d80 <_malloc_r+0xfc>
 8005cae:	f000 f869 	bl	8005d84 <__malloc_lock>
 8005cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb6:	461c      	mov	r4, r3
 8005cb8:	bb44      	cbnz	r4, 8005d0c <_malloc_r+0x88>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f7ff ffbf 	bl	8005c40 <sbrk_aligned>
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	d158      	bne.n	8005d7a <_malloc_r+0xf6>
 8005cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8005ccc:	4627      	mov	r7, r4
 8005cce:	2f00      	cmp	r7, #0
 8005cd0:	d143      	bne.n	8005d5a <_malloc_r+0xd6>
 8005cd2:	2c00      	cmp	r4, #0
 8005cd4:	d04b      	beq.n	8005d6e <_malloc_r+0xea>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	4639      	mov	r1, r7
 8005cda:	4630      	mov	r0, r6
 8005cdc:	eb04 0903 	add.w	r9, r4, r3
 8005ce0:	f000 fdf6 	bl	80068d0 <_sbrk_r>
 8005ce4:	4581      	cmp	r9, r0
 8005ce6:	d142      	bne.n	8005d6e <_malloc_r+0xea>
 8005ce8:	6821      	ldr	r1, [r4, #0]
 8005cea:	4630      	mov	r0, r6
 8005cec:	1a6d      	subs	r5, r5, r1
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7ff ffa6 	bl	8005c40 <sbrk_aligned>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d03a      	beq.n	8005d6e <_malloc_r+0xea>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	442b      	add	r3, r5
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	bb62      	cbnz	r2, 8005d60 <_malloc_r+0xdc>
 8005d06:	f8c8 7000 	str.w	r7, [r8]
 8005d0a:	e00f      	b.n	8005d2c <_malloc_r+0xa8>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	1b52      	subs	r2, r2, r5
 8005d10:	d420      	bmi.n	8005d54 <_malloc_r+0xd0>
 8005d12:	2a0b      	cmp	r2, #11
 8005d14:	d917      	bls.n	8005d46 <_malloc_r+0xc2>
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	6025      	str	r5, [r4, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	6059      	strne	r1, [r3, #4]
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	bf08      	it	eq
 8005d24:	f8c8 1000 	streq.w	r1, [r8]
 8005d28:	5162      	str	r2, [r4, r5]
 8005d2a:	604b      	str	r3, [r1, #4]
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 f82f 	bl	8005d90 <__malloc_unlock>
 8005d32:	f104 000b 	add.w	r0, r4, #11
 8005d36:	1d23      	adds	r3, r4, #4
 8005d38:	f020 0007 	bic.w	r0, r0, #7
 8005d3c:	1ac2      	subs	r2, r0, r3
 8005d3e:	bf1c      	itt	ne
 8005d40:	1a1b      	subne	r3, r3, r0
 8005d42:	50a3      	strne	r3, [r4, r2]
 8005d44:	e7af      	b.n	8005ca6 <_malloc_r+0x22>
 8005d46:	6862      	ldr	r2, [r4, #4]
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	bf0c      	ite	eq
 8005d4c:	f8c8 2000 	streq.w	r2, [r8]
 8005d50:	605a      	strne	r2, [r3, #4]
 8005d52:	e7eb      	b.n	8005d2c <_malloc_r+0xa8>
 8005d54:	4623      	mov	r3, r4
 8005d56:	6864      	ldr	r4, [r4, #4]
 8005d58:	e7ae      	b.n	8005cb8 <_malloc_r+0x34>
 8005d5a:	463c      	mov	r4, r7
 8005d5c:	687f      	ldr	r7, [r7, #4]
 8005d5e:	e7b6      	b.n	8005cce <_malloc_r+0x4a>
 8005d60:	461a      	mov	r2, r3
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d1fb      	bne.n	8005d60 <_malloc_r+0xdc>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6053      	str	r3, [r2, #4]
 8005d6c:	e7de      	b.n	8005d2c <_malloc_r+0xa8>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	4630      	mov	r0, r6
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f000 f80c 	bl	8005d90 <__malloc_unlock>
 8005d78:	e794      	b.n	8005ca4 <_malloc_r+0x20>
 8005d7a:	6005      	str	r5, [r0, #0]
 8005d7c:	e7d6      	b.n	8005d2c <_malloc_r+0xa8>
 8005d7e:	bf00      	nop
 8005d80:	20000460 	.word	0x20000460

08005d84 <__malloc_lock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	@ (8005d8c <__malloc_lock+0x8>)
 8005d86:	f7ff b8aa 	b.w	8004ede <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20000458 	.word	0x20000458

08005d90 <__malloc_unlock>:
 8005d90:	4801      	ldr	r0, [pc, #4]	@ (8005d98 <__malloc_unlock+0x8>)
 8005d92:	f7ff b8a5 	b.w	8004ee0 <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	20000458 	.word	0x20000458

08005d9c <_Balloc>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	69c6      	ldr	r6, [r0, #28]
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	b976      	cbnz	r6, 8005dc4 <_Balloc+0x28>
 8005da6:	2010      	movs	r0, #16
 8005da8:	f7ff ff42 	bl	8005c30 <malloc>
 8005dac:	4602      	mov	r2, r0
 8005dae:	61e0      	str	r0, [r4, #28]
 8005db0:	b920      	cbnz	r0, 8005dbc <_Balloc+0x20>
 8005db2:	216b      	movs	r1, #107	@ 0x6b
 8005db4:	4b17      	ldr	r3, [pc, #92]	@ (8005e14 <_Balloc+0x78>)
 8005db6:	4818      	ldr	r0, [pc, #96]	@ (8005e18 <_Balloc+0x7c>)
 8005db8:	f000 fda8 	bl	800690c <__assert_func>
 8005dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dc0:	6006      	str	r6, [r0, #0]
 8005dc2:	60c6      	str	r6, [r0, #12]
 8005dc4:	69e6      	ldr	r6, [r4, #28]
 8005dc6:	68f3      	ldr	r3, [r6, #12]
 8005dc8:	b183      	cbz	r3, 8005dec <_Balloc+0x50>
 8005dca:	69e3      	ldr	r3, [r4, #28]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dd2:	b9b8      	cbnz	r0, 8005e04 <_Balloc+0x68>
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f605 	lsl.w	r6, r1, r5
 8005dda:	1d72      	adds	r2, r6, #5
 8005ddc:	4620      	mov	r0, r4
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	f000 fdb2 	bl	8006948 <_calloc_r>
 8005de4:	b160      	cbz	r0, 8005e00 <_Balloc+0x64>
 8005de6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dea:	e00e      	b.n	8005e0a <_Balloc+0x6e>
 8005dec:	2221      	movs	r2, #33	@ 0x21
 8005dee:	2104      	movs	r1, #4
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fda9 	bl	8006948 <_calloc_r>
 8005df6:	69e3      	ldr	r3, [r4, #28]
 8005df8:	60f0      	str	r0, [r6, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e4      	bne.n	8005dca <_Balloc+0x2e>
 8005e00:	2000      	movs	r0, #0
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	6802      	ldr	r2, [r0, #0]
 8005e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e10:	e7f7      	b.n	8005e02 <_Balloc+0x66>
 8005e12:	bf00      	nop
 8005e14:	0800709f 	.word	0x0800709f
 8005e18:	0800711f 	.word	0x0800711f

08005e1c <_Bfree>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	69c6      	ldr	r6, [r0, #28]
 8005e20:	4605      	mov	r5, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b976      	cbnz	r6, 8005e44 <_Bfree+0x28>
 8005e26:	2010      	movs	r0, #16
 8005e28:	f7ff ff02 	bl	8005c30 <malloc>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	61e8      	str	r0, [r5, #28]
 8005e30:	b920      	cbnz	r0, 8005e3c <_Bfree+0x20>
 8005e32:	218f      	movs	r1, #143	@ 0x8f
 8005e34:	4b08      	ldr	r3, [pc, #32]	@ (8005e58 <_Bfree+0x3c>)
 8005e36:	4809      	ldr	r0, [pc, #36]	@ (8005e5c <_Bfree+0x40>)
 8005e38:	f000 fd68 	bl	800690c <__assert_func>
 8005e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e40:	6006      	str	r6, [r0, #0]
 8005e42:	60c6      	str	r6, [r0, #12]
 8005e44:	b13c      	cbz	r4, 8005e56 <_Bfree+0x3a>
 8005e46:	69eb      	ldr	r3, [r5, #28]
 8005e48:	6862      	ldr	r2, [r4, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e50:	6021      	str	r1, [r4, #0]
 8005e52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	0800709f 	.word	0x0800709f
 8005e5c:	0800711f 	.word	0x0800711f

08005e60 <__multadd>:
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	4607      	mov	r7, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	461e      	mov	r6, r3
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	690d      	ldr	r5, [r1, #16]
 8005e6e:	f101 0c14 	add.w	ip, r1, #20
 8005e72:	f8dc 3000 	ldr.w	r3, [ip]
 8005e76:	3001      	adds	r0, #1
 8005e78:	b299      	uxth	r1, r3
 8005e7a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e7e:	0c1e      	lsrs	r6, r3, #16
 8005e80:	0c0b      	lsrs	r3, r1, #16
 8005e82:	fb02 3306 	mla	r3, r2, r6, r3
 8005e86:	b289      	uxth	r1, r1
 8005e88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e8c:	4285      	cmp	r5, r0
 8005e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e92:	f84c 1b04 	str.w	r1, [ip], #4
 8005e96:	dcec      	bgt.n	8005e72 <__multadd+0x12>
 8005e98:	b30e      	cbz	r6, 8005ede <__multadd+0x7e>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	dc19      	bgt.n	8005ed4 <__multadd+0x74>
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	3101      	adds	r1, #1
 8005ea6:	f7ff ff79 	bl	8005d9c <_Balloc>
 8005eaa:	4680      	mov	r8, r0
 8005eac:	b928      	cbnz	r0, 8005eba <__multadd+0x5a>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	21ba      	movs	r1, #186	@ 0xba
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <__multadd+0x84>)
 8005eb4:	480c      	ldr	r0, [pc, #48]	@ (8005ee8 <__multadd+0x88>)
 8005eb6:	f000 fd29 	bl	800690c <__assert_func>
 8005eba:	6922      	ldr	r2, [r4, #16]
 8005ebc:	f104 010c 	add.w	r1, r4, #12
 8005ec0:	3202      	adds	r2, #2
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	300c      	adds	r0, #12
 8005ec6:	f000 fd13 	bl	80068f0 <memcpy>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ffa5 	bl	8005e1c <_Bfree>
 8005ed2:	4644      	mov	r4, r8
 8005ed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ed8:	3501      	adds	r5, #1
 8005eda:	615e      	str	r6, [r3, #20]
 8005edc:	6125      	str	r5, [r4, #16]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	0800710e 	.word	0x0800710e
 8005ee8:	0800711f 	.word	0x0800711f

08005eec <__hi0bits>:
 8005eec:	4603      	mov	r3, r0
 8005eee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ef2:	bf3a      	itte	cc
 8005ef4:	0403      	lslcc	r3, r0, #16
 8005ef6:	2010      	movcc	r0, #16
 8005ef8:	2000      	movcs	r0, #0
 8005efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005efe:	bf3c      	itt	cc
 8005f00:	021b      	lslcc	r3, r3, #8
 8005f02:	3008      	addcc	r0, #8
 8005f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f08:	bf3c      	itt	cc
 8005f0a:	011b      	lslcc	r3, r3, #4
 8005f0c:	3004      	addcc	r0, #4
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f12:	bf3c      	itt	cc
 8005f14:	009b      	lslcc	r3, r3, #2
 8005f16:	3002      	addcc	r0, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db05      	blt.n	8005f28 <__hi0bits+0x3c>
 8005f1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f20:	f100 0001 	add.w	r0, r0, #1
 8005f24:	bf08      	it	eq
 8005f26:	2020      	moveq	r0, #32
 8005f28:	4770      	bx	lr

08005f2a <__lo0bits>:
 8005f2a:	6803      	ldr	r3, [r0, #0]
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f013 0007 	ands.w	r0, r3, #7
 8005f32:	d00b      	beq.n	8005f4c <__lo0bits+0x22>
 8005f34:	07d9      	lsls	r1, r3, #31
 8005f36:	d421      	bmi.n	8005f7c <__lo0bits+0x52>
 8005f38:	0798      	lsls	r0, r3, #30
 8005f3a:	bf49      	itett	mi
 8005f3c:	085b      	lsrmi	r3, r3, #1
 8005f3e:	089b      	lsrpl	r3, r3, #2
 8005f40:	2001      	movmi	r0, #1
 8005f42:	6013      	strmi	r3, [r2, #0]
 8005f44:	bf5c      	itt	pl
 8005f46:	2002      	movpl	r0, #2
 8005f48:	6013      	strpl	r3, [r2, #0]
 8005f4a:	4770      	bx	lr
 8005f4c:	b299      	uxth	r1, r3
 8005f4e:	b909      	cbnz	r1, 8005f54 <__lo0bits+0x2a>
 8005f50:	2010      	movs	r0, #16
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	b2d9      	uxtb	r1, r3
 8005f56:	b909      	cbnz	r1, 8005f5c <__lo0bits+0x32>
 8005f58:	3008      	adds	r0, #8
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	0719      	lsls	r1, r3, #28
 8005f5e:	bf04      	itt	eq
 8005f60:	091b      	lsreq	r3, r3, #4
 8005f62:	3004      	addeq	r0, #4
 8005f64:	0799      	lsls	r1, r3, #30
 8005f66:	bf04      	itt	eq
 8005f68:	089b      	lsreq	r3, r3, #2
 8005f6a:	3002      	addeq	r0, #2
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d403      	bmi.n	8005f78 <__lo0bits+0x4e>
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	f100 0001 	add.w	r0, r0, #1
 8005f76:	d003      	beq.n	8005f80 <__lo0bits+0x56>
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4770      	bx	lr
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	4770      	bx	lr
 8005f80:	2020      	movs	r0, #32
 8005f82:	4770      	bx	lr

08005f84 <__i2b>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	460c      	mov	r4, r1
 8005f88:	2101      	movs	r1, #1
 8005f8a:	f7ff ff07 	bl	8005d9c <_Balloc>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	b928      	cbnz	r0, 8005f9e <__i2b+0x1a>
 8005f92:	f240 1145 	movw	r1, #325	@ 0x145
 8005f96:	4b04      	ldr	r3, [pc, #16]	@ (8005fa8 <__i2b+0x24>)
 8005f98:	4804      	ldr	r0, [pc, #16]	@ (8005fac <__i2b+0x28>)
 8005f9a:	f000 fcb7 	bl	800690c <__assert_func>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	6144      	str	r4, [r0, #20]
 8005fa2:	6103      	str	r3, [r0, #16]
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	bf00      	nop
 8005fa8:	0800710e 	.word	0x0800710e
 8005fac:	0800711f 	.word	0x0800711f

08005fb0 <__multiply>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	690a      	ldr	r2, [r1, #16]
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	460f      	mov	r7, r1
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bfa2      	ittt	ge
 8005fc0:	4623      	movge	r3, r4
 8005fc2:	460c      	movge	r4, r1
 8005fc4:	461f      	movge	r7, r3
 8005fc6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005fca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005fce:	68a3      	ldr	r3, [r4, #8]
 8005fd0:	6861      	ldr	r1, [r4, #4]
 8005fd2:	eb0a 0609 	add.w	r6, sl, r9
 8005fd6:	42b3      	cmp	r3, r6
 8005fd8:	b085      	sub	sp, #20
 8005fda:	bfb8      	it	lt
 8005fdc:	3101      	addlt	r1, #1
 8005fde:	f7ff fedd 	bl	8005d9c <_Balloc>
 8005fe2:	b930      	cbnz	r0, 8005ff2 <__multiply+0x42>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fea:	4b43      	ldr	r3, [pc, #268]	@ (80060f8 <__multiply+0x148>)
 8005fec:	4843      	ldr	r0, [pc, #268]	@ (80060fc <__multiply+0x14c>)
 8005fee:	f000 fc8d 	bl	800690c <__assert_func>
 8005ff2:	f100 0514 	add.w	r5, r0, #20
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ffe:	4543      	cmp	r3, r8
 8006000:	d321      	bcc.n	8006046 <__multiply+0x96>
 8006002:	f107 0114 	add.w	r1, r7, #20
 8006006:	f104 0214 	add.w	r2, r4, #20
 800600a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800600e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006012:	9302      	str	r3, [sp, #8]
 8006014:	1b13      	subs	r3, r2, r4
 8006016:	3b15      	subs	r3, #21
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3304      	adds	r3, #4
 800601e:	f104 0715 	add.w	r7, r4, #21
 8006022:	42ba      	cmp	r2, r7
 8006024:	bf38      	it	cc
 8006026:	2304      	movcc	r3, #4
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	9103      	str	r1, [sp, #12]
 800602e:	428b      	cmp	r3, r1
 8006030:	d80c      	bhi.n	800604c <__multiply+0x9c>
 8006032:	2e00      	cmp	r6, #0
 8006034:	dd03      	ble.n	800603e <__multiply+0x8e>
 8006036:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800603a:	2b00      	cmp	r3, #0
 800603c:	d05a      	beq.n	80060f4 <__multiply+0x144>
 800603e:	6106      	str	r6, [r0, #16]
 8006040:	b005      	add	sp, #20
 8006042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006046:	f843 2b04 	str.w	r2, [r3], #4
 800604a:	e7d8      	b.n	8005ffe <__multiply+0x4e>
 800604c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006050:	f1ba 0f00 	cmp.w	sl, #0
 8006054:	d023      	beq.n	800609e <__multiply+0xee>
 8006056:	46a9      	mov	r9, r5
 8006058:	f04f 0c00 	mov.w	ip, #0
 800605c:	f104 0e14 	add.w	lr, r4, #20
 8006060:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006064:	f8d9 3000 	ldr.w	r3, [r9]
 8006068:	fa1f fb87 	uxth.w	fp, r7
 800606c:	b29b      	uxth	r3, r3
 800606e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006072:	4463      	add	r3, ip
 8006074:	f8d9 c000 	ldr.w	ip, [r9]
 8006078:	0c3f      	lsrs	r7, r7, #16
 800607a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800607e:	fb0a c707 	mla	r7, sl, r7, ip
 8006082:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800608c:	4572      	cmp	r2, lr
 800608e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006092:	f849 3b04 	str.w	r3, [r9], #4
 8006096:	d8e3      	bhi.n	8006060 <__multiply+0xb0>
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	f845 c003 	str.w	ip, [r5, r3]
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	3104      	adds	r1, #4
 80060a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060a6:	f1b9 0f00 	cmp.w	r9, #0
 80060aa:	d021      	beq.n	80060f0 <__multiply+0x140>
 80060ac:	46ae      	mov	lr, r5
 80060ae:	f04f 0a00 	mov.w	sl, #0
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	f104 0c14 	add.w	ip, r4, #20
 80060b8:	f8bc b000 	ldrh.w	fp, [ip]
 80060bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	fb09 770b 	mla	r7, r9, fp, r7
 80060c6:	4457      	add	r7, sl
 80060c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060cc:	f84e 3b04 	str.w	r3, [lr], #4
 80060d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d8:	f8be 3000 	ldrh.w	r3, [lr]
 80060dc:	4562      	cmp	r2, ip
 80060de:	fb09 330a 	mla	r3, r9, sl, r3
 80060e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80060e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ea:	d8e5      	bhi.n	80060b8 <__multiply+0x108>
 80060ec:	9f01      	ldr	r7, [sp, #4]
 80060ee:	51eb      	str	r3, [r5, r7]
 80060f0:	3504      	adds	r5, #4
 80060f2:	e79a      	b.n	800602a <__multiply+0x7a>
 80060f4:	3e01      	subs	r6, #1
 80060f6:	e79c      	b.n	8006032 <__multiply+0x82>
 80060f8:	0800710e 	.word	0x0800710e
 80060fc:	0800711f 	.word	0x0800711f

08006100 <__pow5mult>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4615      	mov	r5, r2
 8006106:	f012 0203 	ands.w	r2, r2, #3
 800610a:	4607      	mov	r7, r0
 800610c:	460e      	mov	r6, r1
 800610e:	d007      	beq.n	8006120 <__pow5mult+0x20>
 8006110:	4c25      	ldr	r4, [pc, #148]	@ (80061a8 <__pow5mult+0xa8>)
 8006112:	3a01      	subs	r2, #1
 8006114:	2300      	movs	r3, #0
 8006116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800611a:	f7ff fea1 	bl	8005e60 <__multadd>
 800611e:	4606      	mov	r6, r0
 8006120:	10ad      	asrs	r5, r5, #2
 8006122:	d03d      	beq.n	80061a0 <__pow5mult+0xa0>
 8006124:	69fc      	ldr	r4, [r7, #28]
 8006126:	b97c      	cbnz	r4, 8006148 <__pow5mult+0x48>
 8006128:	2010      	movs	r0, #16
 800612a:	f7ff fd81 	bl	8005c30 <malloc>
 800612e:	4602      	mov	r2, r0
 8006130:	61f8      	str	r0, [r7, #28]
 8006132:	b928      	cbnz	r0, 8006140 <__pow5mult+0x40>
 8006134:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006138:	4b1c      	ldr	r3, [pc, #112]	@ (80061ac <__pow5mult+0xac>)
 800613a:	481d      	ldr	r0, [pc, #116]	@ (80061b0 <__pow5mult+0xb0>)
 800613c:	f000 fbe6 	bl	800690c <__assert_func>
 8006140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006144:	6004      	str	r4, [r0, #0]
 8006146:	60c4      	str	r4, [r0, #12]
 8006148:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800614c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006150:	b94c      	cbnz	r4, 8006166 <__pow5mult+0x66>
 8006152:	f240 2171 	movw	r1, #625	@ 0x271
 8006156:	4638      	mov	r0, r7
 8006158:	f7ff ff14 	bl	8005f84 <__i2b>
 800615c:	2300      	movs	r3, #0
 800615e:	4604      	mov	r4, r0
 8006160:	f8c8 0008 	str.w	r0, [r8, #8]
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	f04f 0900 	mov.w	r9, #0
 800616a:	07eb      	lsls	r3, r5, #31
 800616c:	d50a      	bpl.n	8006184 <__pow5mult+0x84>
 800616e:	4631      	mov	r1, r6
 8006170:	4622      	mov	r2, r4
 8006172:	4638      	mov	r0, r7
 8006174:	f7ff ff1c 	bl	8005fb0 <__multiply>
 8006178:	4680      	mov	r8, r0
 800617a:	4631      	mov	r1, r6
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff fe4d 	bl	8005e1c <_Bfree>
 8006182:	4646      	mov	r6, r8
 8006184:	106d      	asrs	r5, r5, #1
 8006186:	d00b      	beq.n	80061a0 <__pow5mult+0xa0>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	b938      	cbnz	r0, 800619c <__pow5mult+0x9c>
 800618c:	4622      	mov	r2, r4
 800618e:	4621      	mov	r1, r4
 8006190:	4638      	mov	r0, r7
 8006192:	f7ff ff0d 	bl	8005fb0 <__multiply>
 8006196:	6020      	str	r0, [r4, #0]
 8006198:	f8c0 9000 	str.w	r9, [r0]
 800619c:	4604      	mov	r4, r0
 800619e:	e7e4      	b.n	800616a <__pow5mult+0x6a>
 80061a0:	4630      	mov	r0, r6
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a6:	bf00      	nop
 80061a8:	08007178 	.word	0x08007178
 80061ac:	0800709f 	.word	0x0800709f
 80061b0:	0800711f 	.word	0x0800711f

080061b4 <__lshift>:
 80061b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	460c      	mov	r4, r1
 80061ba:	4607      	mov	r7, r0
 80061bc:	4691      	mov	r9, r2
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	6849      	ldr	r1, [r1, #4]
 80061c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061cc:	f108 0601 	add.w	r6, r8, #1
 80061d0:	42b3      	cmp	r3, r6
 80061d2:	db0b      	blt.n	80061ec <__lshift+0x38>
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff fde1 	bl	8005d9c <_Balloc>
 80061da:	4605      	mov	r5, r0
 80061dc:	b948      	cbnz	r0, 80061f2 <__lshift+0x3e>
 80061de:	4602      	mov	r2, r0
 80061e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061e4:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <__lshift+0xd0>)
 80061e6:	4828      	ldr	r0, [pc, #160]	@ (8006288 <__lshift+0xd4>)
 80061e8:	f000 fb90 	bl	800690c <__assert_func>
 80061ec:	3101      	adds	r1, #1
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	e7ee      	b.n	80061d0 <__lshift+0x1c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f100 0114 	add.w	r1, r0, #20
 80061f8:	f100 0210 	add.w	r2, r0, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	4553      	cmp	r3, sl
 8006200:	db33      	blt.n	800626a <__lshift+0xb6>
 8006202:	6920      	ldr	r0, [r4, #16]
 8006204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006208:	f104 0314 	add.w	r3, r4, #20
 800620c:	f019 091f 	ands.w	r9, r9, #31
 8006210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006218:	d02b      	beq.n	8006272 <__lshift+0xbe>
 800621a:	468a      	mov	sl, r1
 800621c:	2200      	movs	r2, #0
 800621e:	f1c9 0e20 	rsb	lr, r9, #32
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	fa00 f009 	lsl.w	r0, r0, r9
 8006228:	4310      	orrs	r0, r2
 800622a:	f84a 0b04 	str.w	r0, [sl], #4
 800622e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006232:	459c      	cmp	ip, r3
 8006234:	fa22 f20e 	lsr.w	r2, r2, lr
 8006238:	d8f3      	bhi.n	8006222 <__lshift+0x6e>
 800623a:	ebac 0304 	sub.w	r3, ip, r4
 800623e:	3b15      	subs	r3, #21
 8006240:	f023 0303 	bic.w	r3, r3, #3
 8006244:	3304      	adds	r3, #4
 8006246:	f104 0015 	add.w	r0, r4, #21
 800624a:	4584      	cmp	ip, r0
 800624c:	bf38      	it	cc
 800624e:	2304      	movcc	r3, #4
 8006250:	50ca      	str	r2, [r1, r3]
 8006252:	b10a      	cbz	r2, 8006258 <__lshift+0xa4>
 8006254:	f108 0602 	add.w	r6, r8, #2
 8006258:	3e01      	subs	r6, #1
 800625a:	4638      	mov	r0, r7
 800625c:	4621      	mov	r1, r4
 800625e:	612e      	str	r6, [r5, #16]
 8006260:	f7ff fddc 	bl	8005e1c <_Bfree>
 8006264:	4628      	mov	r0, r5
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	f842 0f04 	str.w	r0, [r2, #4]!
 800626e:	3301      	adds	r3, #1
 8006270:	e7c5      	b.n	80061fe <__lshift+0x4a>
 8006272:	3904      	subs	r1, #4
 8006274:	f853 2b04 	ldr.w	r2, [r3], #4
 8006278:	459c      	cmp	ip, r3
 800627a:	f841 2f04 	str.w	r2, [r1, #4]!
 800627e:	d8f9      	bhi.n	8006274 <__lshift+0xc0>
 8006280:	e7ea      	b.n	8006258 <__lshift+0xa4>
 8006282:	bf00      	nop
 8006284:	0800710e 	.word	0x0800710e
 8006288:	0800711f 	.word	0x0800711f

0800628c <__mcmp>:
 800628c:	4603      	mov	r3, r0
 800628e:	690a      	ldr	r2, [r1, #16]
 8006290:	6900      	ldr	r0, [r0, #16]
 8006292:	b530      	push	{r4, r5, lr}
 8006294:	1a80      	subs	r0, r0, r2
 8006296:	d10e      	bne.n	80062b6 <__mcmp+0x2a>
 8006298:	3314      	adds	r3, #20
 800629a:	3114      	adds	r1, #20
 800629c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062ac:	4295      	cmp	r5, r2
 80062ae:	d003      	beq.n	80062b8 <__mcmp+0x2c>
 80062b0:	d205      	bcs.n	80062be <__mcmp+0x32>
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295
 80062b6:	bd30      	pop	{r4, r5, pc}
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d3f3      	bcc.n	80062a4 <__mcmp+0x18>
 80062bc:	e7fb      	b.n	80062b6 <__mcmp+0x2a>
 80062be:	2001      	movs	r0, #1
 80062c0:	e7f9      	b.n	80062b6 <__mcmp+0x2a>
	...

080062c4 <__mdiff>:
 80062c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	4689      	mov	r9, r1
 80062ca:	4606      	mov	r6, r0
 80062cc:	4611      	mov	r1, r2
 80062ce:	4648      	mov	r0, r9
 80062d0:	4614      	mov	r4, r2
 80062d2:	f7ff ffdb 	bl	800628c <__mcmp>
 80062d6:	1e05      	subs	r5, r0, #0
 80062d8:	d112      	bne.n	8006300 <__mdiff+0x3c>
 80062da:	4629      	mov	r1, r5
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff fd5d 	bl	8005d9c <_Balloc>
 80062e2:	4602      	mov	r2, r0
 80062e4:	b928      	cbnz	r0, 80062f2 <__mdiff+0x2e>
 80062e6:	f240 2137 	movw	r1, #567	@ 0x237
 80062ea:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <__mdiff+0x120>)
 80062ec:	483e      	ldr	r0, [pc, #248]	@ (80063e8 <__mdiff+0x124>)
 80062ee:	f000 fb0d 	bl	800690c <__assert_func>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062f8:	4610      	mov	r0, r2
 80062fa:	b003      	add	sp, #12
 80062fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006300:	bfbc      	itt	lt
 8006302:	464b      	movlt	r3, r9
 8006304:	46a1      	movlt	r9, r4
 8006306:	4630      	mov	r0, r6
 8006308:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800630c:	bfba      	itte	lt
 800630e:	461c      	movlt	r4, r3
 8006310:	2501      	movlt	r5, #1
 8006312:	2500      	movge	r5, #0
 8006314:	f7ff fd42 	bl	8005d9c <_Balloc>
 8006318:	4602      	mov	r2, r0
 800631a:	b918      	cbnz	r0, 8006324 <__mdiff+0x60>
 800631c:	f240 2145 	movw	r1, #581	@ 0x245
 8006320:	4b30      	ldr	r3, [pc, #192]	@ (80063e4 <__mdiff+0x120>)
 8006322:	e7e3      	b.n	80062ec <__mdiff+0x28>
 8006324:	f100 0b14 	add.w	fp, r0, #20
 8006328:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800632c:	f109 0310 	add.w	r3, r9, #16
 8006330:	60c5      	str	r5, [r0, #12]
 8006332:	f04f 0c00 	mov.w	ip, #0
 8006336:	f109 0514 	add.w	r5, r9, #20
 800633a:	46d9      	mov	r9, fp
 800633c:	6926      	ldr	r6, [r4, #16]
 800633e:	f104 0e14 	add.w	lr, r4, #20
 8006342:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006346:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006352:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006356:	b281      	uxth	r1, r0
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	fa1f f38a 	uxth.w	r3, sl
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	0c00      	lsrs	r0, r0, #16
 8006362:	4463      	add	r3, ip
 8006364:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006368:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006372:	4576      	cmp	r6, lr
 8006374:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006378:	f849 3b04 	str.w	r3, [r9], #4
 800637c:	d8e6      	bhi.n	800634c <__mdiff+0x88>
 800637e:	1b33      	subs	r3, r6, r4
 8006380:	3b15      	subs	r3, #21
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	3415      	adds	r4, #21
 8006388:	3304      	adds	r3, #4
 800638a:	42a6      	cmp	r6, r4
 800638c:	bf38      	it	cc
 800638e:	2304      	movcc	r3, #4
 8006390:	441d      	add	r5, r3
 8006392:	445b      	add	r3, fp
 8006394:	461e      	mov	r6, r3
 8006396:	462c      	mov	r4, r5
 8006398:	4544      	cmp	r4, r8
 800639a:	d30e      	bcc.n	80063ba <__mdiff+0xf6>
 800639c:	f108 0103 	add.w	r1, r8, #3
 80063a0:	1b49      	subs	r1, r1, r5
 80063a2:	f021 0103 	bic.w	r1, r1, #3
 80063a6:	3d03      	subs	r5, #3
 80063a8:	45a8      	cmp	r8, r5
 80063aa:	bf38      	it	cc
 80063ac:	2100      	movcc	r1, #0
 80063ae:	440b      	add	r3, r1
 80063b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063b4:	b199      	cbz	r1, 80063de <__mdiff+0x11a>
 80063b6:	6117      	str	r7, [r2, #16]
 80063b8:	e79e      	b.n	80062f8 <__mdiff+0x34>
 80063ba:	46e6      	mov	lr, ip
 80063bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80063c0:	fa1f fc81 	uxth.w	ip, r1
 80063c4:	44f4      	add	ip, lr
 80063c6:	0c08      	lsrs	r0, r1, #16
 80063c8:	4471      	add	r1, lr
 80063ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063ce:	b289      	uxth	r1, r1
 80063d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063d8:	f846 1b04 	str.w	r1, [r6], #4
 80063dc:	e7dc      	b.n	8006398 <__mdiff+0xd4>
 80063de:	3f01      	subs	r7, #1
 80063e0:	e7e6      	b.n	80063b0 <__mdiff+0xec>
 80063e2:	bf00      	nop
 80063e4:	0800710e 	.word	0x0800710e
 80063e8:	0800711f 	.word	0x0800711f

080063ec <__d2b>:
 80063ec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80063f0:	2101      	movs	r1, #1
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	9e08      	ldr	r6, [sp, #32]
 80063f8:	f7ff fcd0 	bl	8005d9c <_Balloc>
 80063fc:	4604      	mov	r4, r0
 80063fe:	b930      	cbnz	r0, 800640e <__d2b+0x22>
 8006400:	4602      	mov	r2, r0
 8006402:	f240 310f 	movw	r1, #783	@ 0x30f
 8006406:	4b23      	ldr	r3, [pc, #140]	@ (8006494 <__d2b+0xa8>)
 8006408:	4823      	ldr	r0, [pc, #140]	@ (8006498 <__d2b+0xac>)
 800640a:	f000 fa7f 	bl	800690c <__assert_func>
 800640e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006412:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006416:	b10d      	cbz	r5, 800641c <__d2b+0x30>
 8006418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f1b8 0300 	subs.w	r3, r8, #0
 8006422:	d024      	beq.n	800646e <__d2b+0x82>
 8006424:	4668      	mov	r0, sp
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	f7ff fd7f 	bl	8005f2a <__lo0bits>
 800642c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006430:	b1d8      	cbz	r0, 800646a <__d2b+0x7e>
 8006432:	f1c0 0320 	rsb	r3, r0, #32
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	430b      	orrs	r3, r1
 800643c:	40c2      	lsrs	r2, r0
 800643e:	6163      	str	r3, [r4, #20]
 8006440:	9201      	str	r2, [sp, #4]
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2201      	moveq	r2, #1
 800644a:	2202      	movne	r2, #2
 800644c:	61a3      	str	r3, [r4, #24]
 800644e:	6122      	str	r2, [r4, #16]
 8006450:	b1ad      	cbz	r5, 800647e <__d2b+0x92>
 8006452:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006456:	4405      	add	r5, r0
 8006458:	6035      	str	r5, [r6, #0]
 800645a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800645e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006460:	6018      	str	r0, [r3, #0]
 8006462:	4620      	mov	r0, r4
 8006464:	b002      	add	sp, #8
 8006466:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800646a:	6161      	str	r1, [r4, #20]
 800646c:	e7e9      	b.n	8006442 <__d2b+0x56>
 800646e:	a801      	add	r0, sp, #4
 8006470:	f7ff fd5b 	bl	8005f2a <__lo0bits>
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	6163      	str	r3, [r4, #20]
 800647a:	3020      	adds	r0, #32
 800647c:	e7e7      	b.n	800644e <__d2b+0x62>
 800647e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006482:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006486:	6030      	str	r0, [r6, #0]
 8006488:	6918      	ldr	r0, [r3, #16]
 800648a:	f7ff fd2f 	bl	8005eec <__hi0bits>
 800648e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006492:	e7e4      	b.n	800645e <__d2b+0x72>
 8006494:	0800710e 	.word	0x0800710e
 8006498:	0800711f 	.word	0x0800711f

0800649c <__ssputs_r>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	461f      	mov	r7, r3
 80064a2:	688e      	ldr	r6, [r1, #8]
 80064a4:	4682      	mov	sl, r0
 80064a6:	42be      	cmp	r6, r7
 80064a8:	460c      	mov	r4, r1
 80064aa:	4690      	mov	r8, r2
 80064ac:	680b      	ldr	r3, [r1, #0]
 80064ae:	d82d      	bhi.n	800650c <__ssputs_r+0x70>
 80064b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064b8:	d026      	beq.n	8006508 <__ssputs_r+0x6c>
 80064ba:	6965      	ldr	r5, [r4, #20]
 80064bc:	6909      	ldr	r1, [r1, #16]
 80064be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c2:	eba3 0901 	sub.w	r9, r3, r1
 80064c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064ca:	1c7b      	adds	r3, r7, #1
 80064cc:	444b      	add	r3, r9
 80064ce:	106d      	asrs	r5, r5, #1
 80064d0:	429d      	cmp	r5, r3
 80064d2:	bf38      	it	cc
 80064d4:	461d      	movcc	r5, r3
 80064d6:	0553      	lsls	r3, r2, #21
 80064d8:	d527      	bpl.n	800652a <__ssputs_r+0x8e>
 80064da:	4629      	mov	r1, r5
 80064dc:	f7ff fbd2 	bl	8005c84 <_malloc_r>
 80064e0:	4606      	mov	r6, r0
 80064e2:	b360      	cbz	r0, 800653e <__ssputs_r+0xa2>
 80064e4:	464a      	mov	r2, r9
 80064e6:	6921      	ldr	r1, [r4, #16]
 80064e8:	f000 fa02 	bl	80068f0 <memcpy>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	6126      	str	r6, [r4, #16]
 80064fa:	444e      	add	r6, r9
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	463e      	mov	r6, r7
 8006500:	6165      	str	r5, [r4, #20]
 8006502:	eba5 0509 	sub.w	r5, r5, r9
 8006506:	60a5      	str	r5, [r4, #8]
 8006508:	42be      	cmp	r6, r7
 800650a:	d900      	bls.n	800650e <__ssputs_r+0x72>
 800650c:	463e      	mov	r6, r7
 800650e:	4632      	mov	r2, r6
 8006510:	4641      	mov	r1, r8
 8006512:	6820      	ldr	r0, [r4, #0]
 8006514:	f000 f9c2 	bl	800689c <memmove>
 8006518:	2000      	movs	r0, #0
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	1b9b      	subs	r3, r3, r6
 800651e:	60a3      	str	r3, [r4, #8]
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	4433      	add	r3, r6
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	462a      	mov	r2, r5
 800652c:	f000 fa32 	bl	8006994 <_realloc_r>
 8006530:	4606      	mov	r6, r0
 8006532:	2800      	cmp	r0, #0
 8006534:	d1e0      	bne.n	80064f8 <__ssputs_r+0x5c>
 8006536:	4650      	mov	r0, sl
 8006538:	6921      	ldr	r1, [r4, #16]
 800653a:	f7ff fb31 	bl	8005ba0 <_free_r>
 800653e:	230c      	movs	r3, #12
 8006540:	f8ca 3000 	str.w	r3, [sl]
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f04f 30ff 	mov.w	r0, #4294967295
 800654a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	e7e9      	b.n	8006526 <__ssputs_r+0x8a>
	...

08006554 <_svfiprintf_r>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4698      	mov	r8, r3
 800655a:	898b      	ldrh	r3, [r1, #12]
 800655c:	4607      	mov	r7, r0
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	460d      	mov	r5, r1
 8006562:	4614      	mov	r4, r2
 8006564:	b09d      	sub	sp, #116	@ 0x74
 8006566:	d510      	bpl.n	800658a <_svfiprintf_r+0x36>
 8006568:	690b      	ldr	r3, [r1, #16]
 800656a:	b973      	cbnz	r3, 800658a <_svfiprintf_r+0x36>
 800656c:	2140      	movs	r1, #64	@ 0x40
 800656e:	f7ff fb89 	bl	8005c84 <_malloc_r>
 8006572:	6028      	str	r0, [r5, #0]
 8006574:	6128      	str	r0, [r5, #16]
 8006576:	b930      	cbnz	r0, 8006586 <_svfiprintf_r+0x32>
 8006578:	230c      	movs	r3, #12
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	b01d      	add	sp, #116	@ 0x74
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	2340      	movs	r3, #64	@ 0x40
 8006588:	616b      	str	r3, [r5, #20]
 800658a:	2300      	movs	r3, #0
 800658c:	9309      	str	r3, [sp, #36]	@ 0x24
 800658e:	2320      	movs	r3, #32
 8006590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006594:	2330      	movs	r3, #48	@ 0x30
 8006596:	f04f 0901 	mov.w	r9, #1
 800659a:	f8cd 800c 	str.w	r8, [sp, #12]
 800659e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006738 <_svfiprintf_r+0x1e4>
 80065a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065a6:	4623      	mov	r3, r4
 80065a8:	469a      	mov	sl, r3
 80065aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ae:	b10a      	cbz	r2, 80065b4 <_svfiprintf_r+0x60>
 80065b0:	2a25      	cmp	r2, #37	@ 0x25
 80065b2:	d1f9      	bne.n	80065a8 <_svfiprintf_r+0x54>
 80065b4:	ebba 0b04 	subs.w	fp, sl, r4
 80065b8:	d00b      	beq.n	80065d2 <_svfiprintf_r+0x7e>
 80065ba:	465b      	mov	r3, fp
 80065bc:	4622      	mov	r2, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ff6b 	bl	800649c <__ssputs_r>
 80065c6:	3001      	adds	r0, #1
 80065c8:	f000 80a7 	beq.w	800671a <_svfiprintf_r+0x1c6>
 80065cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065ce:	445a      	add	r2, fp
 80065d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80065d2:	f89a 3000 	ldrb.w	r3, [sl]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 809f 	beq.w	800671a <_svfiprintf_r+0x1c6>
 80065dc:	2300      	movs	r3, #0
 80065de:	f04f 32ff 	mov.w	r2, #4294967295
 80065e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e6:	f10a 0a01 	add.w	sl, sl, #1
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80065f4:	4654      	mov	r4, sl
 80065f6:	2205      	movs	r2, #5
 80065f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fc:	484e      	ldr	r0, [pc, #312]	@ (8006738 <_svfiprintf_r+0x1e4>)
 80065fe:	f7fe fc70 	bl	8004ee2 <memchr>
 8006602:	9a04      	ldr	r2, [sp, #16]
 8006604:	b9d8      	cbnz	r0, 800663e <_svfiprintf_r+0xea>
 8006606:	06d0      	lsls	r0, r2, #27
 8006608:	bf44      	itt	mi
 800660a:	2320      	movmi	r3, #32
 800660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006610:	0711      	lsls	r1, r2, #28
 8006612:	bf44      	itt	mi
 8006614:	232b      	movmi	r3, #43	@ 0x2b
 8006616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800661a:	f89a 3000 	ldrb.w	r3, [sl]
 800661e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006620:	d015      	beq.n	800664e <_svfiprintf_r+0xfa>
 8006622:	4654      	mov	r4, sl
 8006624:	2000      	movs	r0, #0
 8006626:	f04f 0c0a 	mov.w	ip, #10
 800662a:	9a07      	ldr	r2, [sp, #28]
 800662c:	4621      	mov	r1, r4
 800662e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006632:	3b30      	subs	r3, #48	@ 0x30
 8006634:	2b09      	cmp	r3, #9
 8006636:	d94b      	bls.n	80066d0 <_svfiprintf_r+0x17c>
 8006638:	b1b0      	cbz	r0, 8006668 <_svfiprintf_r+0x114>
 800663a:	9207      	str	r2, [sp, #28]
 800663c:	e014      	b.n	8006668 <_svfiprintf_r+0x114>
 800663e:	eba0 0308 	sub.w	r3, r0, r8
 8006642:	fa09 f303 	lsl.w	r3, r9, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	46a2      	mov	sl, r4
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	e7d2      	b.n	80065f4 <_svfiprintf_r+0xa0>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	1d19      	adds	r1, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9103      	str	r1, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfbb      	ittet	lt
 800665a:	425b      	neglt	r3, r3
 800665c:	f042 0202 	orrlt.w	r2, r2, #2
 8006660:	9307      	strge	r3, [sp, #28]
 8006662:	9307      	strlt	r3, [sp, #28]
 8006664:	bfb8      	it	lt
 8006666:	9204      	strlt	r2, [sp, #16]
 8006668:	7823      	ldrb	r3, [r4, #0]
 800666a:	2b2e      	cmp	r3, #46	@ 0x2e
 800666c:	d10a      	bne.n	8006684 <_svfiprintf_r+0x130>
 800666e:	7863      	ldrb	r3, [r4, #1]
 8006670:	2b2a      	cmp	r3, #42	@ 0x2a
 8006672:	d132      	bne.n	80066da <_svfiprintf_r+0x186>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3402      	adds	r4, #2
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	9203      	str	r2, [sp, #12]
 800667e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800673c <_svfiprintf_r+0x1e8>
 8006688:	2203      	movs	r2, #3
 800668a:	4650      	mov	r0, sl
 800668c:	7821      	ldrb	r1, [r4, #0]
 800668e:	f7fe fc28 	bl	8004ee2 <memchr>
 8006692:	b138      	cbz	r0, 80066a4 <_svfiprintf_r+0x150>
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	eba0 000a 	sub.w	r0, r0, sl
 800669c:	4082      	lsls	r2, r0
 800669e:	4313      	orrs	r3, r2
 80066a0:	3401      	adds	r4, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a8:	2206      	movs	r2, #6
 80066aa:	4825      	ldr	r0, [pc, #148]	@ (8006740 <_svfiprintf_r+0x1ec>)
 80066ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066b0:	f7fe fc17 	bl	8004ee2 <memchr>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d036      	beq.n	8006726 <_svfiprintf_r+0x1d2>
 80066b8:	4b22      	ldr	r3, [pc, #136]	@ (8006744 <_svfiprintf_r+0x1f0>)
 80066ba:	bb1b      	cbnz	r3, 8006704 <_svfiprintf_r+0x1b0>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	3307      	adds	r3, #7
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	3308      	adds	r3, #8
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ca:	4433      	add	r3, r6
 80066cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ce:	e76a      	b.n	80065a6 <_svfiprintf_r+0x52>
 80066d0:	460c      	mov	r4, r1
 80066d2:	2001      	movs	r0, #1
 80066d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d8:	e7a8      	b.n	800662c <_svfiprintf_r+0xd8>
 80066da:	2300      	movs	r3, #0
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	4619      	mov	r1, r3
 80066e2:	3401      	adds	r4, #1
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	4620      	mov	r0, r4
 80066e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ec:	3a30      	subs	r2, #48	@ 0x30
 80066ee:	2a09      	cmp	r2, #9
 80066f0:	d903      	bls.n	80066fa <_svfiprintf_r+0x1a6>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0c6      	beq.n	8006684 <_svfiprintf_r+0x130>
 80066f6:	9105      	str	r1, [sp, #20]
 80066f8:	e7c4      	b.n	8006684 <_svfiprintf_r+0x130>
 80066fa:	4604      	mov	r4, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006702:	e7f0      	b.n	80066e6 <_svfiprintf_r+0x192>
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	462a      	mov	r2, r5
 800670a:	4638      	mov	r0, r7
 800670c:	4b0e      	ldr	r3, [pc, #56]	@ (8006748 <_svfiprintf_r+0x1f4>)
 800670e:	a904      	add	r1, sp, #16
 8006710:	f7fd fe70 	bl	80043f4 <_printf_float>
 8006714:	1c42      	adds	r2, r0, #1
 8006716:	4606      	mov	r6, r0
 8006718:	d1d6      	bne.n	80066c8 <_svfiprintf_r+0x174>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	065b      	lsls	r3, r3, #25
 800671e:	f53f af2d 	bmi.w	800657c <_svfiprintf_r+0x28>
 8006722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006724:	e72c      	b.n	8006580 <_svfiprintf_r+0x2c>
 8006726:	ab03      	add	r3, sp, #12
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	462a      	mov	r2, r5
 800672c:	4638      	mov	r0, r7
 800672e:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <_svfiprintf_r+0x1f4>)
 8006730:	a904      	add	r1, sp, #16
 8006732:	f7fe f8fd 	bl	8004930 <_printf_i>
 8006736:	e7ed      	b.n	8006714 <_svfiprintf_r+0x1c0>
 8006738:	08007278 	.word	0x08007278
 800673c:	0800727e 	.word	0x0800727e
 8006740:	08007282 	.word	0x08007282
 8006744:	080043f5 	.word	0x080043f5
 8006748:	0800649d 	.word	0x0800649d

0800674c <__sflush_r>:
 800674c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	0716      	lsls	r6, r2, #28
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	d454      	bmi.n	8006804 <__sflush_r+0xb8>
 800675a:	684b      	ldr	r3, [r1, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc02      	bgt.n	8006766 <__sflush_r+0x1a>
 8006760:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	dd48      	ble.n	80067f8 <__sflush_r+0xac>
 8006766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006768:	2e00      	cmp	r6, #0
 800676a:	d045      	beq.n	80067f8 <__sflush_r+0xac>
 800676c:	2300      	movs	r3, #0
 800676e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006772:	682f      	ldr	r7, [r5, #0]
 8006774:	6a21      	ldr	r1, [r4, #32]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	d030      	beq.n	80067dc <__sflush_r+0x90>
 800677a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	0759      	lsls	r1, r3, #29
 8006780:	d505      	bpl.n	800678e <__sflush_r+0x42>
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006788:	b10b      	cbz	r3, 800678e <__sflush_r+0x42>
 800678a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4628      	mov	r0, r5
 8006792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006794:	6a21      	ldr	r1, [r4, #32]
 8006796:	47b0      	blx	r6
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	d106      	bne.n	80067ac <__sflush_r+0x60>
 800679e:	6829      	ldr	r1, [r5, #0]
 80067a0:	291d      	cmp	r1, #29
 80067a2:	d82b      	bhi.n	80067fc <__sflush_r+0xb0>
 80067a4:	4a28      	ldr	r2, [pc, #160]	@ (8006848 <__sflush_r+0xfc>)
 80067a6:	410a      	asrs	r2, r1
 80067a8:	07d6      	lsls	r6, r2, #31
 80067aa:	d427      	bmi.n	80067fc <__sflush_r+0xb0>
 80067ac:	2200      	movs	r2, #0
 80067ae:	6062      	str	r2, [r4, #4]
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	04d9      	lsls	r1, r3, #19
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	d504      	bpl.n	80067c2 <__sflush_r+0x76>
 80067b8:	1c42      	adds	r2, r0, #1
 80067ba:	d101      	bne.n	80067c0 <__sflush_r+0x74>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b903      	cbnz	r3, 80067c2 <__sflush_r+0x76>
 80067c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80067c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c4:	602f      	str	r7, [r5, #0]
 80067c6:	b1b9      	cbz	r1, 80067f8 <__sflush_r+0xac>
 80067c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <__sflush_r+0x8a>
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff f9e5 	bl	8005ba0 <_free_r>
 80067d6:	2300      	movs	r3, #0
 80067d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067da:	e00d      	b.n	80067f8 <__sflush_r+0xac>
 80067dc:	2301      	movs	r3, #1
 80067de:	4628      	mov	r0, r5
 80067e0:	47b0      	blx	r6
 80067e2:	4602      	mov	r2, r0
 80067e4:	1c50      	adds	r0, r2, #1
 80067e6:	d1c9      	bne.n	800677c <__sflush_r+0x30>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0c6      	beq.n	800677c <__sflush_r+0x30>
 80067ee:	2b1d      	cmp	r3, #29
 80067f0:	d001      	beq.n	80067f6 <__sflush_r+0xaa>
 80067f2:	2b16      	cmp	r3, #22
 80067f4:	d11d      	bne.n	8006832 <__sflush_r+0xe6>
 80067f6:	602f      	str	r7, [r5, #0]
 80067f8:	2000      	movs	r0, #0
 80067fa:	e021      	b.n	8006840 <__sflush_r+0xf4>
 80067fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006800:	b21b      	sxth	r3, r3
 8006802:	e01a      	b.n	800683a <__sflush_r+0xee>
 8006804:	690f      	ldr	r7, [r1, #16]
 8006806:	2f00      	cmp	r7, #0
 8006808:	d0f6      	beq.n	80067f8 <__sflush_r+0xac>
 800680a:	0793      	lsls	r3, r2, #30
 800680c:	bf18      	it	ne
 800680e:	2300      	movne	r3, #0
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	bf08      	it	eq
 8006814:	694b      	ldreq	r3, [r1, #20]
 8006816:	1bf6      	subs	r6, r6, r7
 8006818:	600f      	str	r7, [r1, #0]
 800681a:	608b      	str	r3, [r1, #8]
 800681c:	2e00      	cmp	r6, #0
 800681e:	ddeb      	ble.n	80067f8 <__sflush_r+0xac>
 8006820:	4633      	mov	r3, r6
 8006822:	463a      	mov	r2, r7
 8006824:	4628      	mov	r0, r5
 8006826:	6a21      	ldr	r1, [r4, #32]
 8006828:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800682c:	47e0      	blx	ip
 800682e:	2800      	cmp	r0, #0
 8006830:	dc07      	bgt.n	8006842 <__sflush_r+0xf6>
 8006832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	4407      	add	r7, r0
 8006844:	1a36      	subs	r6, r6, r0
 8006846:	e7e9      	b.n	800681c <__sflush_r+0xd0>
 8006848:	dfbffffe 	.word	0xdfbffffe

0800684c <_fflush_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b913      	cbnz	r3, 800685c <_fflush_r+0x10>
 8006856:	2500      	movs	r5, #0
 8006858:	4628      	mov	r0, r5
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	b118      	cbz	r0, 8006866 <_fflush_r+0x1a>
 800685e:	6a03      	ldr	r3, [r0, #32]
 8006860:	b90b      	cbnz	r3, 8006866 <_fflush_r+0x1a>
 8006862:	f7fe fa11 	bl	8004c88 <__sinit>
 8006866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f3      	beq.n	8006856 <_fflush_r+0xa>
 800686e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006870:	07d0      	lsls	r0, r2, #31
 8006872:	d404      	bmi.n	800687e <_fflush_r+0x32>
 8006874:	0599      	lsls	r1, r3, #22
 8006876:	d402      	bmi.n	800687e <_fflush_r+0x32>
 8006878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800687a:	f7fe fb30 	bl	8004ede <__retarget_lock_acquire_recursive>
 800687e:	4628      	mov	r0, r5
 8006880:	4621      	mov	r1, r4
 8006882:	f7ff ff63 	bl	800674c <__sflush_r>
 8006886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006888:	4605      	mov	r5, r0
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d4e4      	bmi.n	8006858 <_fflush_r+0xc>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	059b      	lsls	r3, r3, #22
 8006892:	d4e1      	bmi.n	8006858 <_fflush_r+0xc>
 8006894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006896:	f7fe fb23 	bl	8004ee0 <__retarget_lock_release_recursive>
 800689a:	e7dd      	b.n	8006858 <_fflush_r+0xc>

0800689c <memmove>:
 800689c:	4288      	cmp	r0, r1
 800689e:	b510      	push	{r4, lr}
 80068a0:	eb01 0402 	add.w	r4, r1, r2
 80068a4:	d902      	bls.n	80068ac <memmove+0x10>
 80068a6:	4284      	cmp	r4, r0
 80068a8:	4623      	mov	r3, r4
 80068aa:	d807      	bhi.n	80068bc <memmove+0x20>
 80068ac:	1e43      	subs	r3, r0, #1
 80068ae:	42a1      	cmp	r1, r4
 80068b0:	d008      	beq.n	80068c4 <memmove+0x28>
 80068b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ba:	e7f8      	b.n	80068ae <memmove+0x12>
 80068bc:	4601      	mov	r1, r0
 80068be:	4402      	add	r2, r0
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d100      	bne.n	80068c6 <memmove+0x2a>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ce:	e7f7      	b.n	80068c0 <memmove+0x24>

080068d0 <_sbrk_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	2300      	movs	r3, #0
 80068d4:	4d05      	ldr	r5, [pc, #20]	@ (80068ec <_sbrk_r+0x1c>)
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fb f8d2 	bl	8001a84 <_sbrk>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_sbrk_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_sbrk_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	20000454 	.word	0x20000454

080068f0 <memcpy>:
 80068f0:	440a      	add	r2, r1
 80068f2:	4291      	cmp	r1, r2
 80068f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	4770      	bx	lr
 80068fc:	b510      	push	{r4, lr}
 80068fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006902:	4291      	cmp	r1, r2
 8006904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006908:	d1f9      	bne.n	80068fe <memcpy+0xe>
 800690a:	bd10      	pop	{r4, pc}

0800690c <__assert_func>:
 800690c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690e:	4614      	mov	r4, r2
 8006910:	461a      	mov	r2, r3
 8006912:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <__assert_func+0x2c>)
 8006914:	4605      	mov	r5, r0
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68d8      	ldr	r0, [r3, #12]
 800691a:	b954      	cbnz	r4, 8006932 <__assert_func+0x26>
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <__assert_func+0x30>)
 800691e:	461c      	mov	r4, r3
 8006920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006924:	9100      	str	r1, [sp, #0]
 8006926:	462b      	mov	r3, r5
 8006928:	4905      	ldr	r1, [pc, #20]	@ (8006940 <__assert_func+0x34>)
 800692a:	f000 f86f 	bl	8006a0c <fiprintf>
 800692e:	f000 f87f 	bl	8006a30 <abort>
 8006932:	4b04      	ldr	r3, [pc, #16]	@ (8006944 <__assert_func+0x38>)
 8006934:	e7f4      	b.n	8006920 <__assert_func+0x14>
 8006936:	bf00      	nop
 8006938:	20000034 	.word	0x20000034
 800693c:	080072ce 	.word	0x080072ce
 8006940:	080072a0 	.word	0x080072a0
 8006944:	08007293 	.word	0x08007293

08006948 <_calloc_r>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	fba1 5402 	umull	r5, r4, r1, r2
 800694e:	b93c      	cbnz	r4, 8006960 <_calloc_r+0x18>
 8006950:	4629      	mov	r1, r5
 8006952:	f7ff f997 	bl	8005c84 <_malloc_r>
 8006956:	4606      	mov	r6, r0
 8006958:	b928      	cbnz	r0, 8006966 <_calloc_r+0x1e>
 800695a:	2600      	movs	r6, #0
 800695c:	4630      	mov	r0, r6
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	220c      	movs	r2, #12
 8006962:	6002      	str	r2, [r0, #0]
 8006964:	e7f9      	b.n	800695a <_calloc_r+0x12>
 8006966:	462a      	mov	r2, r5
 8006968:	4621      	mov	r1, r4
 800696a:	f7fe fa3a 	bl	8004de2 <memset>
 800696e:	e7f5      	b.n	800695c <_calloc_r+0x14>

08006970 <__ascii_mbtowc>:
 8006970:	b082      	sub	sp, #8
 8006972:	b901      	cbnz	r1, 8006976 <__ascii_mbtowc+0x6>
 8006974:	a901      	add	r1, sp, #4
 8006976:	b142      	cbz	r2, 800698a <__ascii_mbtowc+0x1a>
 8006978:	b14b      	cbz	r3, 800698e <__ascii_mbtowc+0x1e>
 800697a:	7813      	ldrb	r3, [r2, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	1e10      	subs	r0, r2, #0
 8006982:	bf18      	it	ne
 8006984:	2001      	movne	r0, #1
 8006986:	b002      	add	sp, #8
 8006988:	4770      	bx	lr
 800698a:	4610      	mov	r0, r2
 800698c:	e7fb      	b.n	8006986 <__ascii_mbtowc+0x16>
 800698e:	f06f 0001 	mvn.w	r0, #1
 8006992:	e7f8      	b.n	8006986 <__ascii_mbtowc+0x16>

08006994 <_realloc_r>:
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006998:	4680      	mov	r8, r0
 800699a:	4615      	mov	r5, r2
 800699c:	460c      	mov	r4, r1
 800699e:	b921      	cbnz	r1, 80069aa <_realloc_r+0x16>
 80069a0:	4611      	mov	r1, r2
 80069a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	f7ff b96d 	b.w	8005c84 <_malloc_r>
 80069aa:	b92a      	cbnz	r2, 80069b8 <_realloc_r+0x24>
 80069ac:	f7ff f8f8 	bl	8005ba0 <_free_r>
 80069b0:	2400      	movs	r4, #0
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	f000 f841 	bl	8006a3e <_malloc_usable_size_r>
 80069bc:	4285      	cmp	r5, r0
 80069be:	4606      	mov	r6, r0
 80069c0:	d802      	bhi.n	80069c8 <_realloc_r+0x34>
 80069c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069c6:	d8f4      	bhi.n	80069b2 <_realloc_r+0x1e>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7ff f95a 	bl	8005c84 <_malloc_r>
 80069d0:	4607      	mov	r7, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0ec      	beq.n	80069b0 <_realloc_r+0x1c>
 80069d6:	42b5      	cmp	r5, r6
 80069d8:	462a      	mov	r2, r5
 80069da:	4621      	mov	r1, r4
 80069dc:	bf28      	it	cs
 80069de:	4632      	movcs	r2, r6
 80069e0:	f7ff ff86 	bl	80068f0 <memcpy>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7ff f8da 	bl	8005ba0 <_free_r>
 80069ec:	463c      	mov	r4, r7
 80069ee:	e7e0      	b.n	80069b2 <_realloc_r+0x1e>

080069f0 <__ascii_wctomb>:
 80069f0:	4603      	mov	r3, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	b141      	cbz	r1, 8006a08 <__ascii_wctomb+0x18>
 80069f6:	2aff      	cmp	r2, #255	@ 0xff
 80069f8:	d904      	bls.n	8006a04 <__ascii_wctomb+0x14>
 80069fa:	228a      	movs	r2, #138	@ 0x8a
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	4770      	bx	lr
 8006a04:	2001      	movs	r0, #1
 8006a06:	700a      	strb	r2, [r1, #0]
 8006a08:	4770      	bx	lr
	...

08006a0c <fiprintf>:
 8006a0c:	b40e      	push	{r1, r2, r3}
 8006a0e:	b503      	push	{r0, r1, lr}
 8006a10:	4601      	mov	r1, r0
 8006a12:	ab03      	add	r3, sp, #12
 8006a14:	4805      	ldr	r0, [pc, #20]	@ (8006a2c <fiprintf+0x20>)
 8006a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f000 f83d 	bl	8006a9c <_vfiprintf_r>
 8006a22:	b002      	add	sp, #8
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	20000034 	.word	0x20000034

08006a30 <abort>:
 8006a30:	2006      	movs	r0, #6
 8006a32:	b508      	push	{r3, lr}
 8006a34:	f000 fa06 	bl	8006e44 <raise>
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7fa ffae 	bl	800199a <_exit>

08006a3e <_malloc_usable_size_r>:
 8006a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a42:	1f18      	subs	r0, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bfbc      	itt	lt
 8006a48:	580b      	ldrlt	r3, [r1, r0]
 8006a4a:	18c0      	addlt	r0, r0, r3
 8006a4c:	4770      	bx	lr

08006a4e <__sfputc_r>:
 8006a4e:	6893      	ldr	r3, [r2, #8]
 8006a50:	b410      	push	{r4}
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	6093      	str	r3, [r2, #8]
 8006a58:	da07      	bge.n	8006a6a <__sfputc_r+0x1c>
 8006a5a:	6994      	ldr	r4, [r2, #24]
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	db01      	blt.n	8006a64 <__sfputc_r+0x16>
 8006a60:	290a      	cmp	r1, #10
 8006a62:	d102      	bne.n	8006a6a <__sfputc_r+0x1c>
 8006a64:	bc10      	pop	{r4}
 8006a66:	f000 b931 	b.w	8006ccc <__swbuf_r>
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	1c58      	adds	r0, r3, #1
 8006a6e:	6010      	str	r0, [r2, #0]
 8006a70:	7019      	strb	r1, [r3, #0]
 8006a72:	4608      	mov	r0, r1
 8006a74:	bc10      	pop	{r4}
 8006a76:	4770      	bx	lr

08006a78 <__sfputs_r>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	4614      	mov	r4, r2
 8006a80:	18d5      	adds	r5, r2, r3
 8006a82:	42ac      	cmp	r4, r5
 8006a84:	d101      	bne.n	8006a8a <__sfputs_r+0x12>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e007      	b.n	8006a9a <__sfputs_r+0x22>
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a92:	f7ff ffdc 	bl	8006a4e <__sfputc_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d1f3      	bne.n	8006a82 <__sfputs_r+0xa>
 8006a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a9c <_vfiprintf_r>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	4698      	mov	r8, r3
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	b09d      	sub	sp, #116	@ 0x74
 8006aaa:	b118      	cbz	r0, 8006ab4 <_vfiprintf_r+0x18>
 8006aac:	6a03      	ldr	r3, [r0, #32]
 8006aae:	b90b      	cbnz	r3, 8006ab4 <_vfiprintf_r+0x18>
 8006ab0:	f7fe f8ea 	bl	8004c88 <__sinit>
 8006ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ab6:	07d9      	lsls	r1, r3, #31
 8006ab8:	d405      	bmi.n	8006ac6 <_vfiprintf_r+0x2a>
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	059a      	lsls	r2, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_vfiprintf_r+0x2a>
 8006ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ac2:	f7fe fa0c 	bl	8004ede <__retarget_lock_acquire_recursive>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	071b      	lsls	r3, r3, #28
 8006aca:	d501      	bpl.n	8006ad0 <_vfiprintf_r+0x34>
 8006acc:	692b      	ldr	r3, [r5, #16]
 8006ace:	b99b      	cbnz	r3, 8006af8 <_vfiprintf_r+0x5c>
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f000 f938 	bl	8006d48 <__swsetup_r>
 8006ad8:	b170      	cbz	r0, 8006af8 <_vfiprintf_r+0x5c>
 8006ada:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006adc:	07dc      	lsls	r4, r3, #31
 8006ade:	d504      	bpl.n	8006aea <_vfiprintf_r+0x4e>
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	b01d      	add	sp, #116	@ 0x74
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	0598      	lsls	r0, r3, #22
 8006aee:	d4f7      	bmi.n	8006ae0 <_vfiprintf_r+0x44>
 8006af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006af2:	f7fe f9f5 	bl	8004ee0 <__retarget_lock_release_recursive>
 8006af6:	e7f3      	b.n	8006ae0 <_vfiprintf_r+0x44>
 8006af8:	2300      	movs	r3, #0
 8006afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006afc:	2320      	movs	r3, #32
 8006afe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b02:	2330      	movs	r3, #48	@ 0x30
 8006b04:	f04f 0901 	mov.w	r9, #1
 8006b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b0c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006cb8 <_vfiprintf_r+0x21c>
 8006b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b14:	4623      	mov	r3, r4
 8006b16:	469a      	mov	sl, r3
 8006b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b1c:	b10a      	cbz	r2, 8006b22 <_vfiprintf_r+0x86>
 8006b1e:	2a25      	cmp	r2, #37	@ 0x25
 8006b20:	d1f9      	bne.n	8006b16 <_vfiprintf_r+0x7a>
 8006b22:	ebba 0b04 	subs.w	fp, sl, r4
 8006b26:	d00b      	beq.n	8006b40 <_vfiprintf_r+0xa4>
 8006b28:	465b      	mov	r3, fp
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ffa2 	bl	8006a78 <__sfputs_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	f000 80a7 	beq.w	8006c88 <_vfiprintf_r+0x1ec>
 8006b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b3c:	445a      	add	r2, fp
 8006b3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b40:	f89a 3000 	ldrb.w	r3, [sl]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 809f 	beq.w	8006c88 <_vfiprintf_r+0x1ec>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b54:	f10a 0a01 	add.w	sl, sl, #1
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b60:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b62:	4654      	mov	r4, sl
 8006b64:	2205      	movs	r2, #5
 8006b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6a:	4853      	ldr	r0, [pc, #332]	@ (8006cb8 <_vfiprintf_r+0x21c>)
 8006b6c:	f7fe f9b9 	bl	8004ee2 <memchr>
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	b9d8      	cbnz	r0, 8006bac <_vfiprintf_r+0x110>
 8006b74:	06d1      	lsls	r1, r2, #27
 8006b76:	bf44      	itt	mi
 8006b78:	2320      	movmi	r3, #32
 8006b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b7e:	0713      	lsls	r3, r2, #28
 8006b80:	bf44      	itt	mi
 8006b82:	232b      	movmi	r3, #43	@ 0x2b
 8006b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b88:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b8e:	d015      	beq.n	8006bbc <_vfiprintf_r+0x120>
 8006b90:	4654      	mov	r4, sl
 8006b92:	2000      	movs	r0, #0
 8006b94:	f04f 0c0a 	mov.w	ip, #10
 8006b98:	9a07      	ldr	r2, [sp, #28]
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba0:	3b30      	subs	r3, #48	@ 0x30
 8006ba2:	2b09      	cmp	r3, #9
 8006ba4:	d94b      	bls.n	8006c3e <_vfiprintf_r+0x1a2>
 8006ba6:	b1b0      	cbz	r0, 8006bd6 <_vfiprintf_r+0x13a>
 8006ba8:	9207      	str	r2, [sp, #28]
 8006baa:	e014      	b.n	8006bd6 <_vfiprintf_r+0x13a>
 8006bac:	eba0 0308 	sub.w	r3, r0, r8
 8006bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	46a2      	mov	sl, r4
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	e7d2      	b.n	8006b62 <_vfiprintf_r+0xc6>
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	1d19      	adds	r1, r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	9103      	str	r1, [sp, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bfbb      	ittet	lt
 8006bc8:	425b      	neglt	r3, r3
 8006bca:	f042 0202 	orrlt.w	r2, r2, #2
 8006bce:	9307      	strge	r3, [sp, #28]
 8006bd0:	9307      	strlt	r3, [sp, #28]
 8006bd2:	bfb8      	it	lt
 8006bd4:	9204      	strlt	r2, [sp, #16]
 8006bd6:	7823      	ldrb	r3, [r4, #0]
 8006bd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bda:	d10a      	bne.n	8006bf2 <_vfiprintf_r+0x156>
 8006bdc:	7863      	ldrb	r3, [r4, #1]
 8006bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be0:	d132      	bne.n	8006c48 <_vfiprintf_r+0x1ac>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	3402      	adds	r4, #2
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	9203      	str	r2, [sp, #12]
 8006bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006cbc <_vfiprintf_r+0x220>
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	7821      	ldrb	r1, [r4, #0]
 8006bfc:	f7fe f971 	bl	8004ee2 <memchr>
 8006c00:	b138      	cbz	r0, 8006c12 <_vfiprintf_r+0x176>
 8006c02:	2240      	movs	r2, #64	@ 0x40
 8006c04:	9b04      	ldr	r3, [sp, #16]
 8006c06:	eba0 000a 	sub.w	r0, r0, sl
 8006c0a:	4082      	lsls	r2, r0
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	3401      	adds	r4, #1
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c16:	2206      	movs	r2, #6
 8006c18:	4829      	ldr	r0, [pc, #164]	@ (8006cc0 <_vfiprintf_r+0x224>)
 8006c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c1e:	f7fe f960 	bl	8004ee2 <memchr>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d03f      	beq.n	8006ca6 <_vfiprintf_r+0x20a>
 8006c26:	4b27      	ldr	r3, [pc, #156]	@ (8006cc4 <_vfiprintf_r+0x228>)
 8006c28:	bb1b      	cbnz	r3, 8006c72 <_vfiprintf_r+0x1d6>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	3307      	adds	r3, #7
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	3308      	adds	r3, #8
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c38:	443b      	add	r3, r7
 8006c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c3c:	e76a      	b.n	8006b14 <_vfiprintf_r+0x78>
 8006c3e:	460c      	mov	r4, r1
 8006c40:	2001      	movs	r0, #1
 8006c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c46:	e7a8      	b.n	8006b9a <_vfiprintf_r+0xfe>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f04f 0c0a 	mov.w	ip, #10
 8006c4e:	4619      	mov	r1, r3
 8006c50:	3401      	adds	r4, #1
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	4620      	mov	r0, r4
 8006c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c5a:	3a30      	subs	r2, #48	@ 0x30
 8006c5c:	2a09      	cmp	r2, #9
 8006c5e:	d903      	bls.n	8006c68 <_vfiprintf_r+0x1cc>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0c6      	beq.n	8006bf2 <_vfiprintf_r+0x156>
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	e7c4      	b.n	8006bf2 <_vfiprintf_r+0x156>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c70:	e7f0      	b.n	8006c54 <_vfiprintf_r+0x1b8>
 8006c72:	ab03      	add	r3, sp, #12
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	462a      	mov	r2, r5
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <_vfiprintf_r+0x22c>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	f7fd fbb9 	bl	80043f4 <_printf_float>
 8006c82:	4607      	mov	r7, r0
 8006c84:	1c78      	adds	r0, r7, #1
 8006c86:	d1d6      	bne.n	8006c36 <_vfiprintf_r+0x19a>
 8006c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	d405      	bmi.n	8006c9a <_vfiprintf_r+0x1fe>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_vfiprintf_r+0x1fe>
 8006c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c96:	f7fe f923 	bl	8004ee0 <__retarget_lock_release_recursive>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	065b      	lsls	r3, r3, #25
 8006c9e:	f53f af1f 	bmi.w	8006ae0 <_vfiprintf_r+0x44>
 8006ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ca4:	e71e      	b.n	8006ae4 <_vfiprintf_r+0x48>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4630      	mov	r0, r6
 8006cae:	4b06      	ldr	r3, [pc, #24]	@ (8006cc8 <_vfiprintf_r+0x22c>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	f7fd fe3d 	bl	8004930 <_printf_i>
 8006cb6:	e7e4      	b.n	8006c82 <_vfiprintf_r+0x1e6>
 8006cb8:	08007278 	.word	0x08007278
 8006cbc:	0800727e 	.word	0x0800727e
 8006cc0:	08007282 	.word	0x08007282
 8006cc4:	080043f5 	.word	0x080043f5
 8006cc8:	08006a79 	.word	0x08006a79

08006ccc <__swbuf_r>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	460e      	mov	r6, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	b118      	cbz	r0, 8006cde <__swbuf_r+0x12>
 8006cd6:	6a03      	ldr	r3, [r0, #32]
 8006cd8:	b90b      	cbnz	r3, 8006cde <__swbuf_r+0x12>
 8006cda:	f7fd ffd5 	bl	8004c88 <__sinit>
 8006cde:	69a3      	ldr	r3, [r4, #24]
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	071a      	lsls	r2, r3, #28
 8006ce6:	d501      	bpl.n	8006cec <__swbuf_r+0x20>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	b943      	cbnz	r3, 8006cfe <__swbuf_r+0x32>
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f82a 	bl	8006d48 <__swsetup_r>
 8006cf4:	b118      	cbz	r0, 8006cfe <__swbuf_r+0x32>
 8006cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	6922      	ldr	r2, [r4, #16]
 8006d02:	b2f6      	uxtb	r6, r6
 8006d04:	1a98      	subs	r0, r3, r2
 8006d06:	6963      	ldr	r3, [r4, #20]
 8006d08:	4637      	mov	r7, r6
 8006d0a:	4283      	cmp	r3, r0
 8006d0c:	dc05      	bgt.n	8006d1a <__swbuf_r+0x4e>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff fd9b 	bl	800684c <_fflush_r>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d1ed      	bne.n	8006cf6 <__swbuf_r+0x2a>
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	701e      	strb	r6, [r3, #0]
 8006d28:	6962      	ldr	r2, [r4, #20]
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d004      	beq.n	8006d3a <__swbuf_r+0x6e>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d5e1      	bpl.n	8006cfa <__swbuf_r+0x2e>
 8006d36:	2e0a      	cmp	r6, #10
 8006d38:	d1df      	bne.n	8006cfa <__swbuf_r+0x2e>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7ff fd85 	bl	800684c <_fflush_r>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0d9      	beq.n	8006cfa <__swbuf_r+0x2e>
 8006d46:	e7d6      	b.n	8006cf6 <__swbuf_r+0x2a>

08006d48 <__swsetup_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4b29      	ldr	r3, [pc, #164]	@ (8006df0 <__swsetup_r+0xa8>)
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	460c      	mov	r4, r1
 8006d52:	b118      	cbz	r0, 8006d5c <__swsetup_r+0x14>
 8006d54:	6a03      	ldr	r3, [r0, #32]
 8006d56:	b90b      	cbnz	r3, 8006d5c <__swsetup_r+0x14>
 8006d58:	f7fd ff96 	bl	8004c88 <__sinit>
 8006d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d60:	0719      	lsls	r1, r3, #28
 8006d62:	d422      	bmi.n	8006daa <__swsetup_r+0x62>
 8006d64:	06da      	lsls	r2, r3, #27
 8006d66:	d407      	bmi.n	8006d78 <__swsetup_r+0x30>
 8006d68:	2209      	movs	r2, #9
 8006d6a:	602a      	str	r2, [r5, #0]
 8006d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e033      	b.n	8006de0 <__swsetup_r+0x98>
 8006d78:	0758      	lsls	r0, r3, #29
 8006d7a:	d512      	bpl.n	8006da2 <__swsetup_r+0x5a>
 8006d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d7e:	b141      	cbz	r1, 8006d92 <__swsetup_r+0x4a>
 8006d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d84:	4299      	cmp	r1, r3
 8006d86:	d002      	beq.n	8006d8e <__swsetup_r+0x46>
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f7fe ff09 	bl	8005ba0 <_free_r>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f043 0308 	orr.w	r3, r3, #8
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	b94b      	cbnz	r3, 8006dc2 <__swsetup_r+0x7a>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db8:	d003      	beq.n	8006dc2 <__swsetup_r+0x7a>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 f882 	bl	8006ec6 <__smakebuf_r>
 8006dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc6:	f013 0201 	ands.w	r2, r3, #1
 8006dca:	d00a      	beq.n	8006de2 <__swsetup_r+0x9a>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	60a2      	str	r2, [r4, #8]
 8006dd0:	6962      	ldr	r2, [r4, #20]
 8006dd2:	4252      	negs	r2, r2
 8006dd4:	61a2      	str	r2, [r4, #24]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	b942      	cbnz	r2, 8006dec <__swsetup_r+0xa4>
 8006dda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dde:	d1c5      	bne.n	8006d6c <__swsetup_r+0x24>
 8006de0:	bd38      	pop	{r3, r4, r5, pc}
 8006de2:	0799      	lsls	r1, r3, #30
 8006de4:	bf58      	it	pl
 8006de6:	6962      	ldrpl	r2, [r4, #20]
 8006de8:	60a2      	str	r2, [r4, #8]
 8006dea:	e7f4      	b.n	8006dd6 <__swsetup_r+0x8e>
 8006dec:	2000      	movs	r0, #0
 8006dee:	e7f7      	b.n	8006de0 <__swsetup_r+0x98>
 8006df0:	20000034 	.word	0x20000034

08006df4 <_raise_r>:
 8006df4:	291f      	cmp	r1, #31
 8006df6:	b538      	push	{r3, r4, r5, lr}
 8006df8:	4605      	mov	r5, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	d904      	bls.n	8006e08 <_raise_r+0x14>
 8006dfe:	2316      	movs	r3, #22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	f04f 30ff 	mov.w	r0, #4294967295
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e0a:	b112      	cbz	r2, 8006e12 <_raise_r+0x1e>
 8006e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e10:	b94b      	cbnz	r3, 8006e26 <_raise_r+0x32>
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f830 	bl	8006e78 <_getpid_r>
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e22:	f000 b817 	b.w	8006e54 <_kill_r>
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00a      	beq.n	8006e40 <_raise_r+0x4c>
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	d103      	bne.n	8006e36 <_raise_r+0x42>
 8006e2e:	2316      	movs	r3, #22
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7e7      	b.n	8006e06 <_raise_r+0x12>
 8006e36:	2100      	movs	r1, #0
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e3e:	4798      	blx	r3
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7e0      	b.n	8006e06 <_raise_r+0x12>

08006e44 <raise>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	@ (8006e50 <raise+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f7ff bfd3 	b.w	8006df4 <_raise_r>
 8006e4e:	bf00      	nop
 8006e50:	20000034 	.word	0x20000034

08006e54 <_kill_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d06      	ldr	r5, [pc, #24]	@ (8006e74 <_kill_r+0x20>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f7fa fd8a 	bl	800197a <_kill>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d102      	bne.n	8006e70 <_kill_r+0x1c>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	b103      	cbz	r3, 8006e70 <_kill_r+0x1c>
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	bf00      	nop
 8006e74:	20000454 	.word	0x20000454

08006e78 <_getpid_r>:
 8006e78:	f7fa bd78 	b.w	800196c <_getpid>

08006e7c <__swhatbuf_r>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	4615      	mov	r5, r2
 8006e86:	2900      	cmp	r1, #0
 8006e88:	461e      	mov	r6, r3
 8006e8a:	b096      	sub	sp, #88	@ 0x58
 8006e8c:	da0c      	bge.n	8006ea8 <__swhatbuf_r+0x2c>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	2100      	movs	r1, #0
 8006e92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e96:	bf14      	ite	ne
 8006e98:	2340      	movne	r3, #64	@ 0x40
 8006e9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	6031      	str	r1, [r6, #0]
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	b016      	add	sp, #88	@ 0x58
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	466a      	mov	r2, sp
 8006eaa:	f000 f849 	bl	8006f40 <_fstat_r>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dbed      	blt.n	8006e8e <__swhatbuf_r+0x12>
 8006eb2:	9901      	ldr	r1, [sp, #4]
 8006eb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006eb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ebc:	4259      	negs	r1, r3
 8006ebe:	4159      	adcs	r1, r3
 8006ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ec4:	e7eb      	b.n	8006e9e <__swhatbuf_r+0x22>

08006ec6 <__smakebuf_r>:
 8006ec6:	898b      	ldrh	r3, [r1, #12]
 8006ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eca:	079d      	lsls	r5, r3, #30
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	d507      	bpl.n	8006ee2 <__smakebuf_r+0x1c>
 8006ed2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	2301      	movs	r3, #1
 8006edc:	6163      	str	r3, [r4, #20]
 8006ede:	b003      	add	sp, #12
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee2:	466a      	mov	r2, sp
 8006ee4:	ab01      	add	r3, sp, #4
 8006ee6:	f7ff ffc9 	bl	8006e7c <__swhatbuf_r>
 8006eea:	9f00      	ldr	r7, [sp, #0]
 8006eec:	4605      	mov	r5, r0
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7fe fec7 	bl	8005c84 <_malloc_r>
 8006ef6:	b948      	cbnz	r0, 8006f0c <__smakebuf_r+0x46>
 8006ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efc:	059a      	lsls	r2, r3, #22
 8006efe:	d4ee      	bmi.n	8006ede <__smakebuf_r+0x18>
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e7e2      	b.n	8006ed2 <__smakebuf_r+0xc>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	b15b      	cbz	r3, 8006f36 <__smakebuf_r+0x70>
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f24:	f000 f81e 	bl	8006f64 <_isatty_r>
 8006f28:	b128      	cbz	r0, 8006f36 <__smakebuf_r+0x70>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	f023 0303 	bic.w	r3, r3, #3
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	431d      	orrs	r5, r3
 8006f3a:	81a5      	strh	r5, [r4, #12]
 8006f3c:	e7cf      	b.n	8006ede <__smakebuf_r+0x18>
	...

08006f40 <_fstat_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	2300      	movs	r3, #0
 8006f44:	4d06      	ldr	r5, [pc, #24]	@ (8006f60 <_fstat_r+0x20>)
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f7fa fd73 	bl	8001a38 <_fstat>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d102      	bne.n	8006f5c <_fstat_r+0x1c>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b103      	cbz	r3, 8006f5c <_fstat_r+0x1c>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000454 	.word	0x20000454

08006f64 <_isatty_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	2300      	movs	r3, #0
 8006f68:	4d05      	ldr	r5, [pc, #20]	@ (8006f80 <_isatty_r+0x1c>)
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7fa fd71 	bl	8001a56 <_isatty>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_isatty_r+0x1a>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_isatty_r+0x1a>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000454 	.word	0x20000454

08006f84 <_init>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr

08006f90 <_fini>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr
