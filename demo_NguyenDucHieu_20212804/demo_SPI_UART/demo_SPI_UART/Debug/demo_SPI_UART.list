
demo_SPI_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001e58  08001e58  00002e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e94  08001e94  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e94  08001e94  00002e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e9c  08001e9c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00002e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ea4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08001eb0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08001eb0  000030cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d9a  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150e  00000000  00000000  0000adcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000614  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a71  00000000  00000000  0000d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092df  00000000  00000000  00023b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f42  00000000  00000000  0002ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afd6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa8  00000000  00000000  000afdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b1d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e40 	.word	0x08001e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e40 	.word	0x08001e40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <EEPROM_Write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define EEPROM_WRITE_ENABLE  0x06
#define EEPROM_WRITE         0x02

void EEPROM_Write(uint16_t address, uint8_t *data, uint16_t size) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	80fb      	strh	r3, [r7, #6]
 8000168:	4613      	mov	r3, r2
 800016a:	80bb      	strh	r3, [r7, #4]
    uint8_t cmd[3];
    cmd[0] = EEPROM_WRITE;
 800016c:	2302      	movs	r3, #2
 800016e:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 8) & 0xFF;
 8000170:	88fb      	ldrh	r3, [r7, #6]
 8000172:	0a1b      	lsrs	r3, r3, #8
 8000174:	b29b      	uxth	r3, r3
 8000176:	b2db      	uxtb	r3, r3
 8000178:	737b      	strb	r3, [r7, #13]
    cmd[2] = address & 0xFF;
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2110      	movs	r1, #16
 8000184:	4818      	ldr	r0, [pc, #96]	@ (80001e8 <EEPROM_Write+0x8c>)
 8000186:	f000 fd59 	bl	8000c3c <HAL_GPIO_WritePin>
    uint8_t wren = EEPROM_WRITE_ENABLE;
 800018a:	2306      	movs	r3, #6
 800018c:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &wren, 1, HAL_MAX_DELAY);
 800018e:	f107 010b 	add.w	r1, r7, #11
 8000192:	f04f 33ff 	mov.w	r3, #4294967295
 8000196:	2201      	movs	r2, #1
 8000198:	4814      	ldr	r0, [pc, #80]	@ (80001ec <EEPROM_Write+0x90>)
 800019a:	f001 f9fb 	bl	8001594 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4811      	ldr	r0, [pc, #68]	@ (80001e8 <EEPROM_Write+0x8c>)
 80001a4:	f000 fd4a 	bl	8000c3c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2110      	movs	r1, #16
 80001ac:	480e      	ldr	r0, [pc, #56]	@ (80001e8 <EEPROM_Write+0x8c>)
 80001ae:	f000 fd45 	bl	8000c3c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 3, HAL_MAX_DELAY);
 80001b2:	f107 010c 	add.w	r1, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	2203      	movs	r2, #3
 80001bc:	480b      	ldr	r0, [pc, #44]	@ (80001ec <EEPROM_Write+0x90>)
 80001be:	f001 f9e9 	bl	8001594 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80001c2:	88ba      	ldrh	r2, [r7, #4]
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	6839      	ldr	r1, [r7, #0]
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <EEPROM_Write+0x90>)
 80001cc:	f001 f9e2 	bl	8001594 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <EEPROM_Write+0x8c>)
 80001d6:	f000 fd31 	bl	8000c3c <HAL_GPIO_WritePin>

    HAL_Delay(5); // Wait for write cycle
 80001da:	2005      	movs	r0, #5
 80001dc:	f000 faa2 	bl	8000724 <HAL_Delay>
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40010800 	.word	0x40010800
 80001ec:	20000028 	.word	0x20000028

080001f0 <EEPROM_WriteStatusRegister>:

void EEPROM_WriteStatusRegister(uint8_t status) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd[2];
    cmd[0] = 0x01;
 80001fa:	2301      	movs	r3, #1
 80001fc:	733b      	strb	r3, [r7, #12]
    cmd[1] = status;
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2110      	movs	r1, #16
 8000206:	480a      	ldr	r0, [pc, #40]	@ (8000230 <EEPROM_WriteStatusRegister+0x40>)
 8000208:	f000 fd18 	bl	8000c3c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 2, HAL_MAX_DELAY);
 800020c:	f107 010c 	add.w	r1, r7, #12
 8000210:	f04f 33ff 	mov.w	r3, #4294967295
 8000214:	2202      	movs	r2, #2
 8000216:	4807      	ldr	r0, [pc, #28]	@ (8000234 <EEPROM_WriteStatusRegister+0x44>)
 8000218:	f001 f9bc 	bl	8001594 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2110      	movs	r1, #16
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <EEPROM_WriteStatusRegister+0x40>)
 8000222:	f000 fd0b 	bl	8000c3c <HAL_GPIO_WritePin>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800
 8000234:	20000028 	.word	0x20000028

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fa0f 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f82b 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f8c5 	bl	80003d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800024a:	f000 f863 	bl	8000314 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024e:	f000 f897 	bl	8000380 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t write_data[] = "Hello World!";
 8000252:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <main+0x5c>)
 8000254:	463c      	mov	r4, r7
 8000256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000258:	c407      	stmia	r4!, {r0, r1, r2}
 800025a:	7023      	strb	r3, [r4, #0]

  EEPROM_WriteStatusRegister(0x00);
 800025c:	2000      	movs	r0, #0
 800025e:	f7ff ffc7 	bl	80001f0 <EEPROM_WriteStatusRegister>

  // Write data to EEPROM
  EEPROM_Write(0x0000, write_data, strlen((char *)write_data));
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ff71 	bl	800014c <strlen>
 800026a:	4603      	mov	r3, r0
 800026c:	b29a      	uxth	r2, r3
 800026e:	463b      	mov	r3, r7
 8000270:	4619      	mov	r1, r3
 8000272:	2000      	movs	r0, #0
 8000274:	f7ff ff72 	bl	800015c <EEPROM_Write>

  // Send data to UART
  HAL_UART_Transmit(&huart1, write_data, strlen((char *)write_data), HAL_MAX_DELAY);
 8000278:	463b      	mov	r3, r7
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	4639      	mov	r1, r7
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	4803      	ldr	r0, [pc, #12]	@ (8000298 <main+0x60>)
 800028c:	f001 fbd7 	bl	8001a3e <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0x58>
 8000294:	08001e58 	.word	0x08001e58
 8000298:	20000080 	.word	0x20000080

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	@ 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd9c 	bl	8001de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	2302      	movs	r3, #2
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	2310      	movs	r3, #16
 80002c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ca:	2300      	movs	r3, #0
 80002cc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fcca 	bl	8000c6c <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002de:	f000 f8a5 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 ff38 	bl	8001170 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000306:	f000 f891 	bl	800042c <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	@ 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_SPI1_Init+0x64>)
 800031a:	4a18      	ldr	r2, [pc, #96]	@ (800037c <MX_SPI1_Init+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000320:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000326:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000346:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000348:	2218      	movs	r2, #24
 800034a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034c:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000360:	220a      	movs	r2, #10
 8000362:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <MX_SPI1_Init+0x64>)
 8000366:	f001 f891 	bl	800148c <HAL_SPI_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000370:	f000 f85c 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	40013000 	.word	0x40013000

08000380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	@ (80003d0 <MX_USART1_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800038a:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 800038c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b8:	f001 fae9 	bl	800198e <HAL_HalfDuplex_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f833 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000080 	.word	0x20000080
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_GPIO_Init+0x50>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <MX_GPIO_Init+0x50>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_GPIO_Init+0x50>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000400:	2310      	movs	r3, #16
 8000402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040c:	2303      	movs	r3, #3
 800040e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4619      	mov	r1, r3
 8000416:	4804      	ldr	r0, [pc, #16]	@ (8000428 <MX_GPIO_Init+0x54>)
 8000418:	f000 fa8c 	bl	8000934 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <Error_Handler+0x8>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <HAL_SPI_MspInit+0x88>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d12f      	bne.n	800051c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a19      	ldr	r2, [pc, #100]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a13      	ldr	r2, [pc, #76]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <HAL_SPI_MspInit+0x8c>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004ec:	23a0      	movs	r3, #160	@ 0xa0
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f4:	2303      	movs	r3, #3
 80004f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	480b      	ldr	r0, [pc, #44]	@ (800052c <HAL_SPI_MspInit+0x90>)
 8000500:	f000 fa18 	bl	8000934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000504:	2340      	movs	r3, #64	@ 0x40
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <HAL_SPI_MspInit+0x90>)
 8000518:	f000 fa0c 	bl	8000934 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40013000 	.word	0x40013000
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800

08000530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <HAL_UART_MspInit+0x74>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d124      	bne.n	800059a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a14      	ldr	r2, [pc, #80]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_UART_MspInit+0x78>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000586:	2312      	movs	r3, #18
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <HAL_UART_MspInit+0x7c>)
 8000596:	f000 f9cd 	bl	8000934 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40013800 	.word	0x40013800
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f874 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff fff8 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061a:	490c      	ldr	r1, [pc, #48]	@ (800064c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800061c:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000630:	4c09      	ldr	r4, [pc, #36]	@ (8000658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f001 fbdb 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fdf9 	bl	8000238 <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	08001ea4 	.word	0x08001ea4
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	200000cc 	.word	0x200000cc

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f92b 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fedc 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f935 	bl	800091a <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 f90b 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000008 	.word	0x20000008
 800070c:	200000c8 	.word	0x200000c8

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	@ (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	200000c8 	.word	0x200000c8

08000724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800072c:	f7ff fff0 	bl	8000710 <HAL_GetTick>
 8000730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d005      	beq.n	800074a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <HAL_Delay+0x44>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074a:	bf00      	nop
 800074c:	f7ff ffe0 	bl	8000710 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <HAL_Delay+0x28>
  {
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000008 	.word	0x20000008

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	@ (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	@ 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	@ 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff49 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff5e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffb0 	bl	8000888 <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b08b      	sub	sp, #44	@ 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e169      	b.n	8000c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000948:	2201      	movs	r2, #1
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	f040 8158 	bne.w	8000c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	4a9a      	ldr	r2, [pc, #616]	@ (8000bd4 <HAL_GPIO_Init+0x2a0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d05e      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000970:	4a98      	ldr	r2, [pc, #608]	@ (8000bd4 <HAL_GPIO_Init+0x2a0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d875      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 8000976:	4a98      	ldr	r2, [pc, #608]	@ (8000bd8 <HAL_GPIO_Init+0x2a4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d058      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 800097c:	4a96      	ldr	r2, [pc, #600]	@ (8000bd8 <HAL_GPIO_Init+0x2a4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d86f      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 8000982:	4a96      	ldr	r2, [pc, #600]	@ (8000bdc <HAL_GPIO_Init+0x2a8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d052      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000988:	4a94      	ldr	r2, [pc, #592]	@ (8000bdc <HAL_GPIO_Init+0x2a8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d869      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 800098e:	4a94      	ldr	r2, [pc, #592]	@ (8000be0 <HAL_GPIO_Init+0x2ac>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d04c      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000994:	4a92      	ldr	r2, [pc, #584]	@ (8000be0 <HAL_GPIO_Init+0x2ac>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d863      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 800099a:	4a92      	ldr	r2, [pc, #584]	@ (8000be4 <HAL_GPIO_Init+0x2b0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d046      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 80009a0:	4a90      	ldr	r2, [pc, #576]	@ (8000be4 <HAL_GPIO_Init+0x2b0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d85d      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 80009a6:	2b12      	cmp	r3, #18
 80009a8:	d82a      	bhi.n	8000a00 <HAL_GPIO_Init+0xcc>
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d859      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 80009ae:	a201      	add	r2, pc, #4	@ (adr r2, 80009b4 <HAL_GPIO_Init+0x80>)
 80009b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b4:	08000a2f 	.word	0x08000a2f
 80009b8:	08000a09 	.word	0x08000a09
 80009bc:	08000a1b 	.word	0x08000a1b
 80009c0:	08000a5d 	.word	0x08000a5d
 80009c4:	08000a63 	.word	0x08000a63
 80009c8:	08000a63 	.word	0x08000a63
 80009cc:	08000a63 	.word	0x08000a63
 80009d0:	08000a63 	.word	0x08000a63
 80009d4:	08000a63 	.word	0x08000a63
 80009d8:	08000a63 	.word	0x08000a63
 80009dc:	08000a63 	.word	0x08000a63
 80009e0:	08000a63 	.word	0x08000a63
 80009e4:	08000a63 	.word	0x08000a63
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a63 	.word	0x08000a63
 80009f0:	08000a63 	.word	0x08000a63
 80009f4:	08000a63 	.word	0x08000a63
 80009f8:	08000a11 	.word	0x08000a11
 80009fc:	08000a25 	.word	0x08000a25
 8000a00:	4a79      	ldr	r2, [pc, #484]	@ (8000be8 <HAL_GPIO_Init+0x2b4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a06:	e02c      	b.n	8000a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e029      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	3304      	adds	r3, #4
 8000a16:	623b      	str	r3, [r7, #32]
          break;
 8000a18:	e024      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	3308      	adds	r3, #8
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e01f      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e01a      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a36:	2304      	movs	r3, #4
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e013      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	611a      	str	r2, [r3, #16]
          break;
 8000a4e:	e009      	b.n	8000a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a50:	2308      	movs	r3, #8
 8000a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	615a      	str	r2, [r3, #20]
          break;
 8000a5a:	e003      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          break;
 8000a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2bff      	cmp	r3, #255	@ 0xff
 8000a68:	d801      	bhi.n	8000a6e <HAL_GPIO_Init+0x13a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	e001      	b.n	8000a72 <HAL_GPIO_Init+0x13e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3304      	adds	r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	2bff      	cmp	r3, #255	@ 0xff
 8000a78:	d802      	bhi.n	8000a80 <HAL_GPIO_Init+0x14c>
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	e002      	b.n	8000a86 <HAL_GPIO_Init+0x152>
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	3b08      	subs	r3, #8
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 80b1 	beq.w	8000c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8000bec <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8000bec <HAL_GPIO_Init+0x2b8>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bec <HAL_GPIO_Init+0x2b8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000acc:	4a48      	ldr	r2, [pc, #288]	@ (8000bf0 <HAL_GPIO_Init+0x2bc>)
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a40      	ldr	r2, [pc, #256]	@ (8000bf4 <HAL_GPIO_Init+0x2c0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d013      	beq.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d00d      	beq.n	8000b1c <HAL_GPIO_Init+0x1e8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3e      	ldr	r2, [pc, #248]	@ (8000bfc <HAL_GPIO_Init+0x2c8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d007      	beq.n	8000b18 <HAL_GPIO_Init+0x1e4>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c00 <HAL_GPIO_Init+0x2cc>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d101      	bne.n	8000b14 <HAL_GPIO_Init+0x1e0>
 8000b10:	2303      	movs	r3, #3
 8000b12:	e006      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b14:	2304      	movs	r3, #4
 8000b16:	e004      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b20:	2300      	movs	r3, #0
 8000b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b24:	f002 0203 	and.w	r2, r2, #3
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b32:	492f      	ldr	r1, [pc, #188]	@ (8000bf0 <HAL_GPIO_Init+0x2bc>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	492c      	ldr	r1, [pc, #176]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	608b      	str	r3, [r1, #8]
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4928      	ldr	r1, [pc, #160]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b74:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	4922      	ldr	r1, [pc, #136]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60cb      	str	r3, [r1, #12]
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	491e      	ldr	r1, [pc, #120]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4918      	ldr	r1, [pc, #96]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4914      	ldr	r1, [pc, #80]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d021      	beq.n	8000c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	490e      	ldr	r1, [pc, #56]	@ (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
 8000bd0:	e021      	b.n	8000c16 <HAL_GPIO_Init+0x2e2>
 8000bd2:	bf00      	nop
 8000bd4:	10320000 	.word	0x10320000
 8000bd8:	10310000 	.word	0x10310000
 8000bdc:	10220000 	.word	0x10220000
 8000be0:	10210000 	.word	0x10210000
 8000be4:	10120000 	.word	0x10120000
 8000be8:	10110000 	.word	0x10110000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40011400 	.word	0x40011400
 8000c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_GPIO_Init+0x304>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	4909      	ldr	r1, [pc, #36]	@ (8000c38 <HAL_GPIO_Init+0x304>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c18:	3301      	adds	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	fa22 f303 	lsr.w	r3, r2, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f47f ae8e 	bne.w	8000948 <HAL_GPIO_Init+0x14>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	372c      	adds	r7, #44	@ 0x2c
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40010400 	.word	0x40010400

08000c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c4c:	787b      	ldrb	r3, [r7, #1]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c58:	e003      	b.n	8000c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	041a      	lsls	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	611a      	str	r2, [r3, #16]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e272      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8087 	beq.w	8000d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c8c:	4b92      	ldr	r3, [pc, #584]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d00c      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c98:	4b8f      	ldr	r3, [pc, #572]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 030c 	and.w	r3, r3, #12
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d112      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
 8000ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b89      	ldr	r3, [pc, #548]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06c      	beq.n	8000d98 <HAL_RCC_OscConfig+0x12c>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d168      	bne.n	8000d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e24c      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x76>
 8000cd4:	4b80      	ldr	r3, [pc, #512]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e02e      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x98>
 8000cea:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b78      	ldr	r3, [pc, #480]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a77      	ldr	r2, [pc, #476]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e01d      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d0c:	d10c      	bne.n	8000d28 <HAL_RCC_OscConfig+0xbc>
 8000d0e:	4b72      	ldr	r3, [pc, #456]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a71      	ldr	r2, [pc, #452]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e00b      	b.n	8000d40 <HAL_RCC_OscConfig+0xd4>
 8000d28:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b68      	ldr	r3, [pc, #416]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a67      	ldr	r2, [pc, #412]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fce2 	bl	8000710 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fcde 	bl	8000710 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	@ 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e200      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0xe4>
 8000d6e:	e014      	b.n	8000d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fcce 	bl	8000710 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fcca 	bl	8000710 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	@ 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e1ec      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	4b53      	ldr	r3, [pc, #332]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x10c>
 8000d96:	e000      	b.n	8000d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d063      	beq.n	8000e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000db2:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d11c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x18c>
 8000dbe:	4b46      	ldr	r3, [pc, #280]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d116      	bne.n	8000df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	4b43      	ldr	r3, [pc, #268]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x176>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e1c0      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4939      	ldr	r1, [pc, #228]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df6:	e03a      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d020      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e00:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc83 	bl	8000710 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc7f 	bl	8000710 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e1a1      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4927      	ldr	r1, [pc, #156]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
 8000e40:	e015      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc62 	bl	8000710 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc5e 	bl	8000710 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e180      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d03a      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d019      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fc42 	bl	8000710 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc3e 	bl	8000710 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e160      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 face 	bl	8001450 <RCC_Delay>
 8000eb4:	e01c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fc28 	bl	8000710 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec2:	e00f      	b.n	8000ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc24 	bl	8000710 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d908      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e146      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	42420000 	.word	0x42420000
 8000ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	4b92      	ldr	r3, [pc, #584]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e9      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a6 	beq.w	800104a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f02:	4b8b      	ldr	r3, [pc, #556]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10d      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b88      	ldr	r3, [pc, #544]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a87      	ldr	r2, [pc, #540]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b85      	ldr	r3, [pc, #532]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b82      	ldr	r3, [pc, #520]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b7f      	ldr	r3, [pc, #508]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fbe5 	bl	8000710 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fbe1 	bl	8000710 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	@ 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e103      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b75      	ldr	r3, [pc, #468]	@ (8001134 <HAL_RCC_OscConfig+0x4c8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x312>
 8000f70:	4b6f      	ldr	r3, [pc, #444]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a6e      	ldr	r2, [pc, #440]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6213      	str	r3, [r2, #32]
 8000f7c:	e02d      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x334>
 8000f86:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a69      	ldr	r2, [pc, #420]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b67      	ldr	r3, [pc, #412]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a66      	ldr	r2, [pc, #408]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	e01c      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x356>
 8000fa8:	4b61      	ldr	r3, [pc, #388]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a60      	ldr	r2, [pc, #384]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	e00b      	b.n	8000fda <HAL_RCC_OscConfig+0x36e>
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6213      	str	r3, [r2, #32]
 8000fce:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a57      	ldr	r2, [pc, #348]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d015      	beq.n	800100e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb95 	bl	8000710 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb91 	bl	8000710 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0b1      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001000:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ee      	beq.n	8000fea <HAL_RCC_OscConfig+0x37e>
 800100c:	e014      	b.n	8001038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fb7f 	bl	8000710 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	e00a      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fb7b 	bl	8000710 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e09b      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102c:	4b40      	ldr	r3, [pc, #256]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ee      	bne.n	8001016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103e:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a3b      	ldr	r2, [pc, #236]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8087 	beq.w	8001162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d061      	beq.n	8001124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d146      	bne.n	80010f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001068:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fb4f 	bl	8000710 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fb4b 	bl	8000710 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e06d      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f0      	bne.n	8001076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800109c:	d108      	bne.n	80010b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109e:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4921      	ldr	r1, [pc, #132]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a19      	ldr	r1, [r3, #32]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	430b      	orrs	r3, r1
 80010c2:	491b      	ldr	r1, [pc, #108]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb1f 	bl	8000710 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fb1b 	bl	8000710 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e03d      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x46a>
 80010f4:	e035      	b.n	8001162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_RCC_OscConfig+0x4cc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb08 	bl	8000710 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001104:	f7ff fb04 	bl	8000710 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e026      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x498>
 8001122:	e01e      	b.n	8001162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d107      	bne.n	800113c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e019      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
 8001130:	40021000 	.word	0x40021000
 8001134:	40007000 	.word	0x40007000
 8001138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_RCC_OscConfig+0x500>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	429a      	cmp	r2, r3
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0d0      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001184:	4b6a      	ldr	r3, [pc, #424]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d910      	bls.n	80011b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b67      	ldr	r3, [pc, #412]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 0207 	bic.w	r2, r3, #7
 800119a:	4965      	ldr	r1, [pc, #404]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b63      	ldr	r3, [pc, #396]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0b8      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011cc:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f0:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	494d      	ldr	r1, [pc, #308]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d040      	beq.n	8001290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e07f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e073      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06b      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124e:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 0203 	bic.w	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4936      	ldr	r1, [pc, #216]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001260:	f7ff fa56 	bl	8000710 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	e00a      	b.n	800127e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001268:	f7ff fa52 	bl	8000710 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e053      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 020c 	and.w	r2, r3, #12
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	429a      	cmp	r2, r3
 800128e:	d1eb      	bne.n	8001268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d210      	bcs.n	80012c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0207 	bic.w	r2, r3, #7
 80012a6:	4922      	ldr	r1, [pc, #136]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e032      	b.n	8001326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4916      	ldr	r1, [pc, #88]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	490e      	ldr	r1, [pc, #56]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fe:	f000 f821 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	490a      	ldr	r1, [pc, #40]	@ (8001338 <HAL_RCC_ClockConfig+0x1c8>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a09      	ldr	r2, [pc, #36]	@ (800133c <HAL_RCC_ClockConfig+0x1cc>)
 8001318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_RCC_ClockConfig+0x1d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f9b4 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000
 8001334:	40021000 	.word	0x40021000
 8001338:	08001e68 	.word	0x08001e68
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x30>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x36>
 8001372:	e027      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e027      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0c5b      	lsrs	r3, r3, #17
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 80013a6:	fb03 f202 	mul.w	r2, r3, r2
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e004      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	613b      	str	r3, [r7, #16]
      break;
 80013c2:	e002      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x98>)
 80013c6:	613b      	str	r3, [r7, #16]
      break;
 80013c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ca:	693b      	ldr	r3, [r7, #16]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	007a1200 	.word	0x007a1200
 80013e0:	08001e80 	.word	0x08001e80
 80013e4:	08001e90 	.word	0x08001e90
 80013e8:	003d0900 	.word	0x003d0900

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <HAL_RCC_GetHCLKFreq+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000

08001400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001404:	f7ff fff2 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	4903      	ldr	r1, [pc, #12]	@ (8001424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	08001e78 	.word	0x08001e78

08001428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800142c:	f7ff ffde 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0adb      	lsrs	r3, r3, #11
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	4903      	ldr	r1, [pc, #12]	@ (800144c <HAL_RCC_GetPCLK2Freq+0x24>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	08001e78 	.word	0x08001e78

08001450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <RCC_Delay+0x34>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <RCC_Delay+0x38>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a5b      	lsrs	r3, r3, #9
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800146c:	bf00      	nop
  }
  while (Delay --);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	60fa      	str	r2, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <RCC_Delay+0x1c>
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e076      	b.n	800158c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80014ae:	d009      	beq.n	80014c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
 80014b6:	e005      	b.n	80014c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe ffdc 	bl	800049c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001548:	ea42 0103 	orr.w	r1, r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001550:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	0c1a      	lsrs	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f002 0204 	and.w	r2, r2, #4
 800156a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800157a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015a4:	f7ff f8b4 	bl	8000710 <HAL_GetTick>
 80015a8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	e12a      	b.n	8001814 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_SPI_Transmit+0x36>
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e122      	b.n	8001814 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_SPI_Transmit+0x48>
 80015d8:	2302      	movs	r3, #2
 80015da:	e11b      	b.n	8001814 <HAL_SPI_Transmit+0x280>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2203      	movs	r2, #3
 80015e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800162a:	d10f      	bne.n	800164c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800163a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800164a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001656:	2b40      	cmp	r3, #64	@ 0x40
 8001658:	d007      	beq.n	800166a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001672:	d152      	bne.n	800171a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_SPI_Transmit+0xee>
 800167c:	8b7b      	ldrh	r3, [r7, #26]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d145      	bne.n	800170e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	1c9a      	adds	r2, r3, #2
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80016a6:	e032      	b.n	800170e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d112      	bne.n	80016dc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	1c9a      	adds	r2, r3, #2
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80016da:	e018      	b.n	800170e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016dc:	f7ff f818 	bl	8000710 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d803      	bhi.n	80016f4 <HAL_SPI_Transmit+0x160>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d102      	bne.n	80016fa <HAL_SPI_Transmit+0x166>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e082      	b.n	8001814 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1c7      	bne.n	80016a8 <HAL_SPI_Transmit+0x114>
 8001718:	e053      	b.n	80017c2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_SPI_Transmit+0x194>
 8001722:	8b7b      	ldrh	r3, [r7, #26]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d147      	bne.n	80017b8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	330c      	adds	r3, #12
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800174e:	e033      	b.n	80017b8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d113      	bne.n	8001786 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	330c      	adds	r3, #12
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001784:	e018      	b.n	80017b8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001786:	f7fe ffc3 	bl	8000710 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d803      	bhi.n	800179e <HAL_SPI_Transmit+0x20a>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d102      	bne.n	80017a4 <HAL_SPI_Transmit+0x210>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e02d      	b.n	8001814 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1c6      	bne.n	8001750 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f8b0 	bl	800192c <SPI_EndRxTxTransaction>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2220      	movs	r2, #32
 80017d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001812:	2300      	movs	r3, #0
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800182c:	f7fe ff70 	bl	8000710 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800183c:	f7fe ff68 	bl	8000710 <HAL_GetTick>
 8001840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	015b      	lsls	r3, r3, #5
 8001848:	0d1b      	lsrs	r3, r3, #20
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001852:	e054      	b.n	80018fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185a:	d050      	beq.n	80018fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800185c:	f7fe ff58 	bl	8000710 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	d902      	bls.n	8001872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d13d      	bne.n	80018ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800188a:	d111      	bne.n	80018b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001894:	d004      	beq.n	80018a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800189e:	d107      	bne.n	80018b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018b8:	d10f      	bne.n	80018da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e017      	b.n	800191e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4013      	ands	r3, r2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	bf0c      	ite	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	2300      	movne	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	429a      	cmp	r2, r3
 800191a:	d19b      	bne.n	8001854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2201      	movs	r2, #1
 8001940:	2102      	movs	r1, #2
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff ff6a 	bl	800181c <SPI_WaitFlagStateUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e013      	b.n	8001986 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	2180      	movs	r1, #128	@ 0x80
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff ff57 	bl	800181c <SPI_WaitFlagStateUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e000      	b.n	8001986 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e04a      	b.n	8001a36 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe fdbb 	bl	8000530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2224      	movs	r2, #36	@ 0x24
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f97a 	bl	8001ccc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80019f6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0208 	orr.w	r2, r2, #8
 8001a06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08a      	sub	sp, #40	@ 0x28
 8001a42:	af02      	add	r7, sp, #8
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d175      	bne.n	8001b4a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_UART_Transmit+0x2c>
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06e      	b.n	8001b4c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2221      	movs	r2, #33	@ 0x21
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a7c:	f7fe fe48 	bl	8000710 <HAL_GetTick>
 8001a80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a96:	d108      	bne.n	8001aaa <HAL_UART_Transmit+0x6c>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d104      	bne.n	8001aaa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	e003      	b.n	8001ab2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab2:	e02e      	b.n	8001b12 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2180      	movs	r1, #128	@ 0x80
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f848 	bl	8001b54 <UART_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e03a      	b.n	8001b4c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3302      	adds	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	e007      	b.n	8001b04 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1cb      	bne.n	8001ab4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f814 	bl	8001b54 <UART_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e006      	b.n	8001b4c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b64:	e03b      	b.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d037      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6e:	f7fe fdcf 	bl	8000710 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e03a      	b.n	8001bfe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d023      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b80      	cmp	r3, #128	@ 0x80
 8001b9a:	d020      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ba0:	d01d      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d116      	bne.n	8001bde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f81d 	bl	8001c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d0b4      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b095      	sub	sp, #84	@ 0x54
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	330c      	adds	r3, #12
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c18:	e853 3f00 	ldrex	r3, [r3]
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c36:	e841 2300 	strex	r3, r2, [r1]
 8001c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e5      	bne.n	8001c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3314      	adds	r3, #20
 8001c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	e853 3f00 	ldrex	r3, [r3]
 8001c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c6a:	e841 2300 	strex	r3, r2, [r1]
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e5      	bne.n	8001c42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d119      	bne.n	8001cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	330c      	adds	r3, #12
 8001c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	e853 3f00 	ldrex	r3, [r3]
 8001c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f023 0310 	bic.w	r3, r3, #16
 8001c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c9e:	61ba      	str	r2, [r7, #24]
 8001ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	e841 2300 	strex	r3, r2, [r1]
 8001caa:	613b      	str	r3, [r7, #16]
   return(result);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e5      	bne.n	8001c7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cc0:	bf00      	nop
 8001cc2:	3754      	adds	r7, #84	@ 0x54
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d06:	f023 030c 	bic.w	r3, r3, #12
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001de0 <UART_SetConfig+0x114>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d34:	f7ff fb78 	bl	8001428 <HAL_RCC_GetPCLK2Freq>
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	e002      	b.n	8001d42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d3c:	f7ff fb60 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8001d40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4a22      	ldr	r2, [pc, #136]	@ (8001de4 <UART_SetConfig+0x118>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	0119      	lsls	r1, r3, #4
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <UART_SetConfig+0x118>)
 8001d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2064      	movs	r0, #100	@ 0x64
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3332      	adds	r3, #50	@ 0x32
 8001d8c:	4a15      	ldr	r2, [pc, #84]	@ (8001de4 <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d98:	4419      	add	r1, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	441a      	add	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <UART_SetConfig+0x118>)
 8001db2:	fba3 0302 	umull	r0, r3, r3, r2
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2064      	movs	r0, #100	@ 0x64
 8001dba:	fb00 f303 	mul.w	r3, r0, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	3332      	adds	r3, #50	@ 0x32
 8001dc4:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	440a      	add	r2, r1
 8001dd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013800 	.word	0x40013800
 8001de4:	51eb851f 	.word	0x51eb851f

08001de8 <memset>:
 8001de8:	4603      	mov	r3, r0
 8001dea:	4402      	add	r2, r0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d100      	bne.n	8001df2 <memset+0xa>
 8001df0:	4770      	bx	lr
 8001df2:	f803 1b01 	strb.w	r1, [r3], #1
 8001df6:	e7f9      	b.n	8001dec <memset+0x4>

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	4d0c      	ldr	r5, [pc, #48]	@ (8001e30 <__libc_init_array+0x38>)
 8001dfe:	4c0d      	ldr	r4, [pc, #52]	@ (8001e34 <__libc_init_array+0x3c>)
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	f000 f81a 	bl	8001e40 <_init>
 8001e0c:	2600      	movs	r6, #0
 8001e0e:	4d0a      	ldr	r5, [pc, #40]	@ (8001e38 <__libc_init_array+0x40>)
 8001e10:	4c0a      	ldr	r4, [pc, #40]	@ (8001e3c <__libc_init_array+0x44>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08001e9c 	.word	0x08001e9c
 8001e34:	08001e9c 	.word	0x08001e9c
 8001e38:	08001e9c 	.word	0x08001e9c
 8001e3c:	08001ea0 	.word	0x08001ea0

08001e40 <_init>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	bf00      	nop
 8001e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e46:	bc08      	pop	{r3}
 8001e48:	469e      	mov	lr, r3
 8001e4a:	4770      	bx	lr

08001e4c <_fini>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr
