
test_led_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006418  08006418  00007418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  000081ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  000081ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08006830  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001ec  08006a1c  000081ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08006a1c  00008460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cefc  00000000  00000000  00008215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4c  00000000  00000000  00015111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00016e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b33  00000000  00000000  00017cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001895a  00000000  00000000  000187e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f433  00000000  00000000  0003113d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da9f  00000000  00000000  00040570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce00f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e8c  00000000  00000000  000ce054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d2ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080063fc 	.word	0x080063fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080063fc 	.word	0x080063fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ConvertNumberToDigits>:
    0x78, // 7
    0x00, // 8
    0x10  // 9
};

void ConvertNumberToDigits(uint16_t number, uint8_t *digits){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	80fb      	strh	r3, [r7, #6]
    digits[3] = digit_codes[number % 10];
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <ConvertNumberToDigits+0xbc>)
 8000d94:	fba3 1302 	umull	r1, r3, r3, r2
 8000d98:	08d9      	lsrs	r1, r3, #3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <ConvertNumberToDigits+0xc0>)
 8000dae:	5c52      	ldrb	r2, [r2, r1]
 8000db0:	701a      	strb	r2, [r3, #0]
    digits[2] = digit_codes[(number / 10) % 10];
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4a22      	ldr	r2, [pc, #136]	@ (8000e40 <ConvertNumberToDigits+0xbc>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	08db      	lsrs	r3, r3, #3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <ConvertNumberToDigits+0xbc>)
 8000dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc4:	08d9      	lsrs	r1, r3, #3
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e44 <ConvertNumberToDigits+0xc0>)
 8000dda:	5c52      	ldrb	r2, [r2, r1]
 8000ddc:	701a      	strb	r2, [r3, #0]
    digits[1] = dp[(number / 100) % 10];
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <ConvertNumberToDigits+0xc4>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <ConvertNumberToDigits+0xbc>)
 8000dec:	fba3 1302 	umull	r1, r3, r3, r2
 8000df0:	08d9      	lsrs	r1, r3, #3
 8000df2:	460b      	mov	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <ConvertNumberToDigits+0xc8>)
 8000e06:	5c52      	ldrb	r2, [r2, r1]
 8000e08:	701a      	strb	r2, [r3, #0]
    digits[0] = digit_codes[(number / 1000) % 10];
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <ConvertNumberToDigits+0xcc>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	099b      	lsrs	r3, r3, #6
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <ConvertNumberToDigits+0xbc>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	08d9      	lsrs	r1, r3, #3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <ConvertNumberToDigits+0xc0>)
 8000e2e:	5c9a      	ldrb	r2, [r3, r2]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	20000000 	.word	0x20000000
 8000e48:	51eb851f 	.word	0x51eb851f
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <SendToLED_SPI>:

void SendToLED_SPI(uint8_t* digits){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    // LOAD xuống thấp trước khi gửi dữ liệu
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <SendToLED_SPI+0x50>)
 8000e62:	f001 f8d4 	bl	800200e <HAL_GPIO_WritePin>

    // Gửi lần lượt 4 byte (4 chữ số) qua SPI
    for (int i = 0; i < 4; i++){
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e00e      	b.n	8000e8a <SendToLED_SPI+0x36>
        HAL_SPI_Transmit(&hspi1, &digits[3 - i], 1, HAL_MAX_DELAY); // Gửi byte từ trái sang phải
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f1c3 0303 	rsb	r3, r3, #3
 8000e72:	461a      	mov	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	1899      	adds	r1, r3, r2
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <SendToLED_SPI+0x54>)
 8000e80:	f001 fd72 	bl	8002968 <HAL_SPI_Transmit>
    for (int i = 0; i < 4; i++){
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	dded      	ble.n	8000e6c <SendToLED_SPI+0x18>
    }

    // LOAD lên cao để chốt dữ liệu hiển thị
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <SendToLED_SPI+0x50>)
 8000e96:	f001 f8ba 	bl	800200e <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	20000208 	.word	0x20000208

08000eac <delay>:

void delay(uint16_t time){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COUNTER(&htim1,0);
 8000eb6:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <delay+0x2c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
	 while((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 8000ebe:	bf00      	nop
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <delay+0x2c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d3f9      	bcc.n	8000ec0 <delay+0x14>
 }
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000260 	.word	0x20000260

08000edc <SET_PIN_OUTPUT>:
 float RH, TEMP;
 float Temperature = 0;
 float Humidity = 0;
 uint8_t Presence = 0;

 void SET_PIN_OUTPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2302      	movs	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <SET_PIN_OUTPUT+0x40>)
 8000f0e:	f000 fee3 	bl	8001cd8 <HAL_GPIO_Init>
 }
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010800 	.word	0x40010800

08000f20 <SET_PIN_INPUT>:

 void SET_PIN_INPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <SET_PIN_INPUT+0x3c>)
 8000f4e:	f000 fec3 	bl	8001cd8 <HAL_GPIO_Init>
 }
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800

08000f60 <DHT11_Start>:

 void DHT11_Start (void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
 	SET_PIN_OUTPUT(DHT11_PORT, DHT11_PIN);
 8000f64:	2102      	movs	r1, #2
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <DHT11_Start+0x3c>)
 8000f68:	f7ff ffb8 	bl	8000edc <SET_PIN_OUTPUT>
 	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <DHT11_Start+0x3c>)
 8000f72:	f001 f84c 	bl	800200e <HAL_GPIO_WritePin>
 	delay(18000);   // wait for 18ms
 8000f76:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000f7a:	f7ff ff97 	bl	8000eac <delay>
 	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <DHT11_Start+0x3c>)
 8000f84:	f001 f843 	bl	800200e <HAL_GPIO_WritePin>
 	delay(20);
 8000f88:	2014      	movs	r0, #20
 8000f8a:	f7ff ff8f 	bl	8000eac <delay>
 	SET_PIN_INPUT(DHT11_PORT, DHT11_PIN);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <DHT11_Start+0x3c>)
 8000f92:	f7ff ffc5 	bl	8000f20 <SET_PIN_INPUT>
 }
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <Check_Response>:

  uint8_t Check_Response (void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 	uint8_t Response = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]
 	delay (40);
 8000faa:	2028      	movs	r0, #40	@ 0x28
 8000fac:	f7ff ff7e 	bl	8000eac <delay>
 	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))){
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <Check_Response+0x58>)
 8000fb4:	f001 f814 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10e      	bne.n	8000fdc <Check_Response+0x3c>
 		delay (80);
 8000fbe:	2050      	movs	r0, #80	@ 0x50
 8000fc0:	f7ff ff74 	bl	8000eac <delay>
 		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <Check_Response+0x58>)
 8000fc8:	f001 f80a 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <Check_Response+0x38>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	e001      	b.n	8000fdc <Check_Response+0x3c>
 		else Response = -1;  //255
 8000fd8:	23ff      	movs	r3, #255	@ 0xff
 8000fda:	71fb      	strb	r3, [r7, #7]
 	}
 	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // doi pin xung thap
 8000fdc:	bf00      	nop
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <Check_Response+0x58>)
 8000fe2:	f000 fffd 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f8      	bne.n	8000fde <Check_Response+0x3e>

 	return Response;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40010800 	.word	0x40010800

08000ffc <DHT11_Read>:

 uint8_t DHT11_Read (void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 	uint8_t i, j;
 	for (j=0; j<8; j++){
 8001002:	2300      	movs	r3, #0
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	e037      	b.n	8001078 <DHT11_Read+0x7c>
 		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001008:	bf00      	nop
 800100a:	2102      	movs	r1, #2
 800100c:	481e      	ldr	r0, [pc, #120]	@ (8001088 <DHT11_Read+0x8c>)
 800100e:	f000 ffe7 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f8      	beq.n	800100a <DHT11_Read+0xe>
 		delay (40);   // wait for 40 us, cho trong 40us, neu Readdht11 ma xuong 0 --> nhan bit 0, neu sau 40us ma chua xuong 0--> nhan bit 1
 8001018:	2028      	movs	r0, #40	@ 0x28
 800101a:	f7ff ff47 	bl	8000eac <delay>
 		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800101e:	2102      	movs	r1, #2
 8001020:	4819      	ldr	r0, [pc, #100]	@ (8001088 <DHT11_Read+0x8c>)
 8001022:	f000 ffdd 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10e      	bne.n	800104a <DHT11_Read+0x4e>
 		{
 			i&= ~(1<<(7-j));   // write 0
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2201      	movs	r2, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	b25a      	sxtb	r2, r3
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4013      	ands	r3, r2
 8001044:	b25b      	sxtb	r3, r3
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e00b      	b.n	8001062 <DHT11_Read+0x66>
 		}
 		else {
 			i|= (1<<(7-j));
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	f1c3 0307 	rsb	r3, r3, #7
 8001050:	2201      	movs	r2, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	b25a      	sxtb	r2, r3
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4313      	orrs	r3, r2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	71fb      	strb	r3, [r7, #7]
 		}			// pin high , write 1
 		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001062:	bf00      	nop
 8001064:	2102      	movs	r1, #2
 8001066:	4808      	ldr	r0, [pc, #32]	@ (8001088 <DHT11_Read+0x8c>)
 8001068:	f000 ffba 	bl	8001fe0 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f8      	bne.n	8001064 <DHT11_Read+0x68>
 	for (j=0; j<8; j++){
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	3301      	adds	r3, #1
 8001076:	71bb      	strb	r3, [r7, #6]
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	2b07      	cmp	r3, #7
 800107c:	d9c4      	bls.n	8001008 <DHT11_Read+0xc>
 	}
 	return i;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 }
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010800 	.word	0x40010800

0800108c <Task1_Get_Temperature>:

 float Task1_Get_Temperature(void) {
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
	    char msg[] = "Task 1 is running\r\n";
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <Task1_Get_Temperature+0xc4>)
 8001094:	1d3c      	adds	r4, r7, #4
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f854 	bl	8000150 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	1d39      	adds	r1, r7, #4
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	4828      	ldr	r0, [pc, #160]	@ (8001154 <Task1_Get_Temperature+0xc8>)
 80010b4:	f002 f968 	bl	8003388 <HAL_UART_Transmit>
     DHT11_Start();                     // Kích hoạt giao tiếp với DHT11
 80010b8:	f7ff ff52 	bl	8000f60 <DHT11_Start>
     Presence = Check_Response();       // Kiểm tra phản hồi từ DHT11
 80010bc:	f7ff ff70 	bl	8000fa0 <Check_Response>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <Task1_Get_Temperature+0xcc>)
 80010c6:	701a      	strb	r2, [r3, #0]
         R1 = DHT11_Read();             // Đọc phần nguyên độ ẩm
 80010c8:	f7ff ff98 	bl	8000ffc <DHT11_Read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <Task1_Get_Temperature+0xd0>)
 80010d2:	701a      	strb	r2, [r3, #0]
         R2 = DHT11_Read();             // Đọc phần thập phân độ ẩm
 80010d4:	f7ff ff92 	bl	8000ffc <DHT11_Read>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <Task1_Get_Temperature+0xd4>)
 80010de:	701a      	strb	r2, [r3, #0]
         T1 = DHT11_Read();             // Đọc phần nguyên nhiệt độ
 80010e0:	f7ff ff8c 	bl	8000ffc <DHT11_Read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <Task1_Get_Temperature+0xd8>)
 80010ea:	701a      	strb	r2, [r3, #0]
         T2 = DHT11_Read();             // Đọc phần thập phân nhiệt độ
 80010ec:	f7ff ff86 	bl	8000ffc <DHT11_Read>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <Task1_Get_Temperature+0xdc>)
 80010f6:	701a      	strb	r2, [r3, #0]
         sum = DHT11_Read();            // Đọc checksum để kiểm tra tính hợp lệ
 80010f8:	f7ff ff80 	bl	8000ffc <DHT11_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <Task1_Get_Temperature+0xe0>)
 8001102:	801a      	strh	r2, [r3, #0]

         TEMP = T1 + T2 / 10.0;         // Tính nhiệt độ (phần nguyên + phần thập phân)
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <Task1_Get_Temperature+0xd8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f97b 	bl	8000404 <__aeabi_i2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <Task1_Get_Temperature+0xdc>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f974 	bl	8000404 <__aeabi_i2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <Task1_Get_Temperature+0xe4>)
 8001122:	f7ff fb03 	bl	800072c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f81d 	bl	800016c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fca5 	bl	8000a88 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <Task1_Get_Temperature+0xe8>)
 8001142:	6013      	str	r3, [r2, #0]
         return TEMP;                   // Trả về giá trị nhiệt độ
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <Task1_Get_Temperature+0xe8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 }
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	08006418 	.word	0x08006418
 8001154:	200002a8 	.word	0x200002a8
 8001158:	20000308 	.word	0x20000308
 800115c:	200002f0 	.word	0x200002f0
 8001160:	200002f1 	.word	0x200002f1
 8001164:	200002f2 	.word	0x200002f2
 8001168:	200002f3 	.word	0x200002f3
 800116c:	200002f4 	.word	0x200002f4
 8001170:	40240000 	.word	0x40240000
 8001174:	200002fc 	.word	0x200002fc

08001178 <Task2_Get_Humidity>:

 float Task2_Get_Humidity(void) {
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
	    char msg[] = "Task 2 is running\r\n";
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <Task2_Get_Humidity+0x48>)
 8001180:	1d3c      	adds	r4, r7, #4
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4618      	mov	r0, r3
 8001190:	f7fe ffde 	bl	8000150 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	1d39      	adds	r1, r7, #4
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <Task2_Get_Humidity+0x4c>)
 80011a0:	f002 f8f2 	bl	8003388 <HAL_UART_Transmit>
         //R2 = DHT11_Read();             // Đọc phần thập phân độ ẩm
         //T1 = DHT11_Read();             // Đọc phần nguyên nhiệt độ
         //T2 = DHT11_Read();             // Đọc phần thập phân nhiệt độ
         //sum = DHT11_Read();            // Đọc checksum để kiểm tra tính hợp lệ

         RH = R1;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <Task2_Get_Humidity+0x50>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd73 	bl	8000c94 <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <Task2_Get_Humidity+0x54>)
 80011b2:	6013      	str	r3, [r2, #0]
         return RH;
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <Task2_Get_Humidity+0x54>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 }
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	0800642c 	.word	0x0800642c
 80011c4:	200002a8 	.word	0x200002a8
 80011c8:	200002f0 	.word	0x200002f0
 80011cc:	200002f8 	.word	0x200002f8

080011d0 <Task3_Send_Temp_Humidity>:

 void Task3_Send_Temp_Humidity(UART_HandleTypeDef *huart, float Temperature, float Humidity) {
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	    char msg[] = "Task 3 is running\r\n";
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <Task3_Send_Temp_Humidity+0xb4>)
 80011de:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7fe ffad 	bl	8000150 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	4821      	ldr	r0, [pc, #132]	@ (8001288 <Task3_Send_Temp_Humidity+0xb8>)
 8001204:	f002 f8c0 	bl	8003388 <HAL_UART_Transmit>
     char buffer[50];

     // Gửi nhiệt độ
     snprintf(buffer, sizeof(buffer), "Temp: %.1f \n", Temperature);
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f7ff f90d 	bl	8000428 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f107 0010 	add.w	r0, r7, #16
 8001216:	e9cd 2300 	strd	r2, r3, [sp]
 800121a:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <Task3_Send_Temp_Humidity+0xbc>)
 800121c:	2132      	movs	r1, #50	@ 0x32
 800121e:	f002 ffa5 	bl	800416c <sniprintf>
     HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ff92 	bl	8000150 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0110 	add.w	r1, r7, #16
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f002 f8a5 	bl	8003388 <HAL_UART_Transmit>
     //HAL_Delay(1000);

     // Gửi độ ẩm
     snprintf(buffer, sizeof(buffer), "Hum: %.1f \n", Humidity);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff f8f2 	bl	8000428 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	f107 0010 	add.w	r0, r7, #16
 800124c:	e9cd 2300 	strd	r2, r3, [sp]
 8001250:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <Task3_Send_Temp_Humidity+0xc0>)
 8001252:	2132      	movs	r1, #50	@ 0x32
 8001254:	f002 ff8a 	bl	800416c <sniprintf>
     HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f7fe ff77 	bl	8000150 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f107 0110 	add.w	r1, r7, #16
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f002 f88a 	bl	8003388 <HAL_UART_Transmit>
     HAL_Delay(2000);
 8001274:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001278:	f000 fc26 	bl	8001ac8 <HAL_Delay>
 }
 800127c:	bf00      	nop
 800127e:	3758      	adds	r7, #88	@ 0x58
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	0800645c 	.word	0x0800645c
 8001288:	200002a8 	.word	0x200002a8
 800128c:	08006440 	.word	0x08006440
 8001290:	08006450 	.word	0x08006450

08001294 <Task4_Display_Temp_Humidity>:

 void Task4_Display_Temp_Humidity(float Temperature, float Humidity) {
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	    char msg[] = "Task 4 is running\r\n";
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <Task4_Display_Temp_Humidity+0x84>)
 80012a0:	f107 0410 	add.w	r4, r7, #16
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0110 	add.w	r1, r7, #16
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	4815      	ldr	r0, [pc, #84]	@ (800131c <Task4_Display_Temp_Humidity+0x88>)
 80012c6:	f002 f85f 	bl	8003388 <HAL_UART_Transmit>
     uint16_t temp_humi_display;
     uint8_t digits[4]; // Mảng lưu từng chữ số

     // Chuyển đổi nhiệt độ và độ ẩm thành giá trị nguyên để hiển thị
     temp_humi_display = (uint8_t)Temperature * 100 + (uint8_t)Humidity;
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fd3a 	bl	8000d44 <__aeabi_f2uiz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4413      	add	r3, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	0091      	lsls	r1, r2, #2
 80012de:	461a      	mov	r2, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b29c      	uxth	r4, r3
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f7ff fd2b 	bl	8000d44 <__aeabi_f2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4423      	add	r3, r4
 80012f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

     // Tách từng chữ số từ giá trị
     ConvertNumberToDigits(temp_humi_display, digits);
 80012f6:	f107 020c 	add.w	r2, r7, #12
 80012fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd40 	bl	8000d84 <ConvertNumberToDigits>

     // Gửi dữ liệu đến LED thông qua giao tiếp SPI
     SendToLED_SPI(digits);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fda3 	bl	8000e54 <SendToLED_SPI>
 }
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
 8001316:	bf00      	nop
 8001318:	08006470 	.word	0x08006470
 800131c:	200002a8 	.word	0x200002a8

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fb6e 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f830 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f924 	bl	8001578 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001330:	f000 f872 	bl	8001418 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001334:	f000 f8a6 	bl	8001484 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001338:	f000 f8f4 	bl	8001524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <main+0x5c>)
 800133e:	f001 fd5f 	bl	8002e00 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temperature = Task1_Get_Temperature();
 8001342:	f7ff fea3 	bl	800108c <Task1_Get_Temperature>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <main+0x60>)
 800134a:	6013      	str	r3, [r2, #0]

	  Humidity = Task2_Get_Humidity();
 800134c:	f7ff ff14 	bl	8001178 <Task2_Get_Humidity>
 8001350:	4603      	mov	r3, r0
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <main+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

	  Task3_Send_Temp_Humidity(&huart1, Temperature, Humidity);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <main+0x60>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <main+0x64>)
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	4809      	ldr	r0, [pc, #36]	@ (8001388 <main+0x68>)
 8001362:	f7ff ff35 	bl	80011d0 <Task3_Send_Temp_Humidity>

	  Task4_Display_Temp_Humidity(Temperature, Humidity);
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <main+0x60>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <main+0x64>)
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff8f 	bl	8001294 <Task4_Display_Temp_Humidity>
	  Temperature = Task1_Get_Temperature();
 8001376:	bf00      	nop
 8001378:	e7e3      	b.n	8001342 <main+0x22>
 800137a:	bf00      	nop
 800137c:	20000260 	.word	0x20000260
 8001380:	20000300 	.word	0x20000300
 8001384:	20000304 	.word	0x20000304
 8001388:	200002a8 	.word	0x200002a8

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	@ 0x40
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	@ 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 ff5d 	bl	800425a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80013b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80013cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80013d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fe32 	bl	8002040 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80013e2:	f000 f915 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 f8a0 	bl	8002544 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140a:	f000 f901 	bl	8001610 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3740      	adds	r7, #64	@ 0x40
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_SPI1_Init+0x64>)
 800141e:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <MX_SPI1_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_SPI1_Init+0x64>)
 8001424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_SPI1_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_SPI1_Init+0x64>)
 8001444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SPI1_Init+0x64>)
 800144c:	2218      	movs	r2, #24
 800144e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_SPI1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SPI1_Init+0x64>)
 8001464:	220a      	movs	r2, #10
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_SPI1_Init+0x64>)
 800146a:	f001 f9f9 	bl	8002860 <HAL_SPI_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001474:	f000 f8cc 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000208 	.word	0x20000208
 8001480:	40013000 	.word	0x40013000

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <MX_TIM1_Init+0x98>)
 80014a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001520 <MX_TIM1_Init+0x9c>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_TIM1_Init+0x98>)
 80014a8:	220f      	movs	r2, #15
 80014aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_TIM1_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_TIM1_Init+0x98>)
 80014b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_TIM1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_TIM1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_TIM1_Init+0x98>)
 80014ce:	f001 fc48 	bl	8002d62 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014d8:	f000 f89a 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_TIM1_Init+0x98>)
 80014ea:	f001 fcd3 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014f4:	f000 f88c 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_TIM1_Init+0x98>)
 8001506:	f001 fe91 	bl	800322c <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 f87e 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000260 	.word	0x20000260
 8001520:	40012c00 	.word	0x40012c00

08001524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART1_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800155c:	f001 fec4 	bl	80032e8 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 f853 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002a8 	.word	0x200002a8
 8001574:	40013800 	.word	0x40013800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <MX_GPIO_Init+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <MX_GPIO_Init+0x90>)
 8001592:	f043 0320 	orr.w	r3, r3, #32
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_GPIO_Init+0x90>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2112      	movs	r1, #18
 80015c0:	4812      	ldr	r0, [pc, #72]	@ (800160c <MX_GPIO_Init+0x94>)
 80015c2:	f000 fd24 	bl	800200e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0x94>)
 80015de:	f000 fb7b 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e2:	2310      	movs	r3, #16
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_GPIO_Init+0x94>)
 80015fa:	f000 fb6d 	bl	8001cd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40010800 	.word	0x40010800

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <Error_Handler+0x8>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0e      	ldr	r2, [pc, #56]	@ (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_MspInit+0x60>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_MspInit+0x60>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <HAL_SPI_MspInit+0x70>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d123      	bne.n	80016e8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <HAL_SPI_MspInit+0x74>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016d0:	23a0      	movs	r3, #160	@ 0xa0
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <HAL_SPI_MspInit+0x78>)
 80016e4:	f000 faf8 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013000 	.word	0x40013000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_TIM_Base_MspInit+0x34>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_TIM_Base_MspInit+0x38>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_TIM_Base_MspInit+0x38>)
 8001714:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001718:	6193      	str	r3, [r2, #24]
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_TIM_Base_MspInit+0x38>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <HAL_UART_MspInit+0x8c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d131      	bne.n	80017bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_UART_MspInit+0x90>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <HAL_UART_MspInit+0x94>)
 800179e:	f000 fa9b 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <HAL_UART_MspInit+0x94>)
 80017b8:	f000 fa8e 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010800 	.word	0x40010800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f936 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <_kill>:

int _kill(int pid, int sig)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001840:	f002 fd5e 	bl	8004300 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	2216      	movs	r2, #22
 8001848:	601a      	str	r2, [r3, #0]
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_exit>:

void _exit (int status)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800185e:	f04f 31ff 	mov.w	r1, #4294967295
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffe7 	bl	8001836 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <_exit+0x12>

0800186c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
  }

  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
  }
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001904:	605a      	str	r2, [r3, #4]
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f002 fcc6 	bl	8004300 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20005000 	.word	0x20005000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	2000030c 	.word	0x2000030c
 80019a8:	20000460 	.word	0x20000460

080019ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff fff8 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019be:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d4:	4c09      	ldr	r4, [pc, #36]	@ (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f002 fc93 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff fc9b 	bl	8001320 <main>
  bx lr
 80019ea:	4770      	bx	lr
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80019f4:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 80019f8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80019fc:	20000460 	.word	0x20000460

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_Init+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_Init+0x28>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f92b 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fdfc 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f935 	bl	8001cbe <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f90b 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000018 	.word	0x20000018
 8001a88:	20000020 	.word	0x20000020
 8001a8c:	2000001c 	.word	0x2000001c

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a03      	ldr	r2, [pc, #12]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	20000310 	.word	0x20000310

08001ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000310 	.word	0x20000310

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffe0 	bl	8001ab4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000020 	.word	0x20000020

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff90 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff49 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff5e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffb0 	bl	8001c2c <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b08b      	sub	sp, #44	@ 0x2c
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e169      	b.n	8001fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cec:	2201      	movs	r2, #1
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8158 	bne.w	8001fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a9a      	ldr	r2, [pc, #616]	@ (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d14:	4a98      	ldr	r2, [pc, #608]	@ (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d875      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a98      	ldr	r2, [pc, #608]	@ (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d058      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d20:	4a96      	ldr	r2, [pc, #600]	@ (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d86f      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d26:	4a96      	ldr	r2, [pc, #600]	@ (8001f80 <HAL_GPIO_Init+0x2a8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d052      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a94      	ldr	r2, [pc, #592]	@ (8001f80 <HAL_GPIO_Init+0x2a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d869      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d32:	4a94      	ldr	r2, [pc, #592]	@ (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04c      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d38:	4a92      	ldr	r2, [pc, #584]	@ (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d863      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d3e:	4a92      	ldr	r2, [pc, #584]	@ (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d046      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d44:	4a90      	ldr	r2, [pc, #576]	@ (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d85d      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d82a      	bhi.n	8001da4 <HAL_GPIO_Init+0xcc>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d859      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d52:	a201      	add	r2, pc, #4	@ (adr r2, 8001d58 <HAL_GPIO_Init+0x80>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001dbf 	.word	0x08001dbf
 8001d64:	08001e01 	.word	0x08001e01
 8001d68:	08001e07 	.word	0x08001e07
 8001d6c:	08001e07 	.word	0x08001e07
 8001d70:	08001e07 	.word	0x08001e07
 8001d74:	08001e07 	.word	0x08001e07
 8001d78:	08001e07 	.word	0x08001e07
 8001d7c:	08001e07 	.word	0x08001e07
 8001d80:	08001e07 	.word	0x08001e07
 8001d84:	08001e07 	.word	0x08001e07
 8001d88:	08001e07 	.word	0x08001e07
 8001d8c:	08001e07 	.word	0x08001e07
 8001d90:	08001e07 	.word	0x08001e07
 8001d94:	08001e07 	.word	0x08001e07
 8001d98:	08001e07 	.word	0x08001e07
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dc9 	.word	0x08001dc9
 8001da4:	4a79      	ldr	r2, [pc, #484]	@ (8001f8c <HAL_GPIO_Init+0x2b4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001daa:	e02c      	b.n	8001e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e029      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	3304      	adds	r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e024      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e01f      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e01a      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e013      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
          break;
 8001df2:	e009      	b.n	8001e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	615a      	str	r2, [r3, #20]
          break;
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          break;
 8001e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2bff      	cmp	r3, #255	@ 0xff
 8001e0c:	d801      	bhi.n	8001e12 <HAL_GPIO_Init+0x13a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_Init+0x13e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	@ 0xff
 8001e1c:	d802      	bhi.n	8001e24 <HAL_GPIO_Init+0x14c>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x152>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	3b08      	subs	r3, #8
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	210f      	movs	r1, #15
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80b1 	beq.w	8001fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e58:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e70:	4a48      	ldr	r2, [pc, #288]	@ (8001f94 <HAL_GPIO_Init+0x2bc>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a40      	ldr	r2, [pc, #256]	@ (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_GPIO_Init+0x1ec>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f9c <HAL_GPIO_Init+0x2c4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fa0 <HAL_GPIO_Init+0x2c8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1e4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3d      	ldr	r2, [pc, #244]	@ (8001fa4 <HAL_GPIO_Init+0x2cc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1e0>
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e006      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e004      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec8:	f002 0203 	and.w	r2, r2, #3
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	4093      	lsls	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed6:	492f      	ldr	r1, [pc, #188]	@ (8001f94 <HAL_GPIO_Init+0x2bc>)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	492c      	ldr	r1, [pc, #176]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001efe:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4928      	ldr	r1, [pc, #160]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f18:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4922      	ldr	r1, [pc, #136]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	491e      	ldr	r1, [pc, #120]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4918      	ldr	r1, [pc, #96]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4914      	ldr	r1, [pc, #80]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d021      	beq.n	8001fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	490e      	ldr	r1, [pc, #56]	@ (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e021      	b.n	8001fba <HAL_GPIO_Init+0x2e2>
 8001f76:	bf00      	nop
 8001f78:	10320000 	.word	0x10320000
 8001f7c:	10310000 	.word	0x10310000
 8001f80:	10220000 	.word	0x10220000
 8001f84:	10210000 	.word	0x10210000
 8001f88:	10120000 	.word	0x10120000
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40010800 	.word	0x40010800
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	40011400 	.word	0x40011400
 8001fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4909      	ldr	r1, [pc, #36]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae8e 	bne.w	8001cec <HAL_GPIO_Init+0x14>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	372c      	adds	r7, #44	@ 0x2c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	807b      	strh	r3, [r7, #2]
 800201a:	4613      	mov	r3, r2
 800201c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201e:	787b      	ldrb	r3, [r7, #1]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800202a:	e003      	b.n	8002034 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
	...

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e272      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	4b92      	ldr	r3, [pc, #584]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00c      	beq.n	8002086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
 8002078:	4b8c      	ldr	r3, [pc, #560]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b89      	ldr	r3, [pc, #548]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x12c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d168      	bne.n	800216c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e24c      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x76>
 80020a8:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a7f      	ldr	r2, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e02e      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x98>
 80020be:	4b7b      	ldr	r3, [pc, #492]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0xbc>
 80020e2:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a71      	ldr	r2, [pc, #452]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6f      	ldr	r3, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020fc:	4b6b      	ldr	r3, [pc, #428]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6a      	ldr	r2, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b68      	ldr	r3, [pc, #416]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a67      	ldr	r2, [pc, #412]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fcca 	bl	8001ab4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fcc6 	bl	8001ab4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e200      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5d      	ldr	r3, [pc, #372]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xe4>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fcb6 	bl	8001ab4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fcb2 	bl	8001ab4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1ec      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x10c>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002186:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
 8002192:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1c0      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4939      	ldr	r1, [pc, #228]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fc6b 	bl	8001ab4 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff fc67 	bl	8001ab4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1a1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4927      	ldr	r1, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fc4a 	bl	8001ab4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7ff fc46 	bl	8001ab4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e180      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03a      	beq.n	80022c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7ff fc2a 	bl	8001ab4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff fc26 	bl	8001ab4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e160      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 face 	bl	8002824 <RCC_Delay>
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_RCC_OscConfig+0x274>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7ff fc10 	bl	8001ab4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00f      	b.n	80022b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff fc0c 	bl	8001ab4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e146      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	42420000 	.word	0x42420000
 80022b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b92      	ldr	r3, [pc, #584]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e9      	bne.n	8002298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a6 	beq.w	800241e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a87      	ldr	r2, [pc, #540]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b85      	ldr	r3, [pc, #532]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7e      	ldr	r2, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff fbcd 	bl	8001ab4 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7ff fbc9 	bl	8001ab4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	@ 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e103      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b75      	ldr	r3, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x312>
 8002344:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e02d      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x334>
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a69      	ldr	r2, [pc, #420]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4b67      	ldr	r3, [pc, #412]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a66      	ldr	r2, [pc, #408]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	e01c      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x356>
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a60      	ldr	r2, [pc, #384]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	4b5e      	ldr	r3, [pc, #376]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a5d      	ldr	r2, [pc, #372]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002396:	4b5b      	ldr	r3, [pc, #364]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a5a      	ldr	r2, [pc, #360]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b58      	ldr	r3, [pc, #352]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a57      	ldr	r2, [pc, #348]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fb7d 	bl	8001ab4 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fb79 	bl	8001ab4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0b1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCC_OscConfig+0x37e>
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fb67 	bl	8001ab4 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7ff fb63 	bl	8001ab4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4b40      	ldr	r3, [pc, #256]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a3b      	ldr	r2, [pc, #236]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8087 	beq.w	8002536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d061      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d146      	bne.n	80024ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff fb37 	bl	8001ab4 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7ff fb33 	bl	8001ab4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e06d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002472:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4921      	ldr	r1, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a19      	ldr	r1, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	430b      	orrs	r3, r1
 8002496:	491b      	ldr	r1, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb07 	bl	8001ab4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff fb03 	bl	8001ab4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e03d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x46a>
 80024c8:	e035      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff faf0 	bl	8001ab4 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff faec 	bl	8001ab4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e026      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x498>
 80024f6:	e01e      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e019      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x500>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4965      	ldr	r1, [pc, #404]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7ff fa3e 	bl	8001ab4 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff fa3a 	bl	8001ab4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4922      	ldr	r1, [pc, #136]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f99c 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	08006484 	.word	0x08006484
 8002710:	20000018 	.word	0x20000018
 8002714:	2000001c 	.word	0x2000001c

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d002      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x30>
 8002742:	2b08      	cmp	r3, #8
 8002744:	d003      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x36>
 8002746:	e027      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002748:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	e027      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0c9b      	lsrs	r3, r3, #18
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0c5b      	lsrs	r3, r3, #17
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	4a11      	ldr	r2, [pc, #68]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800277a:	fb03 f202 	mul.w	r2, r3, r2
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e004      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0c      	ldr	r2, [pc, #48]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	693b      	ldr	r3, [r7, #16]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	0800649c 	.word	0x0800649c
 80027b8:	080064ac 	.word	0x080064ac
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b02      	ldr	r3, [pc, #8]	@ (80027d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000018 	.word	0x20000018

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08006494 	.word	0x08006494

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffde 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08006494 	.word	0x08006494

08002824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <RCC_Delay+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <RCC_Delay+0x38>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002840:	bf00      	nop
  }
  while (Delay --);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <RCC_Delay+0x1c>
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000018 	.word	0x20000018
 800285c:	10624dd3 	.word	0x10624dd3

08002860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e076      	b.n	8002960 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002882:	d009      	beq.n	8002898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
 800288a:	e005      	b.n	8002898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fee4 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	0c1a      	lsrs	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f002 0204 	and.w	r2, r2, #4
 800293e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002978:	f7ff f89c 	bl	8001ab4 <HAL_GetTick>
 800297c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	e12a      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Transmit+0x36>
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e122      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_SPI_Transmit+0x48>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e11b      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2203      	movs	r2, #3
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029fe:	d10f      	bne.n	8002a20 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d007      	beq.n	8002a3e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a46:	d152      	bne.n	8002aee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_SPI_Transmit+0xee>
 8002a50:	8b7b      	ldrh	r3, [r7, #26]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d145      	bne.n	8002ae2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a7a:	e032      	b.n	8002ae2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d112      	bne.n	8002ab0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	1c9a      	adds	r2, r3, #2
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002aae:	e018      	b.n	8002ae2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab0:	f7ff f800 	bl	8001ab4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d803      	bhi.n	8002ac8 <HAL_SPI_Transmit+0x160>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d102      	bne.n	8002ace <HAL_SPI_Transmit+0x166>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e082      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1c7      	bne.n	8002a7c <HAL_SPI_Transmit+0x114>
 8002aec:	e053      	b.n	8002b96 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x194>
 8002af6:	8b7b      	ldrh	r3, [r7, #26]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d147      	bne.n	8002b8c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b22:	e033      	b.n	8002b8c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b58:	e018      	b.n	8002b8c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe ffab 	bl	8001ab4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d803      	bhi.n	8002b72 <HAL_SPI_Transmit+0x20a>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x210>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e02d      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1c6      	bne.n	8002b24 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8b0 	bl	8002d00 <SPI_EndRxTxTransaction>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c00:	f7fe ff58 	bl	8001ab4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c10:	f7fe ff50 	bl	8001ab4 <HAL_GetTick>
 8002c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c16:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	015b      	lsls	r3, r3, #5
 8002c1c:	0d1b      	lsrs	r3, r3, #20
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	e054      	b.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d050      	beq.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c30:	f7fe ff40 	bl	8001ab4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d902      	bls.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13d      	bne.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c5e:	d111      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c68:	d004      	beq.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c72:	d107      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8c:	d10f      	bne.n	8002cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e017      	b.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d19b      	bne.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000018 	.word	0x20000018

08002d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2201      	movs	r2, #1
 8002d14:	2102      	movs	r1, #2
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff ff6a 	bl	8002bf0 <SPI_WaitFlagStateUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e013      	b.n	8002d5a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	@ 0x80
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff ff57 	bl	8002bf0 <SPI_WaitFlagStateUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e000      	b.n	8002d5a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e041      	b.n	8002df8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fe fcb7 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 f93f 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d001      	beq.n	8002e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e032      	b.n	8002e7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_TIM_Base_Start+0x88>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_TIM_Base_Start+0x48>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d009      	beq.n	8002e48 <HAL_TIM_Base_Start+0x48>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <HAL_TIM_Base_Start+0x8c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_TIM_Base_Start+0x48>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a13      	ldr	r2, [pc, #76]	@ (8002e90 <HAL_TIM_Base_Start+0x90>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d010      	beq.n	8002e7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	e007      	b.n	8002e7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0b4      	b.n	800301a <HAL_TIM_ConfigClockSource+0x186>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee8:	d03e      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xd4>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eee:	f200 8087 	bhi.w	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_TIM_ConfigClockSource+0x172>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	d87f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b70      	cmp	r3, #112	@ 0x70
 8002f02:	d01a      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xa6>
 8002f04:	2b70      	cmp	r3, #112	@ 0x70
 8002f06:	d87b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b60      	cmp	r3, #96	@ 0x60
 8002f0a:	d050      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x11a>
 8002f0c:	2b60      	cmp	r3, #96	@ 0x60
 8002f0e:	d877      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b50      	cmp	r3, #80	@ 0x50
 8002f12:	d03c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xfa>
 8002f14:	2b50      	cmp	r3, #80	@ 0x50
 8002f16:	d873      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d058      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x13a>
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
 8002f1e:	d86f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b30      	cmp	r3, #48	@ 0x30
 8002f22:	d064      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b30      	cmp	r3, #48	@ 0x30
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d867      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d05a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	e062      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	f000 f950 	bl	80031ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]
      break;
 8002f66:	e04f      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	f000 f939 	bl	80031ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f8b0 	bl	8003100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	@ 0x50
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f907 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8ce 	bl	800315c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	@ 0x60
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f8f7 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f890 	bl	8003100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	@ 0x40
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8e7 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 f8de 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e000      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <TIM_Base_SetConfig+0xd0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003042:	d007      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a2c      	ldr	r2, [pc, #176]	@ (80030f8 <TIM_Base_SetConfig+0xd4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a2b      	ldr	r2, [pc, #172]	@ (80030fc <TIM_Base_SetConfig+0xd8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <TIM_Base_SetConfig+0xd0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <TIM_Base_SetConfig+0xd4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <TIM_Base_SetConfig+0xd8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a0d      	ldr	r2, [pc, #52]	@ (80030f4 <TIM_Base_SetConfig+0xd0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d103      	bne.n	80030cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 0201 	bic.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]
  }
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800

08003100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 030a 	bic.w	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0210 	bic.w	r2, r3, #16
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	031b      	lsls	r3, r3, #12
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f043 0307 	orr.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	609a      	str	r2, [r3, #8]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003240:	2302      	movs	r3, #2
 8003242:	e046      	b.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d009      	beq.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a10      	ldr	r2, [pc, #64]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10c      	bne.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e042      	b.n	8003380 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe fa12 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f971 	bl	8003614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	@ 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d175      	bne.n	8003494 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit+0x2c>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e06e      	b.n	8003496 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2221      	movs	r2, #33	@ 0x21
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c6:	f7fe fb75 	bl	8001ab4 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e0:	d108      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e003      	b.n	80033fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033fc:	e02e      	b.n	800345c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	@ 0x80
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f848 	bl	800349e <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e03a      	b.n	8003496 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3302      	adds	r3, #2
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	e007      	b.n	800344e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1cb      	bne.n	80033fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2140      	movs	r1, #64	@ 0x40
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f814 	bl	800349e <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e006      	b.n	8003496 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ae:	e03b      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d037      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fafc 	bl	8001ab4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <UART_WaitOnFlagUntilTimeout+0x30>
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e03a      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d020      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d01d      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d116      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f81d 	bl	8003550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2208      	movs	r2, #8
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e00f      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d0b4      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b095      	sub	sp, #84	@ 0x54
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003578:	643a      	str	r2, [r7, #64]	@ 0x40
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800357e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e5      	bne.n	8003558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3314      	adds	r3, #20
 8003592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	61fb      	str	r3, [r7, #28]
   return(result);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d119      	bne.n	80035fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 0310 	bic.w	r3, r3, #16
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e8:	61ba      	str	r2, [r7, #24]
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6979      	ldr	r1, [r7, #20]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800360a:	bf00      	nop
 800360c:	3754      	adds	r7, #84	@ 0x54
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800364e:	f023 030c 	bic.w	r3, r3, #12
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	430b      	orrs	r3, r1
 800365a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <UART_SetConfig+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff f8be 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	e002      	b.n	800368a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003684:	f7ff f8a6 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003688:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	4a22      	ldr	r2, [pc, #136]	@ (800372c <UART_SetConfig+0x118>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	0119      	lsls	r1, r3, #4
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <UART_SetConfig+0x118>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2064      	movs	r0, #100	@ 0x64
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	@ 0x32
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e0:	4419      	add	r1, r3
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <UART_SetConfig+0x118>)
 80036fa:	fba3 0302 	umull	r0, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2064      	movs	r0, #100	@ 0x64
 8003702:	fb00 f303 	mul.w	r3, r0, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	3332      	adds	r3, #50	@ 0x32
 800370c:	4a07      	ldr	r2, [pc, #28]	@ (800372c <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	440a      	add	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40013800 	.word	0x40013800
 800372c:	51eb851f 	.word	0x51eb851f

08003730 <__cvt>:
 8003730:	2b00      	cmp	r3, #0
 8003732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003736:	461d      	mov	r5, r3
 8003738:	bfbb      	ittet	lt
 800373a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800373e:	461d      	movlt	r5, r3
 8003740:	2300      	movge	r3, #0
 8003742:	232d      	movlt	r3, #45	@ 0x2d
 8003744:	b088      	sub	sp, #32
 8003746:	4614      	mov	r4, r2
 8003748:	bfb8      	it	lt
 800374a:	4614      	movlt	r4, r2
 800374c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800374e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003750:	7013      	strb	r3, [r2, #0]
 8003752:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003754:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003758:	f023 0820 	bic.w	r8, r3, #32
 800375c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003760:	d005      	beq.n	800376e <__cvt+0x3e>
 8003762:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003766:	d100      	bne.n	800376a <__cvt+0x3a>
 8003768:	3601      	adds	r6, #1
 800376a:	2302      	movs	r3, #2
 800376c:	e000      	b.n	8003770 <__cvt+0x40>
 800376e:	2303      	movs	r3, #3
 8003770:	aa07      	add	r2, sp, #28
 8003772:	9204      	str	r2, [sp, #16]
 8003774:	aa06      	add	r2, sp, #24
 8003776:	e9cd a202 	strd	sl, r2, [sp, #8]
 800377a:	e9cd 3600 	strd	r3, r6, [sp]
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f000 fe81 	bl	8004488 <_dtoa_r>
 8003786:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800378a:	4607      	mov	r7, r0
 800378c:	d119      	bne.n	80037c2 <__cvt+0x92>
 800378e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003790:	07db      	lsls	r3, r3, #31
 8003792:	d50e      	bpl.n	80037b2 <__cvt+0x82>
 8003794:	eb00 0906 	add.w	r9, r0, r6
 8003798:	2200      	movs	r2, #0
 800379a:	2300      	movs	r3, #0
 800379c:	4620      	mov	r0, r4
 800379e:	4629      	mov	r1, r5
 80037a0:	f7fd f902 	bl	80009a8 <__aeabi_dcmpeq>
 80037a4:	b108      	cbz	r0, 80037aa <__cvt+0x7a>
 80037a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80037aa:	2230      	movs	r2, #48	@ 0x30
 80037ac:	9b07      	ldr	r3, [sp, #28]
 80037ae:	454b      	cmp	r3, r9
 80037b0:	d31e      	bcc.n	80037f0 <__cvt+0xc0>
 80037b2:	4638      	mov	r0, r7
 80037b4:	9b07      	ldr	r3, [sp, #28]
 80037b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80037b8:	1bdb      	subs	r3, r3, r7
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	b008      	add	sp, #32
 80037be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037c6:	eb00 0906 	add.w	r9, r0, r6
 80037ca:	d1e5      	bne.n	8003798 <__cvt+0x68>
 80037cc:	7803      	ldrb	r3, [r0, #0]
 80037ce:	2b30      	cmp	r3, #48	@ 0x30
 80037d0:	d10a      	bne.n	80037e8 <__cvt+0xb8>
 80037d2:	2200      	movs	r2, #0
 80037d4:	2300      	movs	r3, #0
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fd f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80037de:	b918      	cbnz	r0, 80037e8 <__cvt+0xb8>
 80037e0:	f1c6 0601 	rsb	r6, r6, #1
 80037e4:	f8ca 6000 	str.w	r6, [sl]
 80037e8:	f8da 3000 	ldr.w	r3, [sl]
 80037ec:	4499      	add	r9, r3
 80037ee:	e7d3      	b.n	8003798 <__cvt+0x68>
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	9107      	str	r1, [sp, #28]
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e7d9      	b.n	80037ac <__cvt+0x7c>

080037f8 <__exponent>:
 80037f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037fa:	2900      	cmp	r1, #0
 80037fc:	bfb6      	itet	lt
 80037fe:	232d      	movlt	r3, #45	@ 0x2d
 8003800:	232b      	movge	r3, #43	@ 0x2b
 8003802:	4249      	neglt	r1, r1
 8003804:	2909      	cmp	r1, #9
 8003806:	7002      	strb	r2, [r0, #0]
 8003808:	7043      	strb	r3, [r0, #1]
 800380a:	dd29      	ble.n	8003860 <__exponent+0x68>
 800380c:	f10d 0307 	add.w	r3, sp, #7
 8003810:	461d      	mov	r5, r3
 8003812:	270a      	movs	r7, #10
 8003814:	fbb1 f6f7 	udiv	r6, r1, r7
 8003818:	461a      	mov	r2, r3
 800381a:	fb07 1416 	mls	r4, r7, r6, r1
 800381e:	3430      	adds	r4, #48	@ 0x30
 8003820:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003824:	460c      	mov	r4, r1
 8003826:	2c63      	cmp	r4, #99	@ 0x63
 8003828:	4631      	mov	r1, r6
 800382a:	f103 33ff 	add.w	r3, r3, #4294967295
 800382e:	dcf1      	bgt.n	8003814 <__exponent+0x1c>
 8003830:	3130      	adds	r1, #48	@ 0x30
 8003832:	1e94      	subs	r4, r2, #2
 8003834:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003838:	4623      	mov	r3, r4
 800383a:	1c41      	adds	r1, r0, #1
 800383c:	42ab      	cmp	r3, r5
 800383e:	d30a      	bcc.n	8003856 <__exponent+0x5e>
 8003840:	f10d 0309 	add.w	r3, sp, #9
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	42ac      	cmp	r4, r5
 8003848:	bf88      	it	hi
 800384a:	2300      	movhi	r3, #0
 800384c:	3302      	adds	r3, #2
 800384e:	4403      	add	r3, r0
 8003850:	1a18      	subs	r0, r3, r0
 8003852:	b003      	add	sp, #12
 8003854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003856:	f813 6b01 	ldrb.w	r6, [r3], #1
 800385a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800385e:	e7ed      	b.n	800383c <__exponent+0x44>
 8003860:	2330      	movs	r3, #48	@ 0x30
 8003862:	3130      	adds	r1, #48	@ 0x30
 8003864:	7083      	strb	r3, [r0, #2]
 8003866:	70c1      	strb	r1, [r0, #3]
 8003868:	1d03      	adds	r3, r0, #4
 800386a:	e7f1      	b.n	8003850 <__exponent+0x58>

0800386c <_printf_float>:
 800386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003870:	b091      	sub	sp, #68	@ 0x44
 8003872:	460c      	mov	r4, r1
 8003874:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003878:	4616      	mov	r6, r2
 800387a:	461f      	mov	r7, r3
 800387c:	4605      	mov	r5, r0
 800387e:	f000 fcf5 	bl	800426c <_localeconv_r>
 8003882:	6803      	ldr	r3, [r0, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	9308      	str	r3, [sp, #32]
 8003888:	f7fc fc62 	bl	8000150 <strlen>
 800388c:	2300      	movs	r3, #0
 800388e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003890:	f8d8 3000 	ldr.w	r3, [r8]
 8003894:	9009      	str	r0, [sp, #36]	@ 0x24
 8003896:	3307      	adds	r3, #7
 8003898:	f023 0307 	bic.w	r3, r3, #7
 800389c:	f103 0208 	add.w	r2, r3, #8
 80038a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80038a4:	f8d4 b000 	ldr.w	fp, [r4]
 80038a8:	f8c8 2000 	str.w	r2, [r8]
 80038ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80038b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80038b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038b6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80038c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b38 <_printf_float+0x2cc>)
 80038c8:	f7fd f8a0 	bl	8000a0c <__aeabi_dcmpun>
 80038cc:	bb70      	cbnz	r0, 800392c <_printf_float+0xc0>
 80038ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038d2:	f04f 32ff 	mov.w	r2, #4294967295
 80038d6:	4b98      	ldr	r3, [pc, #608]	@ (8003b38 <_printf_float+0x2cc>)
 80038d8:	f7fd f87a 	bl	80009d0 <__aeabi_dcmple>
 80038dc:	bb30      	cbnz	r0, 800392c <_printf_float+0xc0>
 80038de:	2200      	movs	r2, #0
 80038e0:	2300      	movs	r3, #0
 80038e2:	4640      	mov	r0, r8
 80038e4:	4649      	mov	r1, r9
 80038e6:	f7fd f869 	bl	80009bc <__aeabi_dcmplt>
 80038ea:	b110      	cbz	r0, 80038f2 <_printf_float+0x86>
 80038ec:	232d      	movs	r3, #45	@ 0x2d
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f2:	4a92      	ldr	r2, [pc, #584]	@ (8003b3c <_printf_float+0x2d0>)
 80038f4:	4b92      	ldr	r3, [pc, #584]	@ (8003b40 <_printf_float+0x2d4>)
 80038f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80038fa:	bf94      	ite	ls
 80038fc:	4690      	movls	r8, r2
 80038fe:	4698      	movhi	r8, r3
 8003900:	2303      	movs	r3, #3
 8003902:	f04f 0900 	mov.w	r9, #0
 8003906:	6123      	str	r3, [r4, #16]
 8003908:	f02b 0304 	bic.w	r3, fp, #4
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	4633      	mov	r3, r6
 8003910:	4621      	mov	r1, r4
 8003912:	4628      	mov	r0, r5
 8003914:	9700      	str	r7, [sp, #0]
 8003916:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003918:	f000 f9d4 	bl	8003cc4 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	f040 8090 	bne.w	8003a42 <_printf_float+0x1d6>
 8003922:	f04f 30ff 	mov.w	r0, #4294967295
 8003926:	b011      	add	sp, #68	@ 0x44
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	4640      	mov	r0, r8
 8003932:	4649      	mov	r1, r9
 8003934:	f7fd f86a 	bl	8000a0c <__aeabi_dcmpun>
 8003938:	b148      	cbz	r0, 800394e <_printf_float+0xe2>
 800393a:	464b      	mov	r3, r9
 800393c:	2b00      	cmp	r3, #0
 800393e:	bfb8      	it	lt
 8003940:	232d      	movlt	r3, #45	@ 0x2d
 8003942:	4a80      	ldr	r2, [pc, #512]	@ (8003b44 <_printf_float+0x2d8>)
 8003944:	bfb8      	it	lt
 8003946:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800394a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b48 <_printf_float+0x2dc>)
 800394c:	e7d3      	b.n	80038f6 <_printf_float+0x8a>
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	d13f      	bne.n	80039d8 <_printf_float+0x16c>
 8003958:	2306      	movs	r3, #6
 800395a:	6063      	str	r3, [r4, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	9206      	str	r2, [sp, #24]
 8003966:	aa0e      	add	r2, sp, #56	@ 0x38
 8003968:	e9cd a204 	strd	sl, r2, [sp, #16]
 800396c:	aa0d      	add	r2, sp, #52	@ 0x34
 800396e:	9203      	str	r2, [sp, #12]
 8003970:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003974:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	4642      	mov	r2, r8
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	4628      	mov	r0, r5
 8003980:	464b      	mov	r3, r9
 8003982:	910a      	str	r1, [sp, #40]	@ 0x28
 8003984:	f7ff fed4 	bl	8003730 <__cvt>
 8003988:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800398a:	4680      	mov	r8, r0
 800398c:	2947      	cmp	r1, #71	@ 0x47
 800398e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003990:	d128      	bne.n	80039e4 <_printf_float+0x178>
 8003992:	1cc8      	adds	r0, r1, #3
 8003994:	db02      	blt.n	800399c <_printf_float+0x130>
 8003996:	6863      	ldr	r3, [r4, #4]
 8003998:	4299      	cmp	r1, r3
 800399a:	dd40      	ble.n	8003a1e <_printf_float+0x1b2>
 800399c:	f1aa 0a02 	sub.w	sl, sl, #2
 80039a0:	fa5f fa8a 	uxtb.w	sl, sl
 80039a4:	4652      	mov	r2, sl
 80039a6:	3901      	subs	r1, #1
 80039a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80039ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80039ae:	f7ff ff23 	bl	80037f8 <__exponent>
 80039b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039b4:	4681      	mov	r9, r0
 80039b6:	1813      	adds	r3, r2, r0
 80039b8:	2a01      	cmp	r2, #1
 80039ba:	6123      	str	r3, [r4, #16]
 80039bc:	dc02      	bgt.n	80039c4 <_printf_float+0x158>
 80039be:	6822      	ldr	r2, [r4, #0]
 80039c0:	07d2      	lsls	r2, r2, #31
 80039c2:	d501      	bpl.n	80039c8 <_printf_float+0x15c>
 80039c4:	3301      	adds	r3, #1
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d09e      	beq.n	800390e <_printf_float+0xa2>
 80039d0:	232d      	movs	r3, #45	@ 0x2d
 80039d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039d6:	e79a      	b.n	800390e <_printf_float+0xa2>
 80039d8:	2947      	cmp	r1, #71	@ 0x47
 80039da:	d1bf      	bne.n	800395c <_printf_float+0xf0>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1bd      	bne.n	800395c <_printf_float+0xf0>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e7ba      	b.n	800395a <_printf_float+0xee>
 80039e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039e8:	d9dc      	bls.n	80039a4 <_printf_float+0x138>
 80039ea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80039ee:	d118      	bne.n	8003a22 <_printf_float+0x1b6>
 80039f0:	2900      	cmp	r1, #0
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	dd0b      	ble.n	8003a0e <_printf_float+0x1a2>
 80039f6:	6121      	str	r1, [r4, #16]
 80039f8:	b913      	cbnz	r3, 8003a00 <_printf_float+0x194>
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	07d0      	lsls	r0, r2, #31
 80039fe:	d502      	bpl.n	8003a06 <_printf_float+0x19a>
 8003a00:	3301      	adds	r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	6123      	str	r3, [r4, #16]
 8003a06:	f04f 0900 	mov.w	r9, #0
 8003a0a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a0c:	e7dc      	b.n	80039c8 <_printf_float+0x15c>
 8003a0e:	b913      	cbnz	r3, 8003a16 <_printf_float+0x1aa>
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	07d2      	lsls	r2, r2, #31
 8003a14:	d501      	bpl.n	8003a1a <_printf_float+0x1ae>
 8003a16:	3302      	adds	r3, #2
 8003a18:	e7f4      	b.n	8003a04 <_printf_float+0x198>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e7f2      	b.n	8003a04 <_printf_float+0x198>
 8003a1e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a24:	4299      	cmp	r1, r3
 8003a26:	db05      	blt.n	8003a34 <_printf_float+0x1c8>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	6121      	str	r1, [r4, #16]
 8003a2c:	07d8      	lsls	r0, r3, #31
 8003a2e:	d5ea      	bpl.n	8003a06 <_printf_float+0x19a>
 8003a30:	1c4b      	adds	r3, r1, #1
 8003a32:	e7e7      	b.n	8003a04 <_printf_float+0x198>
 8003a34:	2900      	cmp	r1, #0
 8003a36:	bfcc      	ite	gt
 8003a38:	2201      	movgt	r2, #1
 8003a3a:	f1c1 0202 	rsble	r2, r1, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	e7e0      	b.n	8003a04 <_printf_float+0x198>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	055a      	lsls	r2, r3, #21
 8003a46:	d407      	bmi.n	8003a58 <_printf_float+0x1ec>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	4631      	mov	r1, r6
 8003a4e:	4628      	mov	r0, r5
 8003a50:	47b8      	blx	r7
 8003a52:	3001      	adds	r0, #1
 8003a54:	d12b      	bne.n	8003aae <_printf_float+0x242>
 8003a56:	e764      	b.n	8003922 <_printf_float+0xb6>
 8003a58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a5c:	f240 80dc 	bls.w	8003c18 <_printf_float+0x3ac>
 8003a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a64:	2200      	movs	r2, #0
 8003a66:	2300      	movs	r3, #0
 8003a68:	f7fc ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d033      	beq.n	8003ad8 <_printf_float+0x26c>
 8003a70:	2301      	movs	r3, #1
 8003a72:	4631      	mov	r1, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	4a35      	ldr	r2, [pc, #212]	@ (8003b4c <_printf_float+0x2e0>)
 8003a78:	47b8      	blx	r7
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	f43f af51 	beq.w	8003922 <_printf_float+0xb6>
 8003a80:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003a84:	4543      	cmp	r3, r8
 8003a86:	db02      	blt.n	8003a8e <_printf_float+0x222>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	07d8      	lsls	r0, r3, #31
 8003a8c:	d50f      	bpl.n	8003aae <_printf_float+0x242>
 8003a8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a92:	4631      	mov	r1, r6
 8003a94:	4628      	mov	r0, r5
 8003a96:	47b8      	blx	r7
 8003a98:	3001      	adds	r0, #1
 8003a9a:	f43f af42 	beq.w	8003922 <_printf_float+0xb6>
 8003a9e:	f04f 0900 	mov.w	r9, #0
 8003aa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003aa6:	f104 0a1a 	add.w	sl, r4, #26
 8003aaa:	45c8      	cmp	r8, r9
 8003aac:	dc09      	bgt.n	8003ac2 <_printf_float+0x256>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	079b      	lsls	r3, r3, #30
 8003ab2:	f100 8102 	bmi.w	8003cba <_printf_float+0x44e>
 8003ab6:	68e0      	ldr	r0, [r4, #12]
 8003ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003aba:	4298      	cmp	r0, r3
 8003abc:	bfb8      	it	lt
 8003abe:	4618      	movlt	r0, r3
 8003ac0:	e731      	b.n	8003926 <_printf_float+0xba>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4652      	mov	r2, sl
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b8      	blx	r7
 8003acc:	3001      	adds	r0, #1
 8003ace:	f43f af28 	beq.w	8003922 <_printf_float+0xb6>
 8003ad2:	f109 0901 	add.w	r9, r9, #1
 8003ad6:	e7e8      	b.n	8003aaa <_printf_float+0x23e>
 8003ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dc38      	bgt.n	8003b50 <_printf_float+0x2e4>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <_printf_float+0x2e0>)
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	f43f af1a 	beq.w	8003922 <_printf_float+0xb6>
 8003aee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003af2:	ea59 0303 	orrs.w	r3, r9, r3
 8003af6:	d102      	bne.n	8003afe <_printf_float+0x292>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	07d9      	lsls	r1, r3, #31
 8003afc:	d5d7      	bpl.n	8003aae <_printf_float+0x242>
 8003afe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b02:	4631      	mov	r1, r6
 8003b04:	4628      	mov	r0, r5
 8003b06:	47b8      	blx	r7
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f43f af0a 	beq.w	8003922 <_printf_float+0xb6>
 8003b0e:	f04f 0a00 	mov.w	sl, #0
 8003b12:	f104 0b1a 	add.w	fp, r4, #26
 8003b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b18:	425b      	negs	r3, r3
 8003b1a:	4553      	cmp	r3, sl
 8003b1c:	dc01      	bgt.n	8003b22 <_printf_float+0x2b6>
 8003b1e:	464b      	mov	r3, r9
 8003b20:	e793      	b.n	8003a4a <_printf_float+0x1de>
 8003b22:	2301      	movs	r3, #1
 8003b24:	465a      	mov	r2, fp
 8003b26:	4631      	mov	r1, r6
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b8      	blx	r7
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f43f aef8 	beq.w	8003922 <_printf_float+0xb6>
 8003b32:	f10a 0a01 	add.w	sl, sl, #1
 8003b36:	e7ee      	b.n	8003b16 <_printf_float+0x2aa>
 8003b38:	7fefffff 	.word	0x7fefffff
 8003b3c:	080064ae 	.word	0x080064ae
 8003b40:	080064b2 	.word	0x080064b2
 8003b44:	080064b6 	.word	0x080064b6
 8003b48:	080064ba 	.word	0x080064ba
 8003b4c:	080064be 	.word	0x080064be
 8003b50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b52:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b56:	4553      	cmp	r3, sl
 8003b58:	bfa8      	it	ge
 8003b5a:	4653      	movge	r3, sl
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	4699      	mov	r9, r3
 8003b60:	dc36      	bgt.n	8003bd0 <_printf_float+0x364>
 8003b62:	f04f 0b00 	mov.w	fp, #0
 8003b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b6a:	f104 021a 	add.w	r2, r4, #26
 8003b6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b72:	eba3 0309 	sub.w	r3, r3, r9
 8003b76:	455b      	cmp	r3, fp
 8003b78:	dc31      	bgt.n	8003bde <_printf_float+0x372>
 8003b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b7c:	459a      	cmp	sl, r3
 8003b7e:	dc3a      	bgt.n	8003bf6 <_printf_float+0x38a>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	07da      	lsls	r2, r3, #31
 8003b84:	d437      	bmi.n	8003bf6 <_printf_float+0x38a>
 8003b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b88:	ebaa 0903 	sub.w	r9, sl, r3
 8003b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b8e:	ebaa 0303 	sub.w	r3, sl, r3
 8003b92:	4599      	cmp	r9, r3
 8003b94:	bfa8      	it	ge
 8003b96:	4699      	movge	r9, r3
 8003b98:	f1b9 0f00 	cmp.w	r9, #0
 8003b9c:	dc33      	bgt.n	8003c06 <_printf_float+0x39a>
 8003b9e:	f04f 0800 	mov.w	r8, #0
 8003ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ba6:	f104 0b1a 	add.w	fp, r4, #26
 8003baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bac:	ebaa 0303 	sub.w	r3, sl, r3
 8003bb0:	eba3 0309 	sub.w	r3, r3, r9
 8003bb4:	4543      	cmp	r3, r8
 8003bb6:	f77f af7a 	ble.w	8003aae <_printf_float+0x242>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	465a      	mov	r2, fp
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f aeac 	beq.w	8003922 <_printf_float+0xb6>
 8003bca:	f108 0801 	add.w	r8, r8, #1
 8003bce:	e7ec      	b.n	8003baa <_printf_float+0x33e>
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b8      	blx	r7
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d1c2      	bne.n	8003b62 <_printf_float+0x2f6>
 8003bdc:	e6a1      	b.n	8003922 <_printf_float+0xb6>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4631      	mov	r1, r6
 8003be2:	4628      	mov	r0, r5
 8003be4:	920a      	str	r2, [sp, #40]	@ 0x28
 8003be6:	47b8      	blx	r7
 8003be8:	3001      	adds	r0, #1
 8003bea:	f43f ae9a 	beq.w	8003922 <_printf_float+0xb6>
 8003bee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003bf0:	f10b 0b01 	add.w	fp, fp, #1
 8003bf4:	e7bb      	b.n	8003b6e <_printf_float+0x302>
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	d1c0      	bne.n	8003b86 <_printf_float+0x31a>
 8003c04:	e68d      	b.n	8003922 <_printf_float+0xb6>
 8003c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c08:	464b      	mov	r3, r9
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	4442      	add	r2, r8
 8003c10:	47b8      	blx	r7
 8003c12:	3001      	adds	r0, #1
 8003c14:	d1c3      	bne.n	8003b9e <_printf_float+0x332>
 8003c16:	e684      	b.n	8003922 <_printf_float+0xb6>
 8003c18:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c1c:	f1ba 0f01 	cmp.w	sl, #1
 8003c20:	dc01      	bgt.n	8003c26 <_printf_float+0x3ba>
 8003c22:	07db      	lsls	r3, r3, #31
 8003c24:	d536      	bpl.n	8003c94 <_printf_float+0x428>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4642      	mov	r2, r8
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b8      	blx	r7
 8003c30:	3001      	adds	r0, #1
 8003c32:	f43f ae76 	beq.w	8003922 <_printf_float+0xb6>
 8003c36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	f43f ae6e 	beq.w	8003922 <_printf_float+0xb6>
 8003c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c52:	f7fc fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8003c56:	b9c0      	cbnz	r0, 8003c8a <_printf_float+0x41e>
 8003c58:	4653      	mov	r3, sl
 8003c5a:	f108 0201 	add.w	r2, r8, #1
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4628      	mov	r0, r5
 8003c62:	47b8      	blx	r7
 8003c64:	3001      	adds	r0, #1
 8003c66:	d10c      	bne.n	8003c82 <_printf_float+0x416>
 8003c68:	e65b      	b.n	8003922 <_printf_float+0xb6>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	465a      	mov	r2, fp
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4628      	mov	r0, r5
 8003c72:	47b8      	blx	r7
 8003c74:	3001      	adds	r0, #1
 8003c76:	f43f ae54 	beq.w	8003922 <_printf_float+0xb6>
 8003c7a:	f108 0801 	add.w	r8, r8, #1
 8003c7e:	45d0      	cmp	r8, sl
 8003c80:	dbf3      	blt.n	8003c6a <_printf_float+0x3fe>
 8003c82:	464b      	mov	r3, r9
 8003c84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003c88:	e6e0      	b.n	8003a4c <_printf_float+0x1e0>
 8003c8a:	f04f 0800 	mov.w	r8, #0
 8003c8e:	f104 0b1a 	add.w	fp, r4, #26
 8003c92:	e7f4      	b.n	8003c7e <_printf_float+0x412>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4642      	mov	r2, r8
 8003c98:	e7e1      	b.n	8003c5e <_printf_float+0x3f2>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	464a      	mov	r2, r9
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b8      	blx	r7
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	f43f ae3c 	beq.w	8003922 <_printf_float+0xb6>
 8003caa:	f108 0801 	add.w	r8, r8, #1
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cb2:	1a5b      	subs	r3, r3, r1
 8003cb4:	4543      	cmp	r3, r8
 8003cb6:	dcf0      	bgt.n	8003c9a <_printf_float+0x42e>
 8003cb8:	e6fd      	b.n	8003ab6 <_printf_float+0x24a>
 8003cba:	f04f 0800 	mov.w	r8, #0
 8003cbe:	f104 0919 	add.w	r9, r4, #25
 8003cc2:	e7f4      	b.n	8003cae <_printf_float+0x442>

08003cc4 <_printf_common>:
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	4616      	mov	r6, r2
 8003cca:	4698      	mov	r8, r3
 8003ccc:	688a      	ldr	r2, [r1, #8]
 8003cce:	690b      	ldr	r3, [r1, #16]
 8003cd0:	4607      	mov	r7, r0
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	bfb8      	it	lt
 8003cd6:	4613      	movlt	r3, r2
 8003cd8:	6033      	str	r3, [r6, #0]
 8003cda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cde:	460c      	mov	r4, r1
 8003ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ce4:	b10a      	cbz	r2, 8003cea <_printf_common+0x26>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	6033      	str	r3, [r6, #0]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	0699      	lsls	r1, r3, #26
 8003cee:	bf42      	ittt	mi
 8003cf0:	6833      	ldrmi	r3, [r6, #0]
 8003cf2:	3302      	addmi	r3, #2
 8003cf4:	6033      	strmi	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	f015 0506 	ands.w	r5, r5, #6
 8003cfc:	d106      	bne.n	8003d0c <_printf_common+0x48>
 8003cfe:	f104 0a19 	add.w	sl, r4, #25
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	6832      	ldr	r2, [r6, #0]
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	42ab      	cmp	r3, r5
 8003d0a:	dc2b      	bgt.n	8003d64 <_printf_common+0xa0>
 8003d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	3b00      	subs	r3, #0
 8003d14:	bf18      	it	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	0692      	lsls	r2, r2, #26
 8003d1a:	d430      	bmi.n	8003d7e <_printf_common+0xba>
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d24:	47c8      	blx	r9
 8003d26:	3001      	adds	r0, #1
 8003d28:	d023      	beq.n	8003d72 <_printf_common+0xae>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	6922      	ldr	r2, [r4, #16]
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf14      	ite	ne
 8003d36:	2500      	movne	r5, #0
 8003d38:	6833      	ldreq	r3, [r6, #0]
 8003d3a:	f04f 0600 	mov.w	r6, #0
 8003d3e:	bf08      	it	eq
 8003d40:	68e5      	ldreq	r5, [r4, #12]
 8003d42:	f104 041a 	add.w	r4, r4, #26
 8003d46:	bf08      	it	eq
 8003d48:	1aed      	subeq	r5, r5, r3
 8003d4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d4e:	bf08      	it	eq
 8003d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d54:	4293      	cmp	r3, r2
 8003d56:	bfc4      	itt	gt
 8003d58:	1a9b      	subgt	r3, r3, r2
 8003d5a:	18ed      	addgt	r5, r5, r3
 8003d5c:	42b5      	cmp	r5, r6
 8003d5e:	d11a      	bne.n	8003d96 <_printf_common+0xd2>
 8003d60:	2000      	movs	r0, #0
 8003d62:	e008      	b.n	8003d76 <_printf_common+0xb2>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4652      	mov	r2, sl
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	47c8      	blx	r9
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d103      	bne.n	8003d7a <_printf_common+0xb6>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7a:	3501      	adds	r5, #1
 8003d7c:	e7c1      	b.n	8003d02 <_printf_common+0x3e>
 8003d7e:	2030      	movs	r0, #48	@ 0x30
 8003d80:	18e1      	adds	r1, r4, r3
 8003d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d8c:	4422      	add	r2, r4
 8003d8e:	3302      	adds	r3, #2
 8003d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d94:	e7c2      	b.n	8003d1c <_printf_common+0x58>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4622      	mov	r2, r4
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	47c8      	blx	r9
 8003da0:	3001      	adds	r0, #1
 8003da2:	d0e6      	beq.n	8003d72 <_printf_common+0xae>
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7d9      	b.n	8003d5c <_printf_common+0x98>

08003da8 <_printf_i>:
 8003da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	7e0f      	ldrb	r7, [r1, #24]
 8003dae:	4691      	mov	r9, r2
 8003db0:	2f78      	cmp	r7, #120	@ 0x78
 8003db2:	4680      	mov	r8, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	469a      	mov	sl, r3
 8003db8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dbe:	d807      	bhi.n	8003dd0 <_printf_i+0x28>
 8003dc0:	2f62      	cmp	r7, #98	@ 0x62
 8003dc2:	d80a      	bhi.n	8003dda <_printf_i+0x32>
 8003dc4:	2f00      	cmp	r7, #0
 8003dc6:	f000 80d3 	beq.w	8003f70 <_printf_i+0x1c8>
 8003dca:	2f58      	cmp	r7, #88	@ 0x58
 8003dcc:	f000 80ba 	beq.w	8003f44 <_printf_i+0x19c>
 8003dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003dd8:	e03a      	b.n	8003e50 <_printf_i+0xa8>
 8003dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dde:	2b15      	cmp	r3, #21
 8003de0:	d8f6      	bhi.n	8003dd0 <_printf_i+0x28>
 8003de2:	a101      	add	r1, pc, #4	@ (adr r1, 8003de8 <_printf_i+0x40>)
 8003de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e55 	.word	0x08003e55
 8003df0:	08003dd1 	.word	0x08003dd1
 8003df4:	08003dd1 	.word	0x08003dd1
 8003df8:	08003dd1 	.word	0x08003dd1
 8003dfc:	08003dd1 	.word	0x08003dd1
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003dd1 	.word	0x08003dd1
 8003e08:	08003dd1 	.word	0x08003dd1
 8003e0c:	08003dd1 	.word	0x08003dd1
 8003e10:	08003dd1 	.word	0x08003dd1
 8003e14:	08003f57 	.word	0x08003f57
 8003e18:	08003e7f 	.word	0x08003e7f
 8003e1c:	08003f11 	.word	0x08003f11
 8003e20:	08003dd1 	.word	0x08003dd1
 8003e24:	08003dd1 	.word	0x08003dd1
 8003e28:	08003f79 	.word	0x08003f79
 8003e2c:	08003dd1 	.word	0x08003dd1
 8003e30:	08003e7f 	.word	0x08003e7f
 8003e34:	08003dd1 	.word	0x08003dd1
 8003e38:	08003dd1 	.word	0x08003dd1
 8003e3c:	08003f19 	.word	0x08003f19
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6032      	str	r2, [r6, #0]
 8003e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e50:	2301      	movs	r3, #1
 8003e52:	e09e      	b.n	8003f92 <_printf_i+0x1ea>
 8003e54:	6833      	ldr	r3, [r6, #0]
 8003e56:	6820      	ldr	r0, [r4, #0]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	6031      	str	r1, [r6, #0]
 8003e5c:	0606      	lsls	r6, r0, #24
 8003e5e:	d501      	bpl.n	8003e64 <_printf_i+0xbc>
 8003e60:	681d      	ldr	r5, [r3, #0]
 8003e62:	e003      	b.n	8003e6c <_printf_i+0xc4>
 8003e64:	0645      	lsls	r5, r0, #25
 8003e66:	d5fb      	bpl.n	8003e60 <_printf_i+0xb8>
 8003e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	da03      	bge.n	8003e78 <_printf_i+0xd0>
 8003e70:	232d      	movs	r3, #45	@ 0x2d
 8003e72:	426d      	negs	r5, r5
 8003e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e78:	230a      	movs	r3, #10
 8003e7a:	4859      	ldr	r0, [pc, #356]	@ (8003fe0 <_printf_i+0x238>)
 8003e7c:	e011      	b.n	8003ea2 <_printf_i+0xfa>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	6833      	ldr	r3, [r6, #0]
 8003e82:	0608      	lsls	r0, r1, #24
 8003e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e88:	d402      	bmi.n	8003e90 <_printf_i+0xe8>
 8003e8a:	0649      	lsls	r1, r1, #25
 8003e8c:	bf48      	it	mi
 8003e8e:	b2ad      	uxthmi	r5, r5
 8003e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e92:	6033      	str	r3, [r6, #0]
 8003e94:	bf14      	ite	ne
 8003e96:	230a      	movne	r3, #10
 8003e98:	2308      	moveq	r3, #8
 8003e9a:	4851      	ldr	r0, [pc, #324]	@ (8003fe0 <_printf_i+0x238>)
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ea2:	6866      	ldr	r6, [r4, #4]
 8003ea4:	2e00      	cmp	r6, #0
 8003ea6:	bfa8      	it	ge
 8003ea8:	6821      	ldrge	r1, [r4, #0]
 8003eaa:	60a6      	str	r6, [r4, #8]
 8003eac:	bfa4      	itt	ge
 8003eae:	f021 0104 	bicge.w	r1, r1, #4
 8003eb2:	6021      	strge	r1, [r4, #0]
 8003eb4:	b90d      	cbnz	r5, 8003eba <_printf_i+0x112>
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	d04b      	beq.n	8003f52 <_printf_i+0x1aa>
 8003eba:	4616      	mov	r6, r2
 8003ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ec4:	5dc7      	ldrb	r7, [r0, r7]
 8003ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eca:	462f      	mov	r7, r5
 8003ecc:	42bb      	cmp	r3, r7
 8003ece:	460d      	mov	r5, r1
 8003ed0:	d9f4      	bls.n	8003ebc <_printf_i+0x114>
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d10b      	bne.n	8003eee <_printf_i+0x146>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	07df      	lsls	r7, r3, #31
 8003eda:	d508      	bpl.n	8003eee <_printf_i+0x146>
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6861      	ldr	r1, [r4, #4]
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	bfde      	ittt	le
 8003ee4:	2330      	movle	r3, #48	@ 0x30
 8003ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eee:	1b92      	subs	r2, r2, r6
 8003ef0:	6122      	str	r2, [r4, #16]
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	f8cd a000 	str.w	sl, [sp]
 8003efc:	aa03      	add	r2, sp, #12
 8003efe:	f7ff fee1 	bl	8003cc4 <_printf_common>
 8003f02:	3001      	adds	r0, #1
 8003f04:	d14a      	bne.n	8003f9c <_printf_i+0x1f4>
 8003f06:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0a:	b004      	add	sp, #16
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	2778      	movs	r7, #120	@ 0x78
 8003f1a:	4832      	ldr	r0, [pc, #200]	@ (8003fe4 <_printf_i+0x23c>)
 8003f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	6831      	ldr	r1, [r6, #0]
 8003f24:	061f      	lsls	r7, r3, #24
 8003f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f2a:	d402      	bmi.n	8003f32 <_printf_i+0x18a>
 8003f2c:	065f      	lsls	r7, r3, #25
 8003f2e:	bf48      	it	mi
 8003f30:	b2ad      	uxthmi	r5, r5
 8003f32:	6031      	str	r1, [r6, #0]
 8003f34:	07d9      	lsls	r1, r3, #31
 8003f36:	bf44      	itt	mi
 8003f38:	f043 0320 	orrmi.w	r3, r3, #32
 8003f3c:	6023      	strmi	r3, [r4, #0]
 8003f3e:	b11d      	cbz	r5, 8003f48 <_printf_i+0x1a0>
 8003f40:	2310      	movs	r3, #16
 8003f42:	e7ab      	b.n	8003e9c <_printf_i+0xf4>
 8003f44:	4826      	ldr	r0, [pc, #152]	@ (8003fe0 <_printf_i+0x238>)
 8003f46:	e7e9      	b.n	8003f1c <_printf_i+0x174>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	e7f6      	b.n	8003f40 <_printf_i+0x198>
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7bd      	b.n	8003ed2 <_printf_i+0x12a>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	1d18      	adds	r0, r3, #4
 8003f5c:	6961      	ldr	r1, [r4, #20]
 8003f5e:	6030      	str	r0, [r6, #0]
 8003f60:	062e      	lsls	r6, r5, #24
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	d501      	bpl.n	8003f6a <_printf_i+0x1c2>
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	e002      	b.n	8003f70 <_printf_i+0x1c8>
 8003f6a:	0668      	lsls	r0, r5, #25
 8003f6c:	d5fb      	bpl.n	8003f66 <_printf_i+0x1be>
 8003f6e:	8019      	strh	r1, [r3, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	4616      	mov	r6, r2
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	e7bc      	b.n	8003ef2 <_printf_i+0x14a>
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	6032      	str	r2, [r6, #0]
 8003f80:	681e      	ldr	r6, [r3, #0]
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 f9e8 	bl	800435a <memchr>
 8003f8a:	b108      	cbz	r0, 8003f90 <_printf_i+0x1e8>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	6060      	str	r0, [r4, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f9a:	e7aa      	b.n	8003ef2 <_printf_i+0x14a>
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d0ad      	beq.n	8003f06 <_printf_i+0x15e>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	079b      	lsls	r3, r3, #30
 8003fae:	d413      	bmi.n	8003fd8 <_printf_i+0x230>
 8003fb0:	68e0      	ldr	r0, [r4, #12]
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bfb8      	it	lt
 8003fb8:	4618      	movlt	r0, r3
 8003fba:	e7a6      	b.n	8003f0a <_printf_i+0x162>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d09d      	beq.n	8003f06 <_printf_i+0x15e>
 8003fca:	3501      	adds	r5, #1
 8003fcc:	68e3      	ldr	r3, [r4, #12]
 8003fce:	9903      	ldr	r1, [sp, #12]
 8003fd0:	1a5b      	subs	r3, r3, r1
 8003fd2:	42ab      	cmp	r3, r5
 8003fd4:	dcf2      	bgt.n	8003fbc <_printf_i+0x214>
 8003fd6:	e7eb      	b.n	8003fb0 <_printf_i+0x208>
 8003fd8:	2500      	movs	r5, #0
 8003fda:	f104 0619 	add.w	r6, r4, #25
 8003fde:	e7f5      	b.n	8003fcc <_printf_i+0x224>
 8003fe0:	080064c0 	.word	0x080064c0
 8003fe4:	080064d1 	.word	0x080064d1

08003fe8 <std>:
 8003fe8:	2300      	movs	r3, #0
 8003fea:	b510      	push	{r4, lr}
 8003fec:	4604      	mov	r4, r0
 8003fee:	e9c0 3300 	strd	r3, r3, [r0]
 8003ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ff6:	6083      	str	r3, [r0, #8]
 8003ff8:	8181      	strh	r1, [r0, #12]
 8003ffa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ffc:	81c2      	strh	r2, [r0, #14]
 8003ffe:	6183      	str	r3, [r0, #24]
 8004000:	4619      	mov	r1, r3
 8004002:	2208      	movs	r2, #8
 8004004:	305c      	adds	r0, #92	@ 0x5c
 8004006:	f000 f928 	bl	800425a <memset>
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <std+0x58>)
 800400c:	6224      	str	r4, [r4, #32]
 800400e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <std+0x5c>)
 8004012:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004014:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <std+0x60>)
 8004016:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <std+0x64>)
 800401a:	6323      	str	r3, [r4, #48]	@ 0x30
 800401c:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <std+0x68>)
 800401e:	429c      	cmp	r4, r3
 8004020:	d006      	beq.n	8004030 <std+0x48>
 8004022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004026:	4294      	cmp	r4, r2
 8004028:	d002      	beq.n	8004030 <std+0x48>
 800402a:	33d0      	adds	r3, #208	@ 0xd0
 800402c:	429c      	cmp	r4, r3
 800402e:	d105      	bne.n	800403c <std+0x54>
 8004030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004038:	f000 b98c 	b.w	8004354 <__retarget_lock_init_recursive>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	bf00      	nop
 8004040:	080041d5 	.word	0x080041d5
 8004044:	080041f7 	.word	0x080041f7
 8004048:	0800422f 	.word	0x0800422f
 800404c:	08004253 	.word	0x08004253
 8004050:	20000314 	.word	0x20000314

08004054 <stdio_exit_handler>:
 8004054:	4a02      	ldr	r2, [pc, #8]	@ (8004060 <stdio_exit_handler+0xc>)
 8004056:	4903      	ldr	r1, [pc, #12]	@ (8004064 <stdio_exit_handler+0x10>)
 8004058:	4803      	ldr	r0, [pc, #12]	@ (8004068 <stdio_exit_handler+0x14>)
 800405a:	f000 b869 	b.w	8004130 <_fwalk_sglue>
 800405e:	bf00      	nop
 8004060:	20000024 	.word	0x20000024
 8004064:	08005cc5 	.word	0x08005cc5
 8004068:	20000034 	.word	0x20000034

0800406c <cleanup_stdio>:
 800406c:	6841      	ldr	r1, [r0, #4]
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <cleanup_stdio+0x34>)
 8004070:	b510      	push	{r4, lr}
 8004072:	4299      	cmp	r1, r3
 8004074:	4604      	mov	r4, r0
 8004076:	d001      	beq.n	800407c <cleanup_stdio+0x10>
 8004078:	f001 fe24 	bl	8005cc4 <_fflush_r>
 800407c:	68a1      	ldr	r1, [r4, #8]
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <cleanup_stdio+0x38>)
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <cleanup_stdio+0x1e>
 8004084:	4620      	mov	r0, r4
 8004086:	f001 fe1d 	bl	8005cc4 <_fflush_r>
 800408a:	68e1      	ldr	r1, [r4, #12]
 800408c:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <cleanup_stdio+0x3c>)
 800408e:	4299      	cmp	r1, r3
 8004090:	d004      	beq.n	800409c <cleanup_stdio+0x30>
 8004092:	4620      	mov	r0, r4
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004098:	f001 be14 	b.w	8005cc4 <_fflush_r>
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	20000314 	.word	0x20000314
 80040a4:	2000037c 	.word	0x2000037c
 80040a8:	200003e4 	.word	0x200003e4

080040ac <global_stdio_init.part.0>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <global_stdio_init.part.0+0x30>)
 80040b0:	4c0b      	ldr	r4, [pc, #44]	@ (80040e0 <global_stdio_init.part.0+0x34>)
 80040b2:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <global_stdio_init.part.0+0x38>)
 80040b4:	4620      	mov	r0, r4
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	2104      	movs	r1, #4
 80040ba:	2200      	movs	r2, #0
 80040bc:	f7ff ff94 	bl	8003fe8 <std>
 80040c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040c4:	2201      	movs	r2, #1
 80040c6:	2109      	movs	r1, #9
 80040c8:	f7ff ff8e 	bl	8003fe8 <std>
 80040cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040d0:	2202      	movs	r2, #2
 80040d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d6:	2112      	movs	r1, #18
 80040d8:	f7ff bf86 	b.w	8003fe8 <std>
 80040dc:	2000044c 	.word	0x2000044c
 80040e0:	20000314 	.word	0x20000314
 80040e4:	08004055 	.word	0x08004055

080040e8 <__sfp_lock_acquire>:
 80040e8:	4801      	ldr	r0, [pc, #4]	@ (80040f0 <__sfp_lock_acquire+0x8>)
 80040ea:	f000 b934 	b.w	8004356 <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	20000455 	.word	0x20000455

080040f4 <__sfp_lock_release>:
 80040f4:	4801      	ldr	r0, [pc, #4]	@ (80040fc <__sfp_lock_release+0x8>)
 80040f6:	f000 b92f 	b.w	8004358 <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	20000455 	.word	0x20000455

08004100 <__sinit>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	f7ff fff0 	bl	80040e8 <__sfp_lock_acquire>
 8004108:	6a23      	ldr	r3, [r4, #32]
 800410a:	b11b      	cbz	r3, 8004114 <__sinit+0x14>
 800410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004110:	f7ff bff0 	b.w	80040f4 <__sfp_lock_release>
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__sinit+0x28>)
 8004116:	6223      	str	r3, [r4, #32]
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__sinit+0x2c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f5      	bne.n	800410c <__sinit+0xc>
 8004120:	f7ff ffc4 	bl	80040ac <global_stdio_init.part.0>
 8004124:	e7f2      	b.n	800410c <__sinit+0xc>
 8004126:	bf00      	nop
 8004128:	0800406d 	.word	0x0800406d
 800412c:	2000044c 	.word	0x2000044c

08004130 <_fwalk_sglue>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	4607      	mov	r7, r0
 8004136:	4688      	mov	r8, r1
 8004138:	4614      	mov	r4, r2
 800413a:	2600      	movs	r6, #0
 800413c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004140:	f1b9 0901 	subs.w	r9, r9, #1
 8004144:	d505      	bpl.n	8004152 <_fwalk_sglue+0x22>
 8004146:	6824      	ldr	r4, [r4, #0]
 8004148:	2c00      	cmp	r4, #0
 800414a:	d1f7      	bne.n	800413c <_fwalk_sglue+0xc>
 800414c:	4630      	mov	r0, r6
 800414e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004152:	89ab      	ldrh	r3, [r5, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d907      	bls.n	8004168 <_fwalk_sglue+0x38>
 8004158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800415c:	3301      	adds	r3, #1
 800415e:	d003      	beq.n	8004168 <_fwalk_sglue+0x38>
 8004160:	4629      	mov	r1, r5
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	4306      	orrs	r6, r0
 8004168:	3568      	adds	r5, #104	@ 0x68
 800416a:	e7e9      	b.n	8004140 <_fwalk_sglue+0x10>

0800416c <sniprintf>:
 800416c:	b40c      	push	{r2, r3}
 800416e:	b530      	push	{r4, r5, lr}
 8004170:	4b17      	ldr	r3, [pc, #92]	@ (80041d0 <sniprintf+0x64>)
 8004172:	1e0c      	subs	r4, r1, #0
 8004174:	681d      	ldr	r5, [r3, #0]
 8004176:	b09d      	sub	sp, #116	@ 0x74
 8004178:	da08      	bge.n	800418c <sniprintf+0x20>
 800417a:	238b      	movs	r3, #139	@ 0x8b
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	b01d      	add	sp, #116	@ 0x74
 8004184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004188:	b002      	add	sp, #8
 800418a:	4770      	bx	lr
 800418c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004194:	bf0c      	ite	eq
 8004196:	4623      	moveq	r3, r4
 8004198:	f104 33ff 	addne.w	r3, r4, #4294967295
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	9307      	str	r3, [sp, #28]
 80041a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041a4:	9002      	str	r0, [sp, #8]
 80041a6:	9006      	str	r0, [sp, #24]
 80041a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80041ac:	4628      	mov	r0, r5
 80041ae:	ab21      	add	r3, sp, #132	@ 0x84
 80041b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80041b2:	a902      	add	r1, sp, #8
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	f001 fc09 	bl	80059cc <_svfiprintf_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	bfbc      	itt	lt
 80041be:	238b      	movlt	r3, #139	@ 0x8b
 80041c0:	602b      	strlt	r3, [r5, #0]
 80041c2:	2c00      	cmp	r4, #0
 80041c4:	d0dd      	beq.n	8004182 <sniprintf+0x16>
 80041c6:	2200      	movs	r2, #0
 80041c8:	9b02      	ldr	r3, [sp, #8]
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e7d9      	b.n	8004182 <sniprintf+0x16>
 80041ce:	bf00      	nop
 80041d0:	20000030 	.word	0x20000030

080041d4 <__sread>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	460c      	mov	r4, r1
 80041d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041dc:	f000 f86c 	bl	80042b8 <_read_r>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	bfab      	itete	ge
 80041e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041e6:	89a3      	ldrhlt	r3, [r4, #12]
 80041e8:	181b      	addge	r3, r3, r0
 80041ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041ee:	bfac      	ite	ge
 80041f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041f2:	81a3      	strhlt	r3, [r4, #12]
 80041f4:	bd10      	pop	{r4, pc}

080041f6 <__swrite>:
 80041f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fa:	461f      	mov	r7, r3
 80041fc:	898b      	ldrh	r3, [r1, #12]
 80041fe:	4605      	mov	r5, r0
 8004200:	05db      	lsls	r3, r3, #23
 8004202:	460c      	mov	r4, r1
 8004204:	4616      	mov	r6, r2
 8004206:	d505      	bpl.n	8004214 <__swrite+0x1e>
 8004208:	2302      	movs	r3, #2
 800420a:	2200      	movs	r2, #0
 800420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004210:	f000 f840 	bl	8004294 <_lseek_r>
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	4632      	mov	r2, r6
 8004218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	4628      	mov	r0, r5
 8004220:	463b      	mov	r3, r7
 8004222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800422a:	f000 b857 	b.w	80042dc <_write_r>

0800422e <__sseek>:
 800422e:	b510      	push	{r4, lr}
 8004230:	460c      	mov	r4, r1
 8004232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004236:	f000 f82d 	bl	8004294 <_lseek_r>
 800423a:	1c43      	adds	r3, r0, #1
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	bf15      	itete	ne
 8004240:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800424a:	81a3      	strheq	r3, [r4, #12]
 800424c:	bf18      	it	ne
 800424e:	81a3      	strhne	r3, [r4, #12]
 8004250:	bd10      	pop	{r4, pc}

08004252 <__sclose>:
 8004252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004256:	f000 b80d 	b.w	8004274 <_close_r>

0800425a <memset>:
 800425a:	4603      	mov	r3, r0
 800425c:	4402      	add	r2, r0
 800425e:	4293      	cmp	r3, r2
 8004260:	d100      	bne.n	8004264 <memset+0xa>
 8004262:	4770      	bx	lr
 8004264:	f803 1b01 	strb.w	r1, [r3], #1
 8004268:	e7f9      	b.n	800425e <memset+0x4>
	...

0800426c <_localeconv_r>:
 800426c:	4800      	ldr	r0, [pc, #0]	@ (8004270 <_localeconv_r+0x4>)
 800426e:	4770      	bx	lr
 8004270:	20000170 	.word	0x20000170

08004274 <_close_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	2300      	movs	r3, #0
 8004278:	4d05      	ldr	r5, [pc, #20]	@ (8004290 <_close_r+0x1c>)
 800427a:	4604      	mov	r4, r0
 800427c:	4608      	mov	r0, r1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	f7fd fb2d 	bl	80018de <_close>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_close_r+0x1a>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_close_r+0x1a>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000450 	.word	0x20000450

08004294 <_lseek_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	2200      	movs	r2, #0
 800429e:	4d05      	ldr	r5, [pc, #20]	@ (80042b4 <_lseek_r+0x20>)
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7fd fb3f 	bl	8001926 <_lseek>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_lseek_r+0x1e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_lseek_r+0x1e>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000450 	.word	0x20000450

080042b8 <_read_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4604      	mov	r4, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	2200      	movs	r2, #0
 80042c2:	4d05      	ldr	r5, [pc, #20]	@ (80042d8 <_read_r+0x20>)
 80042c4:	602a      	str	r2, [r5, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fd fad0 	bl	800186c <_read>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_read_r+0x1e>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_read_r+0x1e>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000450 	.word	0x20000450

080042dc <_write_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	2200      	movs	r2, #0
 80042e6:	4d05      	ldr	r5, [pc, #20]	@ (80042fc <_write_r+0x20>)
 80042e8:	602a      	str	r2, [r5, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fd fadb 	bl	80018a6 <_write>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_write_r+0x1e>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_write_r+0x1e>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000450 	.word	0x20000450

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	@ (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000030 	.word	0x20000030

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	2600      	movs	r6, #0
 8004310:	4d0c      	ldr	r5, [pc, #48]	@ (8004344 <__libc_init_array+0x38>)
 8004312:	4c0d      	ldr	r4, [pc, #52]	@ (8004348 <__libc_init_array+0x3c>)
 8004314:	1b64      	subs	r4, r4, r5
 8004316:	10a4      	asrs	r4, r4, #2
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	f002 f86e 	bl	80063fc <_init>
 8004320:	2600      	movs	r6, #0
 8004322:	4d0a      	ldr	r5, [pc, #40]	@ (800434c <__libc_init_array+0x40>)
 8004324:	4c0a      	ldr	r4, [pc, #40]	@ (8004350 <__libc_init_array+0x44>)
 8004326:	1b64      	subs	r4, r4, r5
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f855 3b04 	ldr.w	r3, [r5], #4
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f855 3b04 	ldr.w	r3, [r5], #4
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08006828 	.word	0x08006828
 8004348:	08006828 	.word	0x08006828
 800434c:	08006828 	.word	0x08006828
 8004350:	0800682c 	.word	0x0800682c

08004354 <__retarget_lock_init_recursive>:
 8004354:	4770      	bx	lr

08004356 <__retarget_lock_acquire_recursive>:
 8004356:	4770      	bx	lr

08004358 <__retarget_lock_release_recursive>:
 8004358:	4770      	bx	lr

0800435a <memchr>:
 800435a:	4603      	mov	r3, r0
 800435c:	b510      	push	{r4, lr}
 800435e:	b2c9      	uxtb	r1, r1
 8004360:	4402      	add	r2, r0
 8004362:	4293      	cmp	r3, r2
 8004364:	4618      	mov	r0, r3
 8004366:	d101      	bne.n	800436c <memchr+0x12>
 8004368:	2000      	movs	r0, #0
 800436a:	e003      	b.n	8004374 <memchr+0x1a>
 800436c:	7804      	ldrb	r4, [r0, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	428c      	cmp	r4, r1
 8004372:	d1f6      	bne.n	8004362 <memchr+0x8>
 8004374:	bd10      	pop	{r4, pc}

08004376 <quorem>:
 8004376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	6903      	ldr	r3, [r0, #16]
 800437c:	690c      	ldr	r4, [r1, #16]
 800437e:	4607      	mov	r7, r0
 8004380:	42a3      	cmp	r3, r4
 8004382:	db7e      	blt.n	8004482 <quorem+0x10c>
 8004384:	3c01      	subs	r4, #1
 8004386:	00a3      	lsls	r3, r4, #2
 8004388:	f100 0514 	add.w	r5, r0, #20
 800438c:	f101 0814 	add.w	r8, r1, #20
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800439c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043a0:	3301      	adds	r3, #1
 80043a2:	429a      	cmp	r2, r3
 80043a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80043a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043ac:	d32e      	bcc.n	800440c <quorem+0x96>
 80043ae:	f04f 0a00 	mov.w	sl, #0
 80043b2:	46c4      	mov	ip, r8
 80043b4:	46ae      	mov	lr, r5
 80043b6:	46d3      	mov	fp, sl
 80043b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043bc:	b298      	uxth	r0, r3
 80043be:	fb06 a000 	mla	r0, r6, r0, sl
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	0c02      	lsrs	r2, r0, #16
 80043c6:	fb06 2303 	mla	r3, r6, r3, r2
 80043ca:	f8de 2000 	ldr.w	r2, [lr]
 80043ce:	b280      	uxth	r0, r0
 80043d0:	b292      	uxth	r2, r2
 80043d2:	1a12      	subs	r2, r2, r0
 80043d4:	445a      	add	r2, fp
 80043d6:	f8de 0000 	ldr.w	r0, [lr]
 80043da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80043e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80043e8:	b292      	uxth	r2, r2
 80043ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80043ee:	45e1      	cmp	r9, ip
 80043f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80043f4:	f84e 2b04 	str.w	r2, [lr], #4
 80043f8:	d2de      	bcs.n	80043b8 <quorem+0x42>
 80043fa:	9b00      	ldr	r3, [sp, #0]
 80043fc:	58eb      	ldr	r3, [r5, r3]
 80043fe:	b92b      	cbnz	r3, 800440c <quorem+0x96>
 8004400:	9b01      	ldr	r3, [sp, #4]
 8004402:	3b04      	subs	r3, #4
 8004404:	429d      	cmp	r5, r3
 8004406:	461a      	mov	r2, r3
 8004408:	d32f      	bcc.n	800446a <quorem+0xf4>
 800440a:	613c      	str	r4, [r7, #16]
 800440c:	4638      	mov	r0, r7
 800440e:	f001 f979 	bl	8005704 <__mcmp>
 8004412:	2800      	cmp	r0, #0
 8004414:	db25      	blt.n	8004462 <quorem+0xec>
 8004416:	4629      	mov	r1, r5
 8004418:	2000      	movs	r0, #0
 800441a:	f858 2b04 	ldr.w	r2, [r8], #4
 800441e:	f8d1 c000 	ldr.w	ip, [r1]
 8004422:	fa1f fe82 	uxth.w	lr, r2
 8004426:	fa1f f38c 	uxth.w	r3, ip
 800442a:	eba3 030e 	sub.w	r3, r3, lr
 800442e:	4403      	add	r3, r0
 8004430:	0c12      	lsrs	r2, r2, #16
 8004432:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004436:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800443a:	b29b      	uxth	r3, r3
 800443c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004440:	45c1      	cmp	r9, r8
 8004442:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004446:	f841 3b04 	str.w	r3, [r1], #4
 800444a:	d2e6      	bcs.n	800441a <quorem+0xa4>
 800444c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004450:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004454:	b922      	cbnz	r2, 8004460 <quorem+0xea>
 8004456:	3b04      	subs	r3, #4
 8004458:	429d      	cmp	r5, r3
 800445a:	461a      	mov	r2, r3
 800445c:	d30b      	bcc.n	8004476 <quorem+0x100>
 800445e:	613c      	str	r4, [r7, #16]
 8004460:	3601      	adds	r6, #1
 8004462:	4630      	mov	r0, r6
 8004464:	b003      	add	sp, #12
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	3b04      	subs	r3, #4
 800446e:	2a00      	cmp	r2, #0
 8004470:	d1cb      	bne.n	800440a <quorem+0x94>
 8004472:	3c01      	subs	r4, #1
 8004474:	e7c6      	b.n	8004404 <quorem+0x8e>
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	3b04      	subs	r3, #4
 800447a:	2a00      	cmp	r2, #0
 800447c:	d1ef      	bne.n	800445e <quorem+0xe8>
 800447e:	3c01      	subs	r4, #1
 8004480:	e7ea      	b.n	8004458 <quorem+0xe2>
 8004482:	2000      	movs	r0, #0
 8004484:	e7ee      	b.n	8004464 <quorem+0xee>
	...

08004488 <_dtoa_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	4614      	mov	r4, r2
 800448e:	461d      	mov	r5, r3
 8004490:	69c7      	ldr	r7, [r0, #28]
 8004492:	b097      	sub	sp, #92	@ 0x5c
 8004494:	4683      	mov	fp, r0
 8004496:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800449a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800449c:	b97f      	cbnz	r7, 80044be <_dtoa_r+0x36>
 800449e:	2010      	movs	r0, #16
 80044a0:	f000 fe02 	bl	80050a8 <malloc>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80044aa:	b920      	cbnz	r0, 80044b6 <_dtoa_r+0x2e>
 80044ac:	21ef      	movs	r1, #239	@ 0xef
 80044ae:	4ba8      	ldr	r3, [pc, #672]	@ (8004750 <_dtoa_r+0x2c8>)
 80044b0:	48a8      	ldr	r0, [pc, #672]	@ (8004754 <_dtoa_r+0x2cc>)
 80044b2:	f001 fc67 	bl	8005d84 <__assert_func>
 80044b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044ba:	6007      	str	r7, [r0, #0]
 80044bc:	60c7      	str	r7, [r0, #12]
 80044be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	b159      	cbz	r1, 80044de <_dtoa_r+0x56>
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	2301      	movs	r3, #1
 80044ca:	4093      	lsls	r3, r2
 80044cc:	604a      	str	r2, [r1, #4]
 80044ce:	608b      	str	r3, [r1, #8]
 80044d0:	4658      	mov	r0, fp
 80044d2:	f000 fedf 	bl	8005294 <_Bfree>
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	1e2b      	subs	r3, r5, #0
 80044e0:	bfaf      	iteee	ge
 80044e2:	2300      	movge	r3, #0
 80044e4:	2201      	movlt	r2, #1
 80044e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80044ea:	9303      	strlt	r3, [sp, #12]
 80044ec:	bfa8      	it	ge
 80044ee:	6033      	strge	r3, [r6, #0]
 80044f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80044f4:	4b98      	ldr	r3, [pc, #608]	@ (8004758 <_dtoa_r+0x2d0>)
 80044f6:	bfb8      	it	lt
 80044f8:	6032      	strlt	r2, [r6, #0]
 80044fa:	ea33 0308 	bics.w	r3, r3, r8
 80044fe:	d112      	bne.n	8004526 <_dtoa_r+0x9e>
 8004500:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004504:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800450c:	4323      	orrs	r3, r4
 800450e:	f000 8550 	beq.w	8004fb2 <_dtoa_r+0xb2a>
 8004512:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004514:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800475c <_dtoa_r+0x2d4>
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8552 	beq.w	8004fc2 <_dtoa_r+0xb3a>
 800451e:	f10a 0303 	add.w	r3, sl, #3
 8004522:	f000 bd4c 	b.w	8004fbe <_dtoa_r+0xb36>
 8004526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800452a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800452e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	2300      	movs	r3, #0
 8004536:	f7fc fa37 	bl	80009a8 <__aeabi_dcmpeq>
 800453a:	4607      	mov	r7, r0
 800453c:	b158      	cbz	r0, 8004556 <_dtoa_r+0xce>
 800453e:	2301      	movs	r3, #1
 8004540:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004546:	b113      	cbz	r3, 800454e <_dtoa_r+0xc6>
 8004548:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <_dtoa_r+0x2d8>)
 800454a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004764 <_dtoa_r+0x2dc>
 8004552:	f000 bd36 	b.w	8004fc2 <_dtoa_r+0xb3a>
 8004556:	ab14      	add	r3, sp, #80	@ 0x50
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	ab15      	add	r3, sp, #84	@ 0x54
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4658      	mov	r0, fp
 8004560:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004564:	f001 f97e 	bl	8005864 <__d2b>
 8004568:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800456c:	4681      	mov	r9, r0
 800456e:	2e00      	cmp	r6, #0
 8004570:	d077      	beq.n	8004662 <_dtoa_r+0x1da>
 8004572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004578:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800457c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004580:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004584:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004588:	9712      	str	r7, [sp, #72]	@ 0x48
 800458a:	4619      	mov	r1, r3
 800458c:	2200      	movs	r2, #0
 800458e:	4b76      	ldr	r3, [pc, #472]	@ (8004768 <_dtoa_r+0x2e0>)
 8004590:	f7fb fdea 	bl	8000168 <__aeabi_dsub>
 8004594:	a368      	add	r3, pc, #416	@ (adr r3, 8004738 <_dtoa_r+0x2b0>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fb ff9d 	bl	80004d8 <__aeabi_dmul>
 800459e:	a368      	add	r3, pc, #416	@ (adr r3, 8004740 <_dtoa_r+0x2b8>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fb fde2 	bl	800016c <__adddf3>
 80045a8:	4604      	mov	r4, r0
 80045aa:	4630      	mov	r0, r6
 80045ac:	460d      	mov	r5, r1
 80045ae:	f7fb ff29 	bl	8000404 <__aeabi_i2d>
 80045b2:	a365      	add	r3, pc, #404	@ (adr r3, 8004748 <_dtoa_r+0x2c0>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fb ff8e 	bl	80004d8 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4620      	mov	r0, r4
 80045c2:	4629      	mov	r1, r5
 80045c4:	f7fb fdd2 	bl	800016c <__adddf3>
 80045c8:	4604      	mov	r4, r0
 80045ca:	460d      	mov	r5, r1
 80045cc:	f7fc fa34 	bl	8000a38 <__aeabi_d2iz>
 80045d0:	2200      	movs	r2, #0
 80045d2:	4607      	mov	r7, r0
 80045d4:	2300      	movs	r3, #0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fc f9ef 	bl	80009bc <__aeabi_dcmplt>
 80045de:	b140      	cbz	r0, 80045f2 <_dtoa_r+0x16a>
 80045e0:	4638      	mov	r0, r7
 80045e2:	f7fb ff0f 	bl	8000404 <__aeabi_i2d>
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	f7fc f9dd 	bl	80009a8 <__aeabi_dcmpeq>
 80045ee:	b900      	cbnz	r0, 80045f2 <_dtoa_r+0x16a>
 80045f0:	3f01      	subs	r7, #1
 80045f2:	2f16      	cmp	r7, #22
 80045f4:	d853      	bhi.n	800469e <_dtoa_r+0x216>
 80045f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045fa:	4b5c      	ldr	r3, [pc, #368]	@ (800476c <_dtoa_r+0x2e4>)
 80045fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fc f9da 	bl	80009bc <__aeabi_dcmplt>
 8004608:	2800      	cmp	r0, #0
 800460a:	d04a      	beq.n	80046a2 <_dtoa_r+0x21a>
 800460c:	2300      	movs	r3, #0
 800460e:	3f01      	subs	r7, #1
 8004610:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004612:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004614:	1b9b      	subs	r3, r3, r6
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	bf46      	itte	mi
 800461a:	f1c3 0801 	rsbmi	r8, r3, #1
 800461e:	2300      	movmi	r3, #0
 8004620:	f04f 0800 	movpl.w	r8, #0
 8004624:	9209      	str	r2, [sp, #36]	@ 0x24
 8004626:	bf48      	it	mi
 8004628:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800462a:	2f00      	cmp	r7, #0
 800462c:	db3b      	blt.n	80046a6 <_dtoa_r+0x21e>
 800462e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004630:	970e      	str	r7, [sp, #56]	@ 0x38
 8004632:	443b      	add	r3, r7
 8004634:	9309      	str	r3, [sp, #36]	@ 0x24
 8004636:	2300      	movs	r3, #0
 8004638:	930a      	str	r3, [sp, #40]	@ 0x28
 800463a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800463c:	2b09      	cmp	r3, #9
 800463e:	d866      	bhi.n	800470e <_dtoa_r+0x286>
 8004640:	2b05      	cmp	r3, #5
 8004642:	bfc4      	itt	gt
 8004644:	3b04      	subgt	r3, #4
 8004646:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004648:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800464a:	bfc8      	it	gt
 800464c:	2400      	movgt	r4, #0
 800464e:	f1a3 0302 	sub.w	r3, r3, #2
 8004652:	bfd8      	it	le
 8004654:	2401      	movle	r4, #1
 8004656:	2b03      	cmp	r3, #3
 8004658:	d864      	bhi.n	8004724 <_dtoa_r+0x29c>
 800465a:	e8df f003 	tbb	[pc, r3]
 800465e:	382b      	.short	0x382b
 8004660:	5636      	.short	0x5636
 8004662:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004666:	441e      	add	r6, r3
 8004668:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800466c:	2b20      	cmp	r3, #32
 800466e:	bfc1      	itttt	gt
 8004670:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004674:	fa08 f803 	lslgt.w	r8, r8, r3
 8004678:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800467c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004680:	bfd6      	itet	le
 8004682:	f1c3 0320 	rsble	r3, r3, #32
 8004686:	ea48 0003 	orrgt.w	r0, r8, r3
 800468a:	fa04 f003 	lslle.w	r0, r4, r3
 800468e:	f7fb fea9 	bl	80003e4 <__aeabi_ui2d>
 8004692:	2201      	movs	r2, #1
 8004694:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004698:	3e01      	subs	r6, #1
 800469a:	9212      	str	r2, [sp, #72]	@ 0x48
 800469c:	e775      	b.n	800458a <_dtoa_r+0x102>
 800469e:	2301      	movs	r3, #1
 80046a0:	e7b6      	b.n	8004610 <_dtoa_r+0x188>
 80046a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046a4:	e7b5      	b.n	8004612 <_dtoa_r+0x18a>
 80046a6:	427b      	negs	r3, r7
 80046a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046aa:	2300      	movs	r3, #0
 80046ac:	eba8 0807 	sub.w	r8, r8, r7
 80046b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80046b2:	e7c2      	b.n	800463a <_dtoa_r+0x1b2>
 80046b4:	2300      	movs	r3, #0
 80046b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dc35      	bgt.n	800472a <_dtoa_r+0x2a2>
 80046be:	2301      	movs	r3, #1
 80046c0:	461a      	mov	r2, r3
 80046c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80046c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80046c8:	e00b      	b.n	80046e2 <_dtoa_r+0x25a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e7f3      	b.n	80046b6 <_dtoa_r+0x22e>
 80046ce:	2300      	movs	r3, #0
 80046d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	9308      	str	r3, [sp, #32]
 80046d8:	3301      	adds	r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	9307      	str	r3, [sp, #28]
 80046de:	bfb8      	it	lt
 80046e0:	2301      	movlt	r3, #1
 80046e2:	2100      	movs	r1, #0
 80046e4:	2204      	movs	r2, #4
 80046e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80046ea:	f102 0514 	add.w	r5, r2, #20
 80046ee:	429d      	cmp	r5, r3
 80046f0:	d91f      	bls.n	8004732 <_dtoa_r+0x2aa>
 80046f2:	6041      	str	r1, [r0, #4]
 80046f4:	4658      	mov	r0, fp
 80046f6:	f000 fd8d 	bl	8005214 <_Balloc>
 80046fa:	4682      	mov	sl, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d139      	bne.n	8004774 <_dtoa_r+0x2ec>
 8004700:	4602      	mov	r2, r0
 8004702:	f240 11af 	movw	r1, #431	@ 0x1af
 8004706:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <_dtoa_r+0x2e8>)
 8004708:	e6d2      	b.n	80044b0 <_dtoa_r+0x28>
 800470a:	2301      	movs	r3, #1
 800470c:	e7e0      	b.n	80046d0 <_dtoa_r+0x248>
 800470e:	2401      	movs	r4, #1
 8004710:	2300      	movs	r3, #0
 8004712:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004714:	9320      	str	r3, [sp, #128]	@ 0x80
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	2200      	movs	r2, #0
 800471c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004720:	2312      	movs	r3, #18
 8004722:	e7d0      	b.n	80046c6 <_dtoa_r+0x23e>
 8004724:	2301      	movs	r3, #1
 8004726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004728:	e7f5      	b.n	8004716 <_dtoa_r+0x28e>
 800472a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800472c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004730:	e7d7      	b.n	80046e2 <_dtoa_r+0x25a>
 8004732:	3101      	adds	r1, #1
 8004734:	0052      	lsls	r2, r2, #1
 8004736:	e7d8      	b.n	80046ea <_dtoa_r+0x262>
 8004738:	636f4361 	.word	0x636f4361
 800473c:	3fd287a7 	.word	0x3fd287a7
 8004740:	8b60c8b3 	.word	0x8b60c8b3
 8004744:	3fc68a28 	.word	0x3fc68a28
 8004748:	509f79fb 	.word	0x509f79fb
 800474c:	3fd34413 	.word	0x3fd34413
 8004750:	080064ef 	.word	0x080064ef
 8004754:	08006506 	.word	0x08006506
 8004758:	7ff00000 	.word	0x7ff00000
 800475c:	080064eb 	.word	0x080064eb
 8004760:	080064bf 	.word	0x080064bf
 8004764:	080064be 	.word	0x080064be
 8004768:	3ff80000 	.word	0x3ff80000
 800476c:	08006600 	.word	0x08006600
 8004770:	0800655e 	.word	0x0800655e
 8004774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004778:	6018      	str	r0, [r3, #0]
 800477a:	9b07      	ldr	r3, [sp, #28]
 800477c:	2b0e      	cmp	r3, #14
 800477e:	f200 80a4 	bhi.w	80048ca <_dtoa_r+0x442>
 8004782:	2c00      	cmp	r4, #0
 8004784:	f000 80a1 	beq.w	80048ca <_dtoa_r+0x442>
 8004788:	2f00      	cmp	r7, #0
 800478a:	dd33      	ble.n	80047f4 <_dtoa_r+0x36c>
 800478c:	4b86      	ldr	r3, [pc, #536]	@ (80049a8 <_dtoa_r+0x520>)
 800478e:	f007 020f 	and.w	r2, r7, #15
 8004792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004796:	05f8      	lsls	r0, r7, #23
 8004798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800479c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047a4:	d516      	bpl.n	80047d4 <_dtoa_r+0x34c>
 80047a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047aa:	4b80      	ldr	r3, [pc, #512]	@ (80049ac <_dtoa_r+0x524>)
 80047ac:	2603      	movs	r6, #3
 80047ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047b2:	f7fb ffbb 	bl	800072c <__aeabi_ddiv>
 80047b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ba:	f004 040f 	and.w	r4, r4, #15
 80047be:	4d7b      	ldr	r5, [pc, #492]	@ (80049ac <_dtoa_r+0x524>)
 80047c0:	b954      	cbnz	r4, 80047d8 <_dtoa_r+0x350>
 80047c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ca:	f7fb ffaf 	bl	800072c <__aeabi_ddiv>
 80047ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d2:	e028      	b.n	8004826 <_dtoa_r+0x39e>
 80047d4:	2602      	movs	r6, #2
 80047d6:	e7f2      	b.n	80047be <_dtoa_r+0x336>
 80047d8:	07e1      	lsls	r1, r4, #31
 80047da:	d508      	bpl.n	80047ee <_dtoa_r+0x366>
 80047dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047e4:	f7fb fe78 	bl	80004d8 <__aeabi_dmul>
 80047e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ec:	3601      	adds	r6, #1
 80047ee:	1064      	asrs	r4, r4, #1
 80047f0:	3508      	adds	r5, #8
 80047f2:	e7e5      	b.n	80047c0 <_dtoa_r+0x338>
 80047f4:	f000 80d2 	beq.w	800499c <_dtoa_r+0x514>
 80047f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047fc:	427c      	negs	r4, r7
 80047fe:	4b6a      	ldr	r3, [pc, #424]	@ (80049a8 <_dtoa_r+0x520>)
 8004800:	f004 020f 	and.w	r2, r4, #15
 8004804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb fe64 	bl	80004d8 <__aeabi_dmul>
 8004810:	2602      	movs	r6, #2
 8004812:	2300      	movs	r3, #0
 8004814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004818:	4d64      	ldr	r5, [pc, #400]	@ (80049ac <_dtoa_r+0x524>)
 800481a:	1124      	asrs	r4, r4, #4
 800481c:	2c00      	cmp	r4, #0
 800481e:	f040 80b2 	bne.w	8004986 <_dtoa_r+0x4fe>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1d3      	bne.n	80047ce <_dtoa_r+0x346>
 8004826:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800482a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b7 	beq.w	80049a0 <_dtoa_r+0x518>
 8004832:	2200      	movs	r2, #0
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	4b5d      	ldr	r3, [pc, #372]	@ (80049b0 <_dtoa_r+0x528>)
 800483a:	f7fc f8bf 	bl	80009bc <__aeabi_dcmplt>
 800483e:	2800      	cmp	r0, #0
 8004840:	f000 80ae 	beq.w	80049a0 <_dtoa_r+0x518>
 8004844:	9b07      	ldr	r3, [sp, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80aa 	beq.w	80049a0 <_dtoa_r+0x518>
 800484c:	9b08      	ldr	r3, [sp, #32]
 800484e:	2b00      	cmp	r3, #0
 8004850:	dd37      	ble.n	80048c2 <_dtoa_r+0x43a>
 8004852:	1e7b      	subs	r3, r7, #1
 8004854:	4620      	mov	r0, r4
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	2200      	movs	r2, #0
 800485a:	4629      	mov	r1, r5
 800485c:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <_dtoa_r+0x52c>)
 800485e:	f7fb fe3b 	bl	80004d8 <__aeabi_dmul>
 8004862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004866:	9c08      	ldr	r4, [sp, #32]
 8004868:	3601      	adds	r6, #1
 800486a:	4630      	mov	r0, r6
 800486c:	f7fb fdca 	bl	8000404 <__aeabi_i2d>
 8004870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004874:	f7fb fe30 	bl	80004d8 <__aeabi_dmul>
 8004878:	2200      	movs	r2, #0
 800487a:	4b4f      	ldr	r3, [pc, #316]	@ (80049b8 <_dtoa_r+0x530>)
 800487c:	f7fb fc76 	bl	800016c <__adddf3>
 8004880:	4605      	mov	r5, r0
 8004882:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004886:	2c00      	cmp	r4, #0
 8004888:	f040 809a 	bne.w	80049c0 <_dtoa_r+0x538>
 800488c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	4b4a      	ldr	r3, [pc, #296]	@ (80049bc <_dtoa_r+0x534>)
 8004894:	f7fb fc68 	bl	8000168 <__aeabi_dsub>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4633      	mov	r3, r6
 80048a4:	f7fc f8a8 	bl	80009f8 <__aeabi_dcmpgt>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	f040 828e 	bne.w	8004dca <_dtoa_r+0x942>
 80048ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b2:	462a      	mov	r2, r5
 80048b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048b8:	f7fc f880 	bl	80009bc <__aeabi_dcmplt>
 80048bc:	2800      	cmp	r0, #0
 80048be:	f040 8127 	bne.w	8004b10 <_dtoa_r+0x688>
 80048c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80048c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80048ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f2c0 8163 	blt.w	8004b98 <_dtoa_r+0x710>
 80048d2:	2f0e      	cmp	r7, #14
 80048d4:	f300 8160 	bgt.w	8004b98 <_dtoa_r+0x710>
 80048d8:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <_dtoa_r+0x520>)
 80048da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80048e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da03      	bge.n	80048f4 <_dtoa_r+0x46c>
 80048ec:	9b07      	ldr	r3, [sp, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f340 8100 	ble.w	8004af4 <_dtoa_r+0x66c>
 80048f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048f8:	4656      	mov	r6, sl
 80048fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fe:	4620      	mov	r0, r4
 8004900:	4629      	mov	r1, r5
 8004902:	f7fb ff13 	bl	800072c <__aeabi_ddiv>
 8004906:	f7fc f897 	bl	8000a38 <__aeabi_d2iz>
 800490a:	4680      	mov	r8, r0
 800490c:	f7fb fd7a 	bl	8000404 <__aeabi_i2d>
 8004910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004914:	f7fb fde0 	bl	80004d8 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb fc22 	bl	8000168 <__aeabi_dsub>
 8004924:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004928:	9d07      	ldr	r5, [sp, #28]
 800492a:	f806 4b01 	strb.w	r4, [r6], #1
 800492e:	eba6 040a 	sub.w	r4, r6, sl
 8004932:	42a5      	cmp	r5, r4
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	f040 8116 	bne.w	8004b68 <_dtoa_r+0x6e0>
 800493c:	f7fb fc16 	bl	800016c <__adddf3>
 8004940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	f7fc f856 	bl	80009f8 <__aeabi_dcmpgt>
 800494c:	2800      	cmp	r0, #0
 800494e:	f040 80f8 	bne.w	8004b42 <_dtoa_r+0x6ba>
 8004952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004956:	4620      	mov	r0, r4
 8004958:	4629      	mov	r1, r5
 800495a:	f7fc f825 	bl	80009a8 <__aeabi_dcmpeq>
 800495e:	b118      	cbz	r0, 8004968 <_dtoa_r+0x4e0>
 8004960:	f018 0f01 	tst.w	r8, #1
 8004964:	f040 80ed 	bne.w	8004b42 <_dtoa_r+0x6ba>
 8004968:	4649      	mov	r1, r9
 800496a:	4658      	mov	r0, fp
 800496c:	f000 fc92 	bl	8005294 <_Bfree>
 8004970:	2300      	movs	r3, #0
 8004972:	7033      	strb	r3, [r6, #0]
 8004974:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004976:	3701      	adds	r7, #1
 8004978:	601f      	str	r7, [r3, #0]
 800497a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8320 	beq.w	8004fc2 <_dtoa_r+0xb3a>
 8004982:	601e      	str	r6, [r3, #0]
 8004984:	e31d      	b.n	8004fc2 <_dtoa_r+0xb3a>
 8004986:	07e2      	lsls	r2, r4, #31
 8004988:	d505      	bpl.n	8004996 <_dtoa_r+0x50e>
 800498a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800498e:	f7fb fda3 	bl	80004d8 <__aeabi_dmul>
 8004992:	2301      	movs	r3, #1
 8004994:	3601      	adds	r6, #1
 8004996:	1064      	asrs	r4, r4, #1
 8004998:	3508      	adds	r5, #8
 800499a:	e73f      	b.n	800481c <_dtoa_r+0x394>
 800499c:	2602      	movs	r6, #2
 800499e:	e742      	b.n	8004826 <_dtoa_r+0x39e>
 80049a0:	9c07      	ldr	r4, [sp, #28]
 80049a2:	9704      	str	r7, [sp, #16]
 80049a4:	e761      	b.n	800486a <_dtoa_r+0x3e2>
 80049a6:	bf00      	nop
 80049a8:	08006600 	.word	0x08006600
 80049ac:	080065d8 	.word	0x080065d8
 80049b0:	3ff00000 	.word	0x3ff00000
 80049b4:	40240000 	.word	0x40240000
 80049b8:	401c0000 	.word	0x401c0000
 80049bc:	40140000 	.word	0x40140000
 80049c0:	4b70      	ldr	r3, [pc, #448]	@ (8004b84 <_dtoa_r+0x6fc>)
 80049c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049cc:	4454      	add	r4, sl
 80049ce:	2900      	cmp	r1, #0
 80049d0:	d045      	beq.n	8004a5e <_dtoa_r+0x5d6>
 80049d2:	2000      	movs	r0, #0
 80049d4:	496c      	ldr	r1, [pc, #432]	@ (8004b88 <_dtoa_r+0x700>)
 80049d6:	f7fb fea9 	bl	800072c <__aeabi_ddiv>
 80049da:	4633      	mov	r3, r6
 80049dc:	462a      	mov	r2, r5
 80049de:	f7fb fbc3 	bl	8000168 <__aeabi_dsub>
 80049e2:	4656      	mov	r6, sl
 80049e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80049e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ec:	f7fc f824 	bl	8000a38 <__aeabi_d2iz>
 80049f0:	4605      	mov	r5, r0
 80049f2:	f7fb fd07 	bl	8000404 <__aeabi_i2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049fe:	f7fb fbb3 	bl	8000168 <__aeabi_dsub>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	3530      	adds	r5, #48	@ 0x30
 8004a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a10:	f806 5b01 	strb.w	r5, [r6], #1
 8004a14:	f7fb ffd2 	bl	80009bc <__aeabi_dcmplt>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d163      	bne.n	8004ae4 <_dtoa_r+0x65c>
 8004a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a20:	2000      	movs	r0, #0
 8004a22:	495a      	ldr	r1, [pc, #360]	@ (8004b8c <_dtoa_r+0x704>)
 8004a24:	f7fb fba0 	bl	8000168 <__aeabi_dsub>
 8004a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a2c:	f7fb ffc6 	bl	80009bc <__aeabi_dcmplt>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	f040 8087 	bne.w	8004b44 <_dtoa_r+0x6bc>
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	f43f af43 	beq.w	80048c2 <_dtoa_r+0x43a>
 8004a3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a40:	2200      	movs	r2, #0
 8004a42:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <_dtoa_r+0x708>)
 8004a44:	f7fb fd48 	bl	80004d8 <__aeabi_dmul>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	4b4f      	ldr	r3, [pc, #316]	@ (8004b90 <_dtoa_r+0x708>)
 8004a54:	f7fb fd40 	bl	80004d8 <__aeabi_dmul>
 8004a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5c:	e7c4      	b.n	80049e8 <_dtoa_r+0x560>
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	f7fb fd39 	bl	80004d8 <__aeabi_dmul>
 8004a66:	4656      	mov	r6, sl
 8004a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a6c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a72:	f7fb ffe1 	bl	8000a38 <__aeabi_d2iz>
 8004a76:	4605      	mov	r5, r0
 8004a78:	f7fb fcc4 	bl	8000404 <__aeabi_i2d>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a84:	f7fb fb70 	bl	8000168 <__aeabi_dsub>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	3530      	adds	r5, #48	@ 0x30
 8004a8e:	f806 5b01 	strb.w	r5, [r6], #1
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	d124      	bne.n	8004ae8 <_dtoa_r+0x660>
 8004a9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004aa2:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <_dtoa_r+0x700>)
 8004aa4:	f7fb fb62 	bl	800016c <__adddf3>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab0:	f7fb ffa2 	bl	80009f8 <__aeabi_dcmpgt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d145      	bne.n	8004b44 <_dtoa_r+0x6bc>
 8004ab8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004abc:	2000      	movs	r0, #0
 8004abe:	4932      	ldr	r1, [pc, #200]	@ (8004b88 <_dtoa_r+0x700>)
 8004ac0:	f7fb fb52 	bl	8000168 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004acc:	f7fb ff76 	bl	80009bc <__aeabi_dcmplt>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f43f aef6 	beq.w	80048c2 <_dtoa_r+0x43a>
 8004ad6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004ad8:	1e73      	subs	r3, r6, #1
 8004ada:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004adc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d0f8      	beq.n	8004ad6 <_dtoa_r+0x64e>
 8004ae4:	9f04      	ldr	r7, [sp, #16]
 8004ae6:	e73f      	b.n	8004968 <_dtoa_r+0x4e0>
 8004ae8:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <_dtoa_r+0x708>)
 8004aea:	f7fb fcf5 	bl	80004d8 <__aeabi_dmul>
 8004aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af2:	e7bc      	b.n	8004a6e <_dtoa_r+0x5e6>
 8004af4:	d10c      	bne.n	8004b10 <_dtoa_r+0x688>
 8004af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004afa:	2200      	movs	r2, #0
 8004afc:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <_dtoa_r+0x70c>)
 8004afe:	f7fb fceb 	bl	80004d8 <__aeabi_dmul>
 8004b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b06:	f7fb ff6d 	bl	80009e4 <__aeabi_dcmpge>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f000 815b 	beq.w	8004dc6 <_dtoa_r+0x93e>
 8004b10:	2400      	movs	r4, #0
 8004b12:	4625      	mov	r5, r4
 8004b14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b16:	4656      	mov	r6, sl
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	2700      	movs	r7, #0
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4658      	mov	r0, fp
 8004b22:	f000 fbb7 	bl	8005294 <_Bfree>
 8004b26:	2d00      	cmp	r5, #0
 8004b28:	d0dc      	beq.n	8004ae4 <_dtoa_r+0x65c>
 8004b2a:	b12f      	cbz	r7, 8004b38 <_dtoa_r+0x6b0>
 8004b2c:	42af      	cmp	r7, r5
 8004b2e:	d003      	beq.n	8004b38 <_dtoa_r+0x6b0>
 8004b30:	4639      	mov	r1, r7
 8004b32:	4658      	mov	r0, fp
 8004b34:	f000 fbae 	bl	8005294 <_Bfree>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4658      	mov	r0, fp
 8004b3c:	f000 fbaa 	bl	8005294 <_Bfree>
 8004b40:	e7d0      	b.n	8004ae4 <_dtoa_r+0x65c>
 8004b42:	9704      	str	r7, [sp, #16]
 8004b44:	4633      	mov	r3, r6
 8004b46:	461e      	mov	r6, r3
 8004b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b4c:	2a39      	cmp	r2, #57	@ 0x39
 8004b4e:	d107      	bne.n	8004b60 <_dtoa_r+0x6d8>
 8004b50:	459a      	cmp	sl, r3
 8004b52:	d1f8      	bne.n	8004b46 <_dtoa_r+0x6be>
 8004b54:	9a04      	ldr	r2, [sp, #16]
 8004b56:	3201      	adds	r2, #1
 8004b58:	9204      	str	r2, [sp, #16]
 8004b5a:	2230      	movs	r2, #48	@ 0x30
 8004b5c:	f88a 2000 	strb.w	r2, [sl]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	3201      	adds	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e7bd      	b.n	8004ae4 <_dtoa_r+0x65c>
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <_dtoa_r+0x708>)
 8004b6c:	f7fb fcb4 	bl	80004d8 <__aeabi_dmul>
 8004b70:	2200      	movs	r2, #0
 8004b72:	2300      	movs	r3, #0
 8004b74:	4604      	mov	r4, r0
 8004b76:	460d      	mov	r5, r1
 8004b78:	f7fb ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f43f aebc 	beq.w	80048fa <_dtoa_r+0x472>
 8004b82:	e6f1      	b.n	8004968 <_dtoa_r+0x4e0>
 8004b84:	08006600 	.word	0x08006600
 8004b88:	3fe00000 	.word	0x3fe00000
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	40240000 	.word	0x40240000
 8004b94:	40140000 	.word	0x40140000
 8004b98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	f000 80db 	beq.w	8004d56 <_dtoa_r+0x8ce>
 8004ba0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ba2:	2a01      	cmp	r2, #1
 8004ba4:	f300 80bf 	bgt.w	8004d26 <_dtoa_r+0x89e>
 8004ba8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	f000 80b7 	beq.w	8004d1e <_dtoa_r+0x896>
 8004bb0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bb4:	4646      	mov	r6, r8
 8004bb6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bba:	2101      	movs	r1, #1
 8004bbc:	441a      	add	r2, r3
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	4498      	add	r8, r3
 8004bc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc4:	f000 fc1a 	bl	80053fc <__i2b>
 8004bc8:	4605      	mov	r5, r0
 8004bca:	b15e      	cbz	r6, 8004be4 <_dtoa_r+0x75c>
 8004bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dd08      	ble.n	8004be4 <_dtoa_r+0x75c>
 8004bd2:	42b3      	cmp	r3, r6
 8004bd4:	bfa8      	it	ge
 8004bd6:	4633      	movge	r3, r6
 8004bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bda:	eba8 0803 	sub.w	r8, r8, r3
 8004bde:	1af6      	subs	r6, r6, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004be6:	b1f3      	cbz	r3, 8004c26 <_dtoa_r+0x79e>
 8004be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80b7 	beq.w	8004d5e <_dtoa_r+0x8d6>
 8004bf0:	b18c      	cbz	r4, 8004c16 <_dtoa_r+0x78e>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	4658      	mov	r0, fp
 8004bf8:	f000 fcbe 	bl	8005578 <__pow5mult>
 8004bfc:	464a      	mov	r2, r9
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4605      	mov	r5, r0
 8004c02:	4658      	mov	r0, fp
 8004c04:	f000 fc10 	bl	8005428 <__multiply>
 8004c08:	4649      	mov	r1, r9
 8004c0a:	9004      	str	r0, [sp, #16]
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	f000 fb41 	bl	8005294 <_Bfree>
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	4699      	mov	r9, r3
 8004c16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c18:	1b1a      	subs	r2, r3, r4
 8004c1a:	d004      	beq.n	8004c26 <_dtoa_r+0x79e>
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	4658      	mov	r0, fp
 8004c20:	f000 fcaa 	bl	8005578 <__pow5mult>
 8004c24:	4681      	mov	r9, r0
 8004c26:	2101      	movs	r1, #1
 8004c28:	4658      	mov	r0, fp
 8004c2a:	f000 fbe7 	bl	80053fc <__i2b>
 8004c2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c30:	4604      	mov	r4, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 81c9 	beq.w	8004fca <_dtoa_r+0xb42>
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	f000 fc9b 	bl	8005578 <__pow5mult>
 8004c42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c44:	4604      	mov	r4, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f300 808f 	bgt.w	8004d6a <_dtoa_r+0x8e2>
 8004c4c:	9b02      	ldr	r3, [sp, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8087 	bne.w	8004d62 <_dtoa_r+0x8da>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8083 	bne.w	8004d66 <_dtoa_r+0x8de>
 8004c60:	9b03      	ldr	r3, [sp, #12]
 8004c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c66:	0d1b      	lsrs	r3, r3, #20
 8004c68:	051b      	lsls	r3, r3, #20
 8004c6a:	b12b      	cbz	r3, 8004c78 <_dtoa_r+0x7f0>
 8004c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	3301      	adds	r3, #1
 8004c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c76:	2301      	movs	r3, #1
 8004c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 81aa 	beq.w	8004fd6 <_dtoa_r+0xb4e>
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c88:	6918      	ldr	r0, [r3, #16]
 8004c8a:	f000 fb6b 	bl	8005364 <__hi0bits>
 8004c8e:	f1c0 0020 	rsb	r0, r0, #32
 8004c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c94:	4418      	add	r0, r3
 8004c96:	f010 001f 	ands.w	r0, r0, #31
 8004c9a:	d071      	beq.n	8004d80 <_dtoa_r+0x8f8>
 8004c9c:	f1c0 0320 	rsb	r3, r0, #32
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	dd65      	ble.n	8004d70 <_dtoa_r+0x8e8>
 8004ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca6:	f1c0 001c 	rsb	r0, r0, #28
 8004caa:	4403      	add	r3, r0
 8004cac:	4480      	add	r8, r0
 8004cae:	4406      	add	r6, r0
 8004cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cb2:	f1b8 0f00 	cmp.w	r8, #0
 8004cb6:	dd05      	ble.n	8004cc4 <_dtoa_r+0x83c>
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4642      	mov	r2, r8
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	f000 fcb5 	bl	800562c <__lshift>
 8004cc2:	4681      	mov	r9, r0
 8004cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd05      	ble.n	8004cd6 <_dtoa_r+0x84e>
 8004cca:	4621      	mov	r1, r4
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4658      	mov	r0, fp
 8004cd0:	f000 fcac 	bl	800562c <__lshift>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d053      	beq.n	8004d84 <_dtoa_r+0x8fc>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4648      	mov	r0, r9
 8004ce0:	f000 fd10 	bl	8005704 <__mcmp>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	da4d      	bge.n	8004d84 <_dtoa_r+0x8fc>
 8004ce8:	1e7b      	subs	r3, r7, #1
 8004cea:	4649      	mov	r1, r9
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	220a      	movs	r2, #10
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4658      	mov	r0, fp
 8004cf4:	f000 faf0 	bl	80052d8 <__multadd>
 8004cf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cfa:	4681      	mov	r9, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 816c 	beq.w	8004fda <_dtoa_r+0xb52>
 8004d02:	2300      	movs	r3, #0
 8004d04:	4629      	mov	r1, r5
 8004d06:	220a      	movs	r2, #10
 8004d08:	4658      	mov	r0, fp
 8004d0a:	f000 fae5 	bl	80052d8 <__multadd>
 8004d0e:	9b08      	ldr	r3, [sp, #32]
 8004d10:	4605      	mov	r5, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dc61      	bgt.n	8004dda <_dtoa_r+0x952>
 8004d16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	dc3b      	bgt.n	8004d94 <_dtoa_r+0x90c>
 8004d1c:	e05d      	b.n	8004dda <_dtoa_r+0x952>
 8004d1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d24:	e746      	b.n	8004bb4 <_dtoa_r+0x72c>
 8004d26:	9b07      	ldr	r3, [sp, #28]
 8004d28:	1e5c      	subs	r4, r3, #1
 8004d2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	bfbf      	itttt	lt
 8004d30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d34:	1ae3      	sublt	r3, r4, r3
 8004d36:	18d2      	addlt	r2, r2, r3
 8004d38:	bfa8      	it	ge
 8004d3a:	1b1c      	subge	r4, r3, r4
 8004d3c:	9b07      	ldr	r3, [sp, #28]
 8004d3e:	bfbe      	ittt	lt
 8004d40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d44:	2400      	movlt	r4, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bfb5      	itete	lt
 8004d4a:	eba8 0603 	sublt.w	r6, r8, r3
 8004d4e:	4646      	movge	r6, r8
 8004d50:	2300      	movlt	r3, #0
 8004d52:	9b07      	ldrge	r3, [sp, #28]
 8004d54:	e730      	b.n	8004bb8 <_dtoa_r+0x730>
 8004d56:	4646      	mov	r6, r8
 8004d58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d5c:	e735      	b.n	8004bca <_dtoa_r+0x742>
 8004d5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d60:	e75c      	b.n	8004c1c <_dtoa_r+0x794>
 8004d62:	2300      	movs	r3, #0
 8004d64:	e788      	b.n	8004c78 <_dtoa_r+0x7f0>
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	e786      	b.n	8004c78 <_dtoa_r+0x7f0>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d6e:	e788      	b.n	8004c82 <_dtoa_r+0x7fa>
 8004d70:	d09f      	beq.n	8004cb2 <_dtoa_r+0x82a>
 8004d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d74:	331c      	adds	r3, #28
 8004d76:	441a      	add	r2, r3
 8004d78:	4498      	add	r8, r3
 8004d7a:	441e      	add	r6, r3
 8004d7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d7e:	e798      	b.n	8004cb2 <_dtoa_r+0x82a>
 8004d80:	4603      	mov	r3, r0
 8004d82:	e7f6      	b.n	8004d72 <_dtoa_r+0x8ea>
 8004d84:	9b07      	ldr	r3, [sp, #28]
 8004d86:	9704      	str	r7, [sp, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dc20      	bgt.n	8004dce <_dtoa_r+0x946>
 8004d8c:	9308      	str	r3, [sp, #32]
 8004d8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	dd1e      	ble.n	8004dd2 <_dtoa_r+0x94a>
 8004d94:	9b08      	ldr	r3, [sp, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f47f aebc 	bne.w	8004b14 <_dtoa_r+0x68c>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	2205      	movs	r2, #5
 8004da0:	4658      	mov	r0, fp
 8004da2:	f000 fa99 	bl	80052d8 <__multadd>
 8004da6:	4601      	mov	r1, r0
 8004da8:	4604      	mov	r4, r0
 8004daa:	4648      	mov	r0, r9
 8004dac:	f000 fcaa 	bl	8005704 <__mcmp>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f77f aeaf 	ble.w	8004b14 <_dtoa_r+0x68c>
 8004db6:	2331      	movs	r3, #49	@ 0x31
 8004db8:	4656      	mov	r6, sl
 8004dba:	f806 3b01 	strb.w	r3, [r6], #1
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	e6aa      	b.n	8004b1c <_dtoa_r+0x694>
 8004dc6:	9c07      	ldr	r4, [sp, #28]
 8004dc8:	9704      	str	r7, [sp, #16]
 8004dca:	4625      	mov	r5, r4
 8004dcc:	e7f3      	b.n	8004db6 <_dtoa_r+0x92e>
 8004dce:	9b07      	ldr	r3, [sp, #28]
 8004dd0:	9308      	str	r3, [sp, #32]
 8004dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8104 	beq.w	8004fe2 <_dtoa_r+0xb5a>
 8004dda:	2e00      	cmp	r6, #0
 8004ddc:	dd05      	ble.n	8004dea <_dtoa_r+0x962>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4632      	mov	r2, r6
 8004de2:	4658      	mov	r0, fp
 8004de4:	f000 fc22 	bl	800562c <__lshift>
 8004de8:	4605      	mov	r5, r0
 8004dea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05a      	beq.n	8004ea6 <_dtoa_r+0xa1e>
 8004df0:	4658      	mov	r0, fp
 8004df2:	6869      	ldr	r1, [r5, #4]
 8004df4:	f000 fa0e 	bl	8005214 <_Balloc>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	b928      	cbnz	r0, 8004e08 <_dtoa_r+0x980>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e02:	4b83      	ldr	r3, [pc, #524]	@ (8005010 <_dtoa_r+0xb88>)
 8004e04:	f7ff bb54 	b.w	80044b0 <_dtoa_r+0x28>
 8004e08:	692a      	ldr	r2, [r5, #16]
 8004e0a:	f105 010c 	add.w	r1, r5, #12
 8004e0e:	3202      	adds	r2, #2
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	300c      	adds	r0, #12
 8004e14:	f000 ffa8 	bl	8005d68 <memcpy>
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4658      	mov	r0, fp
 8004e1e:	f000 fc05 	bl	800562c <__lshift>
 8004e22:	462f      	mov	r7, r5
 8004e24:	4605      	mov	r5, r0
 8004e26:	f10a 0301 	add.w	r3, sl, #1
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	9b08      	ldr	r3, [sp, #32]
 8004e2e:	4453      	add	r3, sl
 8004e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e3a:	9b07      	ldr	r3, [sp, #28]
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	4648      	mov	r0, r9
 8004e42:	9302      	str	r3, [sp, #8]
 8004e44:	f7ff fa97 	bl	8004376 <quorem>
 8004e48:	4639      	mov	r1, r7
 8004e4a:	9008      	str	r0, [sp, #32]
 8004e4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e50:	4648      	mov	r0, r9
 8004e52:	f000 fc57 	bl	8005704 <__mcmp>
 8004e56:	462a      	mov	r2, r5
 8004e58:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 fc6d 	bl	800573c <__mdiff>
 8004e62:	68c2      	ldr	r2, [r0, #12]
 8004e64:	4606      	mov	r6, r0
 8004e66:	bb02      	cbnz	r2, 8004eaa <_dtoa_r+0xa22>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4648      	mov	r0, r9
 8004e6c:	f000 fc4a 	bl	8005704 <__mcmp>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4631      	mov	r1, r6
 8004e74:	4658      	mov	r0, fp
 8004e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e78:	f000 fa0c 	bl	8005294 <_Bfree>
 8004e7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e80:	9e07      	ldr	r6, [sp, #28]
 8004e82:	ea43 0102 	orr.w	r1, r3, r2
 8004e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e88:	4319      	orrs	r1, r3
 8004e8a:	d110      	bne.n	8004eae <_dtoa_r+0xa26>
 8004e8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e90:	d029      	beq.n	8004ee6 <_dtoa_r+0xa5e>
 8004e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dd02      	ble.n	8004e9e <_dtoa_r+0xa16>
 8004e98:	9b08      	ldr	r3, [sp, #32]
 8004e9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004e9e:	9b02      	ldr	r3, [sp, #8]
 8004ea0:	f883 8000 	strb.w	r8, [r3]
 8004ea4:	e63b      	b.n	8004b1e <_dtoa_r+0x696>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	e7bb      	b.n	8004e22 <_dtoa_r+0x99a>
 8004eaa:	2201      	movs	r2, #1
 8004eac:	e7e1      	b.n	8004e72 <_dtoa_r+0x9ea>
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db04      	blt.n	8004ebe <_dtoa_r+0xa36>
 8004eb4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	d120      	bne.n	8004f00 <_dtoa_r+0xa78>
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	dded      	ble.n	8004e9e <_dtoa_r+0xa16>
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4658      	mov	r0, fp
 8004ec8:	f000 fbb0 	bl	800562c <__lshift>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4681      	mov	r9, r0
 8004ed0:	f000 fc18 	bl	8005704 <__mcmp>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	dc03      	bgt.n	8004ee0 <_dtoa_r+0xa58>
 8004ed8:	d1e1      	bne.n	8004e9e <_dtoa_r+0xa16>
 8004eda:	f018 0f01 	tst.w	r8, #1
 8004ede:	d0de      	beq.n	8004e9e <_dtoa_r+0xa16>
 8004ee0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ee4:	d1d8      	bne.n	8004e98 <_dtoa_r+0xa10>
 8004ee6:	2339      	movs	r3, #57	@ 0x39
 8004ee8:	9a02      	ldr	r2, [sp, #8]
 8004eea:	7013      	strb	r3, [r2, #0]
 8004eec:	4633      	mov	r3, r6
 8004eee:	461e      	mov	r6, r3
 8004ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	2a39      	cmp	r2, #57	@ 0x39
 8004ef8:	d052      	beq.n	8004fa0 <_dtoa_r+0xb18>
 8004efa:	3201      	adds	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e60e      	b.n	8004b1e <_dtoa_r+0x696>
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	dd07      	ble.n	8004f14 <_dtoa_r+0xa8c>
 8004f04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f08:	d0ed      	beq.n	8004ee6 <_dtoa_r+0xa5e>
 8004f0a:	9a02      	ldr	r2, [sp, #8]
 8004f0c:	f108 0301 	add.w	r3, r8, #1
 8004f10:	7013      	strb	r3, [r2, #0]
 8004f12:	e604      	b.n	8004b1e <_dtoa_r+0x696>
 8004f14:	9b07      	ldr	r3, [sp, #28]
 8004f16:	9a07      	ldr	r2, [sp, #28]
 8004f18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d028      	beq.n	8004f74 <_dtoa_r+0xaec>
 8004f22:	4649      	mov	r1, r9
 8004f24:	2300      	movs	r3, #0
 8004f26:	220a      	movs	r2, #10
 8004f28:	4658      	mov	r0, fp
 8004f2a:	f000 f9d5 	bl	80052d8 <__multadd>
 8004f2e:	42af      	cmp	r7, r5
 8004f30:	4681      	mov	r9, r0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	f04f 020a 	mov.w	r2, #10
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	4658      	mov	r0, fp
 8004f3e:	d107      	bne.n	8004f50 <_dtoa_r+0xac8>
 8004f40:	f000 f9ca 	bl	80052d8 <__multadd>
 8004f44:	4607      	mov	r7, r0
 8004f46:	4605      	mov	r5, r0
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	9307      	str	r3, [sp, #28]
 8004f4e:	e774      	b.n	8004e3a <_dtoa_r+0x9b2>
 8004f50:	f000 f9c2 	bl	80052d8 <__multadd>
 8004f54:	4629      	mov	r1, r5
 8004f56:	4607      	mov	r7, r0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	4658      	mov	r0, fp
 8004f5e:	f000 f9bb 	bl	80052d8 <__multadd>
 8004f62:	4605      	mov	r5, r0
 8004f64:	e7f0      	b.n	8004f48 <_dtoa_r+0xac0>
 8004f66:	9b08      	ldr	r3, [sp, #32]
 8004f68:	2700      	movs	r7, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bfcc      	ite	gt
 8004f6e:	461e      	movgt	r6, r3
 8004f70:	2601      	movle	r6, #1
 8004f72:	4456      	add	r6, sl
 8004f74:	4649      	mov	r1, r9
 8004f76:	2201      	movs	r2, #1
 8004f78:	4658      	mov	r0, fp
 8004f7a:	f000 fb57 	bl	800562c <__lshift>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4681      	mov	r9, r0
 8004f82:	f000 fbbf 	bl	8005704 <__mcmp>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	dcb0      	bgt.n	8004eec <_dtoa_r+0xa64>
 8004f8a:	d102      	bne.n	8004f92 <_dtoa_r+0xb0a>
 8004f8c:	f018 0f01 	tst.w	r8, #1
 8004f90:	d1ac      	bne.n	8004eec <_dtoa_r+0xa64>
 8004f92:	4633      	mov	r3, r6
 8004f94:	461e      	mov	r6, r3
 8004f96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f9a:	2a30      	cmp	r2, #48	@ 0x30
 8004f9c:	d0fa      	beq.n	8004f94 <_dtoa_r+0xb0c>
 8004f9e:	e5be      	b.n	8004b1e <_dtoa_r+0x696>
 8004fa0:	459a      	cmp	sl, r3
 8004fa2:	d1a4      	bne.n	8004eee <_dtoa_r+0xa66>
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	2331      	movs	r3, #49	@ 0x31
 8004fac:	f88a 3000 	strb.w	r3, [sl]
 8004fb0:	e5b5      	b.n	8004b1e <_dtoa_r+0x696>
 8004fb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005014 <_dtoa_r+0xb8c>
 8004fb8:	b11b      	cbz	r3, 8004fc2 <_dtoa_r+0xb3a>
 8004fba:	f10a 0308 	add.w	r3, sl, #8
 8004fbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	b017      	add	sp, #92	@ 0x5c
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f77f ae3d 	ble.w	8004c4c <_dtoa_r+0x7c4>
 8004fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e65b      	b.n	8004c92 <_dtoa_r+0x80a>
 8004fda:	9b08      	ldr	r3, [sp, #32]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f77f aed6 	ble.w	8004d8e <_dtoa_r+0x906>
 8004fe2:	4656      	mov	r6, sl
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4648      	mov	r0, r9
 8004fe8:	f7ff f9c5 	bl	8004376 <quorem>
 8004fec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ff0:	9b08      	ldr	r3, [sp, #32]
 8004ff2:	f806 8b01 	strb.w	r8, [r6], #1
 8004ff6:	eba6 020a 	sub.w	r2, r6, sl
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	ddb3      	ble.n	8004f66 <_dtoa_r+0xade>
 8004ffe:	4649      	mov	r1, r9
 8005000:	2300      	movs	r3, #0
 8005002:	220a      	movs	r2, #10
 8005004:	4658      	mov	r0, fp
 8005006:	f000 f967 	bl	80052d8 <__multadd>
 800500a:	4681      	mov	r9, r0
 800500c:	e7ea      	b.n	8004fe4 <_dtoa_r+0xb5c>
 800500e:	bf00      	nop
 8005010:	0800655e 	.word	0x0800655e
 8005014:	080064e2 	.word	0x080064e2

08005018 <_free_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	2900      	cmp	r1, #0
 800501e:	d040      	beq.n	80050a2 <_free_r+0x8a>
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f0c      	subs	r4, r1, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfb8      	it	lt
 800502a:	18e4      	addlt	r4, r4, r3
 800502c:	f000 f8e6 	bl	80051fc <__malloc_lock>
 8005030:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <_free_r+0x8c>)
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	b933      	cbnz	r3, 8005044 <_free_r+0x2c>
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	4628      	mov	r0, r5
 800503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005040:	f000 b8e2 	b.w	8005208 <__malloc_unlock>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d908      	bls.n	800505a <_free_r+0x42>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	1821      	adds	r1, r4, r0
 800504c:	428b      	cmp	r3, r1
 800504e:	bf01      	itttt	eq
 8005050:	6819      	ldreq	r1, [r3, #0]
 8005052:	685b      	ldreq	r3, [r3, #4]
 8005054:	1809      	addeq	r1, r1, r0
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	e7ed      	b.n	8005036 <_free_r+0x1e>
 800505a:	461a      	mov	r2, r3
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b10b      	cbz	r3, 8005064 <_free_r+0x4c>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d9fa      	bls.n	800505a <_free_r+0x42>
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	1850      	adds	r0, r2, r1
 8005068:	42a0      	cmp	r0, r4
 800506a:	d10b      	bne.n	8005084 <_free_r+0x6c>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	4401      	add	r1, r0
 8005070:	1850      	adds	r0, r2, r1
 8005072:	4283      	cmp	r3, r0
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	d1e0      	bne.n	800503a <_free_r+0x22>
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4408      	add	r0, r1
 800507e:	6010      	str	r0, [r2, #0]
 8005080:	6053      	str	r3, [r2, #4]
 8005082:	e7da      	b.n	800503a <_free_r+0x22>
 8005084:	d902      	bls.n	800508c <_free_r+0x74>
 8005086:	230c      	movs	r3, #12
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	e7d6      	b.n	800503a <_free_r+0x22>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	1821      	adds	r1, r4, r0
 8005090:	428b      	cmp	r3, r1
 8005092:	bf01      	itttt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6054      	str	r4, [r2, #4]
 80050a0:	e7cb      	b.n	800503a <_free_r+0x22>
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	2000045c 	.word	0x2000045c

080050a8 <malloc>:
 80050a8:	4b02      	ldr	r3, [pc, #8]	@ (80050b4 <malloc+0xc>)
 80050aa:	4601      	mov	r1, r0
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	f000 b825 	b.w	80050fc <_malloc_r>
 80050b2:	bf00      	nop
 80050b4:	20000030 	.word	0x20000030

080050b8 <sbrk_aligned>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4e0f      	ldr	r6, [pc, #60]	@ (80050f8 <sbrk_aligned+0x40>)
 80050bc:	460c      	mov	r4, r1
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	4605      	mov	r5, r0
 80050c2:	b911      	cbnz	r1, 80050ca <sbrk_aligned+0x12>
 80050c4:	f000 fe40 	bl	8005d48 <_sbrk_r>
 80050c8:	6030      	str	r0, [r6, #0]
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fe3b 	bl	8005d48 <_sbrk_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d103      	bne.n	80050de <sbrk_aligned+0x26>
 80050d6:	f04f 34ff 	mov.w	r4, #4294967295
 80050da:	4620      	mov	r0, r4
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	1cc4      	adds	r4, r0, #3
 80050e0:	f024 0403 	bic.w	r4, r4, #3
 80050e4:	42a0      	cmp	r0, r4
 80050e6:	d0f8      	beq.n	80050da <sbrk_aligned+0x22>
 80050e8:	1a21      	subs	r1, r4, r0
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fe2c 	bl	8005d48 <_sbrk_r>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d1f2      	bne.n	80050da <sbrk_aligned+0x22>
 80050f4:	e7ef      	b.n	80050d6 <sbrk_aligned+0x1e>
 80050f6:	bf00      	nop
 80050f8:	20000458 	.word	0x20000458

080050fc <_malloc_r>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	1ccd      	adds	r5, r1, #3
 8005102:	f025 0503 	bic.w	r5, r5, #3
 8005106:	3508      	adds	r5, #8
 8005108:	2d0c      	cmp	r5, #12
 800510a:	bf38      	it	cc
 800510c:	250c      	movcc	r5, #12
 800510e:	2d00      	cmp	r5, #0
 8005110:	4606      	mov	r6, r0
 8005112:	db01      	blt.n	8005118 <_malloc_r+0x1c>
 8005114:	42a9      	cmp	r1, r5
 8005116:	d904      	bls.n	8005122 <_malloc_r+0x26>
 8005118:	230c      	movs	r3, #12
 800511a:	6033      	str	r3, [r6, #0]
 800511c:	2000      	movs	r0, #0
 800511e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051f8 <_malloc_r+0xfc>
 8005126:	f000 f869 	bl	80051fc <__malloc_lock>
 800512a:	f8d8 3000 	ldr.w	r3, [r8]
 800512e:	461c      	mov	r4, r3
 8005130:	bb44      	cbnz	r4, 8005184 <_malloc_r+0x88>
 8005132:	4629      	mov	r1, r5
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff ffbf 	bl	80050b8 <sbrk_aligned>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	4604      	mov	r4, r0
 800513e:	d158      	bne.n	80051f2 <_malloc_r+0xf6>
 8005140:	f8d8 4000 	ldr.w	r4, [r8]
 8005144:	4627      	mov	r7, r4
 8005146:	2f00      	cmp	r7, #0
 8005148:	d143      	bne.n	80051d2 <_malloc_r+0xd6>
 800514a:	2c00      	cmp	r4, #0
 800514c:	d04b      	beq.n	80051e6 <_malloc_r+0xea>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	4639      	mov	r1, r7
 8005152:	4630      	mov	r0, r6
 8005154:	eb04 0903 	add.w	r9, r4, r3
 8005158:	f000 fdf6 	bl	8005d48 <_sbrk_r>
 800515c:	4581      	cmp	r9, r0
 800515e:	d142      	bne.n	80051e6 <_malloc_r+0xea>
 8005160:	6821      	ldr	r1, [r4, #0]
 8005162:	4630      	mov	r0, r6
 8005164:	1a6d      	subs	r5, r5, r1
 8005166:	4629      	mov	r1, r5
 8005168:	f7ff ffa6 	bl	80050b8 <sbrk_aligned>
 800516c:	3001      	adds	r0, #1
 800516e:	d03a      	beq.n	80051e6 <_malloc_r+0xea>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	442b      	add	r3, r5
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	f8d8 3000 	ldr.w	r3, [r8]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	bb62      	cbnz	r2, 80051d8 <_malloc_r+0xdc>
 800517e:	f8c8 7000 	str.w	r7, [r8]
 8005182:	e00f      	b.n	80051a4 <_malloc_r+0xa8>
 8005184:	6822      	ldr	r2, [r4, #0]
 8005186:	1b52      	subs	r2, r2, r5
 8005188:	d420      	bmi.n	80051cc <_malloc_r+0xd0>
 800518a:	2a0b      	cmp	r2, #11
 800518c:	d917      	bls.n	80051be <_malloc_r+0xc2>
 800518e:	1961      	adds	r1, r4, r5
 8005190:	42a3      	cmp	r3, r4
 8005192:	6025      	str	r5, [r4, #0]
 8005194:	bf18      	it	ne
 8005196:	6059      	strne	r1, [r3, #4]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	bf08      	it	eq
 800519c:	f8c8 1000 	streq.w	r1, [r8]
 80051a0:	5162      	str	r2, [r4, r5]
 80051a2:	604b      	str	r3, [r1, #4]
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 f82f 	bl	8005208 <__malloc_unlock>
 80051aa:	f104 000b 	add.w	r0, r4, #11
 80051ae:	1d23      	adds	r3, r4, #4
 80051b0:	f020 0007 	bic.w	r0, r0, #7
 80051b4:	1ac2      	subs	r2, r0, r3
 80051b6:	bf1c      	itt	ne
 80051b8:	1a1b      	subne	r3, r3, r0
 80051ba:	50a3      	strne	r3, [r4, r2]
 80051bc:	e7af      	b.n	800511e <_malloc_r+0x22>
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	bf0c      	ite	eq
 80051c4:	f8c8 2000 	streq.w	r2, [r8]
 80051c8:	605a      	strne	r2, [r3, #4]
 80051ca:	e7eb      	b.n	80051a4 <_malloc_r+0xa8>
 80051cc:	4623      	mov	r3, r4
 80051ce:	6864      	ldr	r4, [r4, #4]
 80051d0:	e7ae      	b.n	8005130 <_malloc_r+0x34>
 80051d2:	463c      	mov	r4, r7
 80051d4:	687f      	ldr	r7, [r7, #4]
 80051d6:	e7b6      	b.n	8005146 <_malloc_r+0x4a>
 80051d8:	461a      	mov	r2, r3
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d1fb      	bne.n	80051d8 <_malloc_r+0xdc>
 80051e0:	2300      	movs	r3, #0
 80051e2:	6053      	str	r3, [r2, #4]
 80051e4:	e7de      	b.n	80051a4 <_malloc_r+0xa8>
 80051e6:	230c      	movs	r3, #12
 80051e8:	4630      	mov	r0, r6
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	f000 f80c 	bl	8005208 <__malloc_unlock>
 80051f0:	e794      	b.n	800511c <_malloc_r+0x20>
 80051f2:	6005      	str	r5, [r0, #0]
 80051f4:	e7d6      	b.n	80051a4 <_malloc_r+0xa8>
 80051f6:	bf00      	nop
 80051f8:	2000045c 	.word	0x2000045c

080051fc <__malloc_lock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <__malloc_lock+0x8>)
 80051fe:	f7ff b8aa 	b.w	8004356 <__retarget_lock_acquire_recursive>
 8005202:	bf00      	nop
 8005204:	20000454 	.word	0x20000454

08005208 <__malloc_unlock>:
 8005208:	4801      	ldr	r0, [pc, #4]	@ (8005210 <__malloc_unlock+0x8>)
 800520a:	f7ff b8a5 	b.w	8004358 <__retarget_lock_release_recursive>
 800520e:	bf00      	nop
 8005210:	20000454 	.word	0x20000454

08005214 <_Balloc>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	69c6      	ldr	r6, [r0, #28]
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	b976      	cbnz	r6, 800523c <_Balloc+0x28>
 800521e:	2010      	movs	r0, #16
 8005220:	f7ff ff42 	bl	80050a8 <malloc>
 8005224:	4602      	mov	r2, r0
 8005226:	61e0      	str	r0, [r4, #28]
 8005228:	b920      	cbnz	r0, 8005234 <_Balloc+0x20>
 800522a:	216b      	movs	r1, #107	@ 0x6b
 800522c:	4b17      	ldr	r3, [pc, #92]	@ (800528c <_Balloc+0x78>)
 800522e:	4818      	ldr	r0, [pc, #96]	@ (8005290 <_Balloc+0x7c>)
 8005230:	f000 fda8 	bl	8005d84 <__assert_func>
 8005234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005238:	6006      	str	r6, [r0, #0]
 800523a:	60c6      	str	r6, [r0, #12]
 800523c:	69e6      	ldr	r6, [r4, #28]
 800523e:	68f3      	ldr	r3, [r6, #12]
 8005240:	b183      	cbz	r3, 8005264 <_Balloc+0x50>
 8005242:	69e3      	ldr	r3, [r4, #28]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800524a:	b9b8      	cbnz	r0, 800527c <_Balloc+0x68>
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f605 	lsl.w	r6, r1, r5
 8005252:	1d72      	adds	r2, r6, #5
 8005254:	4620      	mov	r0, r4
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	f000 fdb2 	bl	8005dc0 <_calloc_r>
 800525c:	b160      	cbz	r0, 8005278 <_Balloc+0x64>
 800525e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005262:	e00e      	b.n	8005282 <_Balloc+0x6e>
 8005264:	2221      	movs	r2, #33	@ 0x21
 8005266:	2104      	movs	r1, #4
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fda9 	bl	8005dc0 <_calloc_r>
 800526e:	69e3      	ldr	r3, [r4, #28]
 8005270:	60f0      	str	r0, [r6, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e4      	bne.n	8005242 <_Balloc+0x2e>
 8005278:	2000      	movs	r0, #0
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	6802      	ldr	r2, [r0, #0]
 800527e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005282:	2300      	movs	r3, #0
 8005284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005288:	e7f7      	b.n	800527a <_Balloc+0x66>
 800528a:	bf00      	nop
 800528c:	080064ef 	.word	0x080064ef
 8005290:	0800656f 	.word	0x0800656f

08005294 <_Bfree>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	69c6      	ldr	r6, [r0, #28]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b976      	cbnz	r6, 80052bc <_Bfree+0x28>
 800529e:	2010      	movs	r0, #16
 80052a0:	f7ff ff02 	bl	80050a8 <malloc>
 80052a4:	4602      	mov	r2, r0
 80052a6:	61e8      	str	r0, [r5, #28]
 80052a8:	b920      	cbnz	r0, 80052b4 <_Bfree+0x20>
 80052aa:	218f      	movs	r1, #143	@ 0x8f
 80052ac:	4b08      	ldr	r3, [pc, #32]	@ (80052d0 <_Bfree+0x3c>)
 80052ae:	4809      	ldr	r0, [pc, #36]	@ (80052d4 <_Bfree+0x40>)
 80052b0:	f000 fd68 	bl	8005d84 <__assert_func>
 80052b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052b8:	6006      	str	r6, [r0, #0]
 80052ba:	60c6      	str	r6, [r0, #12]
 80052bc:	b13c      	cbz	r4, 80052ce <_Bfree+0x3a>
 80052be:	69eb      	ldr	r3, [r5, #28]
 80052c0:	6862      	ldr	r2, [r4, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c8:	6021      	str	r1, [r4, #0]
 80052ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	080064ef 	.word	0x080064ef
 80052d4:	0800656f 	.word	0x0800656f

080052d8 <__multadd>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4607      	mov	r7, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	461e      	mov	r6, r3
 80052e2:	2000      	movs	r0, #0
 80052e4:	690d      	ldr	r5, [r1, #16]
 80052e6:	f101 0c14 	add.w	ip, r1, #20
 80052ea:	f8dc 3000 	ldr.w	r3, [ip]
 80052ee:	3001      	adds	r0, #1
 80052f0:	b299      	uxth	r1, r3
 80052f2:	fb02 6101 	mla	r1, r2, r1, r6
 80052f6:	0c1e      	lsrs	r6, r3, #16
 80052f8:	0c0b      	lsrs	r3, r1, #16
 80052fa:	fb02 3306 	mla	r3, r2, r6, r3
 80052fe:	b289      	uxth	r1, r1
 8005300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005304:	4285      	cmp	r5, r0
 8005306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800530a:	f84c 1b04 	str.w	r1, [ip], #4
 800530e:	dcec      	bgt.n	80052ea <__multadd+0x12>
 8005310:	b30e      	cbz	r6, 8005356 <__multadd+0x7e>
 8005312:	68a3      	ldr	r3, [r4, #8]
 8005314:	42ab      	cmp	r3, r5
 8005316:	dc19      	bgt.n	800534c <__multadd+0x74>
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4638      	mov	r0, r7
 800531c:	3101      	adds	r1, #1
 800531e:	f7ff ff79 	bl	8005214 <_Balloc>
 8005322:	4680      	mov	r8, r0
 8005324:	b928      	cbnz	r0, 8005332 <__multadd+0x5a>
 8005326:	4602      	mov	r2, r0
 8005328:	21ba      	movs	r1, #186	@ 0xba
 800532a:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <__multadd+0x84>)
 800532c:	480c      	ldr	r0, [pc, #48]	@ (8005360 <__multadd+0x88>)
 800532e:	f000 fd29 	bl	8005d84 <__assert_func>
 8005332:	6922      	ldr	r2, [r4, #16]
 8005334:	f104 010c 	add.w	r1, r4, #12
 8005338:	3202      	adds	r2, #2
 800533a:	0092      	lsls	r2, r2, #2
 800533c:	300c      	adds	r0, #12
 800533e:	f000 fd13 	bl	8005d68 <memcpy>
 8005342:	4621      	mov	r1, r4
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ffa5 	bl	8005294 <_Bfree>
 800534a:	4644      	mov	r4, r8
 800534c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005350:	3501      	adds	r5, #1
 8005352:	615e      	str	r6, [r3, #20]
 8005354:	6125      	str	r5, [r4, #16]
 8005356:	4620      	mov	r0, r4
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	0800655e 	.word	0x0800655e
 8005360:	0800656f 	.word	0x0800656f

08005364 <__hi0bits>:
 8005364:	4603      	mov	r3, r0
 8005366:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800536a:	bf3a      	itte	cc
 800536c:	0403      	lslcc	r3, r0, #16
 800536e:	2010      	movcc	r0, #16
 8005370:	2000      	movcs	r0, #0
 8005372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005376:	bf3c      	itt	cc
 8005378:	021b      	lslcc	r3, r3, #8
 800537a:	3008      	addcc	r0, #8
 800537c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005380:	bf3c      	itt	cc
 8005382:	011b      	lslcc	r3, r3, #4
 8005384:	3004      	addcc	r0, #4
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	bf3c      	itt	cc
 800538c:	009b      	lslcc	r3, r3, #2
 800538e:	3002      	addcc	r0, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	db05      	blt.n	80053a0 <__hi0bits+0x3c>
 8005394:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005398:	f100 0001 	add.w	r0, r0, #1
 800539c:	bf08      	it	eq
 800539e:	2020      	moveq	r0, #32
 80053a0:	4770      	bx	lr

080053a2 <__lo0bits>:
 80053a2:	6803      	ldr	r3, [r0, #0]
 80053a4:	4602      	mov	r2, r0
 80053a6:	f013 0007 	ands.w	r0, r3, #7
 80053aa:	d00b      	beq.n	80053c4 <__lo0bits+0x22>
 80053ac:	07d9      	lsls	r1, r3, #31
 80053ae:	d421      	bmi.n	80053f4 <__lo0bits+0x52>
 80053b0:	0798      	lsls	r0, r3, #30
 80053b2:	bf49      	itett	mi
 80053b4:	085b      	lsrmi	r3, r3, #1
 80053b6:	089b      	lsrpl	r3, r3, #2
 80053b8:	2001      	movmi	r0, #1
 80053ba:	6013      	strmi	r3, [r2, #0]
 80053bc:	bf5c      	itt	pl
 80053be:	2002      	movpl	r0, #2
 80053c0:	6013      	strpl	r3, [r2, #0]
 80053c2:	4770      	bx	lr
 80053c4:	b299      	uxth	r1, r3
 80053c6:	b909      	cbnz	r1, 80053cc <__lo0bits+0x2a>
 80053c8:	2010      	movs	r0, #16
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b2d9      	uxtb	r1, r3
 80053ce:	b909      	cbnz	r1, 80053d4 <__lo0bits+0x32>
 80053d0:	3008      	adds	r0, #8
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	0719      	lsls	r1, r3, #28
 80053d6:	bf04      	itt	eq
 80053d8:	091b      	lsreq	r3, r3, #4
 80053da:	3004      	addeq	r0, #4
 80053dc:	0799      	lsls	r1, r3, #30
 80053de:	bf04      	itt	eq
 80053e0:	089b      	lsreq	r3, r3, #2
 80053e2:	3002      	addeq	r0, #2
 80053e4:	07d9      	lsls	r1, r3, #31
 80053e6:	d403      	bmi.n	80053f0 <__lo0bits+0x4e>
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	f100 0001 	add.w	r0, r0, #1
 80053ee:	d003      	beq.n	80053f8 <__lo0bits+0x56>
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4770      	bx	lr
 80053f4:	2000      	movs	r0, #0
 80053f6:	4770      	bx	lr
 80053f8:	2020      	movs	r0, #32
 80053fa:	4770      	bx	lr

080053fc <__i2b>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	460c      	mov	r4, r1
 8005400:	2101      	movs	r1, #1
 8005402:	f7ff ff07 	bl	8005214 <_Balloc>
 8005406:	4602      	mov	r2, r0
 8005408:	b928      	cbnz	r0, 8005416 <__i2b+0x1a>
 800540a:	f240 1145 	movw	r1, #325	@ 0x145
 800540e:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__i2b+0x24>)
 8005410:	4804      	ldr	r0, [pc, #16]	@ (8005424 <__i2b+0x28>)
 8005412:	f000 fcb7 	bl	8005d84 <__assert_func>
 8005416:	2301      	movs	r3, #1
 8005418:	6144      	str	r4, [r0, #20]
 800541a:	6103      	str	r3, [r0, #16]
 800541c:	bd10      	pop	{r4, pc}
 800541e:	bf00      	nop
 8005420:	0800655e 	.word	0x0800655e
 8005424:	0800656f 	.word	0x0800656f

08005428 <__multiply>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	4614      	mov	r4, r2
 800542e:	690a      	ldr	r2, [r1, #16]
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	460f      	mov	r7, r1
 8005434:	429a      	cmp	r2, r3
 8005436:	bfa2      	ittt	ge
 8005438:	4623      	movge	r3, r4
 800543a:	460c      	movge	r4, r1
 800543c:	461f      	movge	r7, r3
 800543e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005442:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	6861      	ldr	r1, [r4, #4]
 800544a:	eb0a 0609 	add.w	r6, sl, r9
 800544e:	42b3      	cmp	r3, r6
 8005450:	b085      	sub	sp, #20
 8005452:	bfb8      	it	lt
 8005454:	3101      	addlt	r1, #1
 8005456:	f7ff fedd 	bl	8005214 <_Balloc>
 800545a:	b930      	cbnz	r0, 800546a <__multiply+0x42>
 800545c:	4602      	mov	r2, r0
 800545e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005462:	4b43      	ldr	r3, [pc, #268]	@ (8005570 <__multiply+0x148>)
 8005464:	4843      	ldr	r0, [pc, #268]	@ (8005574 <__multiply+0x14c>)
 8005466:	f000 fc8d 	bl	8005d84 <__assert_func>
 800546a:	f100 0514 	add.w	r5, r0, #20
 800546e:	462b      	mov	r3, r5
 8005470:	2200      	movs	r2, #0
 8005472:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005476:	4543      	cmp	r3, r8
 8005478:	d321      	bcc.n	80054be <__multiply+0x96>
 800547a:	f107 0114 	add.w	r1, r7, #20
 800547e:	f104 0214 	add.w	r2, r4, #20
 8005482:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005486:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	1b13      	subs	r3, r2, r4
 800548e:	3b15      	subs	r3, #21
 8005490:	f023 0303 	bic.w	r3, r3, #3
 8005494:	3304      	adds	r3, #4
 8005496:	f104 0715 	add.w	r7, r4, #21
 800549a:	42ba      	cmp	r2, r7
 800549c:	bf38      	it	cc
 800549e:	2304      	movcc	r3, #4
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	9103      	str	r1, [sp, #12]
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d80c      	bhi.n	80054c4 <__multiply+0x9c>
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	dd03      	ble.n	80054b6 <__multiply+0x8e>
 80054ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d05a      	beq.n	800556c <__multiply+0x144>
 80054b6:	6106      	str	r6, [r0, #16]
 80054b8:	b005      	add	sp, #20
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	f843 2b04 	str.w	r2, [r3], #4
 80054c2:	e7d8      	b.n	8005476 <__multiply+0x4e>
 80054c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	d023      	beq.n	8005516 <__multiply+0xee>
 80054ce:	46a9      	mov	r9, r5
 80054d0:	f04f 0c00 	mov.w	ip, #0
 80054d4:	f104 0e14 	add.w	lr, r4, #20
 80054d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054dc:	f8d9 3000 	ldr.w	r3, [r9]
 80054e0:	fa1f fb87 	uxth.w	fp, r7
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80054ea:	4463      	add	r3, ip
 80054ec:	f8d9 c000 	ldr.w	ip, [r9]
 80054f0:	0c3f      	lsrs	r7, r7, #16
 80054f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80054f6:	fb0a c707 	mla	r7, sl, r7, ip
 80054fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005504:	4572      	cmp	r2, lr
 8005506:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800550a:	f849 3b04 	str.w	r3, [r9], #4
 800550e:	d8e3      	bhi.n	80054d8 <__multiply+0xb0>
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	f845 c003 	str.w	ip, [r5, r3]
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	3104      	adds	r1, #4
 800551a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800551e:	f1b9 0f00 	cmp.w	r9, #0
 8005522:	d021      	beq.n	8005568 <__multiply+0x140>
 8005524:	46ae      	mov	lr, r5
 8005526:	f04f 0a00 	mov.w	sl, #0
 800552a:	682b      	ldr	r3, [r5, #0]
 800552c:	f104 0c14 	add.w	ip, r4, #20
 8005530:	f8bc b000 	ldrh.w	fp, [ip]
 8005534:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005538:	b29b      	uxth	r3, r3
 800553a:	fb09 770b 	mla	r7, r9, fp, r7
 800553e:	4457      	add	r7, sl
 8005540:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005544:	f84e 3b04 	str.w	r3, [lr], #4
 8005548:	f85c 3b04 	ldr.w	r3, [ip], #4
 800554c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005550:	f8be 3000 	ldrh.w	r3, [lr]
 8005554:	4562      	cmp	r2, ip
 8005556:	fb09 330a 	mla	r3, r9, sl, r3
 800555a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800555e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005562:	d8e5      	bhi.n	8005530 <__multiply+0x108>
 8005564:	9f01      	ldr	r7, [sp, #4]
 8005566:	51eb      	str	r3, [r5, r7]
 8005568:	3504      	adds	r5, #4
 800556a:	e79a      	b.n	80054a2 <__multiply+0x7a>
 800556c:	3e01      	subs	r6, #1
 800556e:	e79c      	b.n	80054aa <__multiply+0x82>
 8005570:	0800655e 	.word	0x0800655e
 8005574:	0800656f 	.word	0x0800656f

08005578 <__pow5mult>:
 8005578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800557c:	4615      	mov	r5, r2
 800557e:	f012 0203 	ands.w	r2, r2, #3
 8005582:	4607      	mov	r7, r0
 8005584:	460e      	mov	r6, r1
 8005586:	d007      	beq.n	8005598 <__pow5mult+0x20>
 8005588:	4c25      	ldr	r4, [pc, #148]	@ (8005620 <__pow5mult+0xa8>)
 800558a:	3a01      	subs	r2, #1
 800558c:	2300      	movs	r3, #0
 800558e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005592:	f7ff fea1 	bl	80052d8 <__multadd>
 8005596:	4606      	mov	r6, r0
 8005598:	10ad      	asrs	r5, r5, #2
 800559a:	d03d      	beq.n	8005618 <__pow5mult+0xa0>
 800559c:	69fc      	ldr	r4, [r7, #28]
 800559e:	b97c      	cbnz	r4, 80055c0 <__pow5mult+0x48>
 80055a0:	2010      	movs	r0, #16
 80055a2:	f7ff fd81 	bl	80050a8 <malloc>
 80055a6:	4602      	mov	r2, r0
 80055a8:	61f8      	str	r0, [r7, #28]
 80055aa:	b928      	cbnz	r0, 80055b8 <__pow5mult+0x40>
 80055ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005624 <__pow5mult+0xac>)
 80055b2:	481d      	ldr	r0, [pc, #116]	@ (8005628 <__pow5mult+0xb0>)
 80055b4:	f000 fbe6 	bl	8005d84 <__assert_func>
 80055b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055bc:	6004      	str	r4, [r0, #0]
 80055be:	60c4      	str	r4, [r0, #12]
 80055c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055c8:	b94c      	cbnz	r4, 80055de <__pow5mult+0x66>
 80055ca:	f240 2171 	movw	r1, #625	@ 0x271
 80055ce:	4638      	mov	r0, r7
 80055d0:	f7ff ff14 	bl	80053fc <__i2b>
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80055dc:	6003      	str	r3, [r0, #0]
 80055de:	f04f 0900 	mov.w	r9, #0
 80055e2:	07eb      	lsls	r3, r5, #31
 80055e4:	d50a      	bpl.n	80055fc <__pow5mult+0x84>
 80055e6:	4631      	mov	r1, r6
 80055e8:	4622      	mov	r2, r4
 80055ea:	4638      	mov	r0, r7
 80055ec:	f7ff ff1c 	bl	8005428 <__multiply>
 80055f0:	4680      	mov	r8, r0
 80055f2:	4631      	mov	r1, r6
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff fe4d 	bl	8005294 <_Bfree>
 80055fa:	4646      	mov	r6, r8
 80055fc:	106d      	asrs	r5, r5, #1
 80055fe:	d00b      	beq.n	8005618 <__pow5mult+0xa0>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	b938      	cbnz	r0, 8005614 <__pow5mult+0x9c>
 8005604:	4622      	mov	r2, r4
 8005606:	4621      	mov	r1, r4
 8005608:	4638      	mov	r0, r7
 800560a:	f7ff ff0d 	bl	8005428 <__multiply>
 800560e:	6020      	str	r0, [r4, #0]
 8005610:	f8c0 9000 	str.w	r9, [r0]
 8005614:	4604      	mov	r4, r0
 8005616:	e7e4      	b.n	80055e2 <__pow5mult+0x6a>
 8005618:	4630      	mov	r0, r6
 800561a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561e:	bf00      	nop
 8005620:	080065c8 	.word	0x080065c8
 8005624:	080064ef 	.word	0x080064ef
 8005628:	0800656f 	.word	0x0800656f

0800562c <__lshift>:
 800562c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	460c      	mov	r4, r1
 8005632:	4607      	mov	r7, r0
 8005634:	4691      	mov	r9, r2
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6849      	ldr	r1, [r1, #4]
 800563a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005644:	f108 0601 	add.w	r6, r8, #1
 8005648:	42b3      	cmp	r3, r6
 800564a:	db0b      	blt.n	8005664 <__lshift+0x38>
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff fde1 	bl	8005214 <_Balloc>
 8005652:	4605      	mov	r5, r0
 8005654:	b948      	cbnz	r0, 800566a <__lshift+0x3e>
 8005656:	4602      	mov	r2, r0
 8005658:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <__lshift+0xd0>)
 800565e:	4828      	ldr	r0, [pc, #160]	@ (8005700 <__lshift+0xd4>)
 8005660:	f000 fb90 	bl	8005d84 <__assert_func>
 8005664:	3101      	adds	r1, #1
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	e7ee      	b.n	8005648 <__lshift+0x1c>
 800566a:	2300      	movs	r3, #0
 800566c:	f100 0114 	add.w	r1, r0, #20
 8005670:	f100 0210 	add.w	r2, r0, #16
 8005674:	4618      	mov	r0, r3
 8005676:	4553      	cmp	r3, sl
 8005678:	db33      	blt.n	80056e2 <__lshift+0xb6>
 800567a:	6920      	ldr	r0, [r4, #16]
 800567c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005680:	f104 0314 	add.w	r3, r4, #20
 8005684:	f019 091f 	ands.w	r9, r9, #31
 8005688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800568c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005690:	d02b      	beq.n	80056ea <__lshift+0xbe>
 8005692:	468a      	mov	sl, r1
 8005694:	2200      	movs	r2, #0
 8005696:	f1c9 0e20 	rsb	lr, r9, #32
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	fa00 f009 	lsl.w	r0, r0, r9
 80056a0:	4310      	orrs	r0, r2
 80056a2:	f84a 0b04 	str.w	r0, [sl], #4
 80056a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056aa:	459c      	cmp	ip, r3
 80056ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80056b0:	d8f3      	bhi.n	800569a <__lshift+0x6e>
 80056b2:	ebac 0304 	sub.w	r3, ip, r4
 80056b6:	3b15      	subs	r3, #21
 80056b8:	f023 0303 	bic.w	r3, r3, #3
 80056bc:	3304      	adds	r3, #4
 80056be:	f104 0015 	add.w	r0, r4, #21
 80056c2:	4584      	cmp	ip, r0
 80056c4:	bf38      	it	cc
 80056c6:	2304      	movcc	r3, #4
 80056c8:	50ca      	str	r2, [r1, r3]
 80056ca:	b10a      	cbz	r2, 80056d0 <__lshift+0xa4>
 80056cc:	f108 0602 	add.w	r6, r8, #2
 80056d0:	3e01      	subs	r6, #1
 80056d2:	4638      	mov	r0, r7
 80056d4:	4621      	mov	r1, r4
 80056d6:	612e      	str	r6, [r5, #16]
 80056d8:	f7ff fddc 	bl	8005294 <_Bfree>
 80056dc:	4628      	mov	r0, r5
 80056de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80056e6:	3301      	adds	r3, #1
 80056e8:	e7c5      	b.n	8005676 <__lshift+0x4a>
 80056ea:	3904      	subs	r1, #4
 80056ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f0:	459c      	cmp	ip, r3
 80056f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80056f6:	d8f9      	bhi.n	80056ec <__lshift+0xc0>
 80056f8:	e7ea      	b.n	80056d0 <__lshift+0xa4>
 80056fa:	bf00      	nop
 80056fc:	0800655e 	.word	0x0800655e
 8005700:	0800656f 	.word	0x0800656f

08005704 <__mcmp>:
 8005704:	4603      	mov	r3, r0
 8005706:	690a      	ldr	r2, [r1, #16]
 8005708:	6900      	ldr	r0, [r0, #16]
 800570a:	b530      	push	{r4, r5, lr}
 800570c:	1a80      	subs	r0, r0, r2
 800570e:	d10e      	bne.n	800572e <__mcmp+0x2a>
 8005710:	3314      	adds	r3, #20
 8005712:	3114      	adds	r1, #20
 8005714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800571c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005724:	4295      	cmp	r5, r2
 8005726:	d003      	beq.n	8005730 <__mcmp+0x2c>
 8005728:	d205      	bcs.n	8005736 <__mcmp+0x32>
 800572a:	f04f 30ff 	mov.w	r0, #4294967295
 800572e:	bd30      	pop	{r4, r5, pc}
 8005730:	42a3      	cmp	r3, r4
 8005732:	d3f3      	bcc.n	800571c <__mcmp+0x18>
 8005734:	e7fb      	b.n	800572e <__mcmp+0x2a>
 8005736:	2001      	movs	r0, #1
 8005738:	e7f9      	b.n	800572e <__mcmp+0x2a>
	...

0800573c <__mdiff>:
 800573c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	4689      	mov	r9, r1
 8005742:	4606      	mov	r6, r0
 8005744:	4611      	mov	r1, r2
 8005746:	4648      	mov	r0, r9
 8005748:	4614      	mov	r4, r2
 800574a:	f7ff ffdb 	bl	8005704 <__mcmp>
 800574e:	1e05      	subs	r5, r0, #0
 8005750:	d112      	bne.n	8005778 <__mdiff+0x3c>
 8005752:	4629      	mov	r1, r5
 8005754:	4630      	mov	r0, r6
 8005756:	f7ff fd5d 	bl	8005214 <_Balloc>
 800575a:	4602      	mov	r2, r0
 800575c:	b928      	cbnz	r0, 800576a <__mdiff+0x2e>
 800575e:	f240 2137 	movw	r1, #567	@ 0x237
 8005762:	4b3e      	ldr	r3, [pc, #248]	@ (800585c <__mdiff+0x120>)
 8005764:	483e      	ldr	r0, [pc, #248]	@ (8005860 <__mdiff+0x124>)
 8005766:	f000 fb0d 	bl	8005d84 <__assert_func>
 800576a:	2301      	movs	r3, #1
 800576c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005770:	4610      	mov	r0, r2
 8005772:	b003      	add	sp, #12
 8005774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005778:	bfbc      	itt	lt
 800577a:	464b      	movlt	r3, r9
 800577c:	46a1      	movlt	r9, r4
 800577e:	4630      	mov	r0, r6
 8005780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005784:	bfba      	itte	lt
 8005786:	461c      	movlt	r4, r3
 8005788:	2501      	movlt	r5, #1
 800578a:	2500      	movge	r5, #0
 800578c:	f7ff fd42 	bl	8005214 <_Balloc>
 8005790:	4602      	mov	r2, r0
 8005792:	b918      	cbnz	r0, 800579c <__mdiff+0x60>
 8005794:	f240 2145 	movw	r1, #581	@ 0x245
 8005798:	4b30      	ldr	r3, [pc, #192]	@ (800585c <__mdiff+0x120>)
 800579a:	e7e3      	b.n	8005764 <__mdiff+0x28>
 800579c:	f100 0b14 	add.w	fp, r0, #20
 80057a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057a4:	f109 0310 	add.w	r3, r9, #16
 80057a8:	60c5      	str	r5, [r0, #12]
 80057aa:	f04f 0c00 	mov.w	ip, #0
 80057ae:	f109 0514 	add.w	r5, r9, #20
 80057b2:	46d9      	mov	r9, fp
 80057b4:	6926      	ldr	r6, [r4, #16]
 80057b6:	f104 0e14 	add.w	lr, r4, #20
 80057ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057ce:	b281      	uxth	r1, r0
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	fa1f f38a 	uxth.w	r3, sl
 80057d6:	1a5b      	subs	r3, r3, r1
 80057d8:	0c00      	lsrs	r0, r0, #16
 80057da:	4463      	add	r3, ip
 80057dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80057e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057ea:	4576      	cmp	r6, lr
 80057ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057f0:	f849 3b04 	str.w	r3, [r9], #4
 80057f4:	d8e6      	bhi.n	80057c4 <__mdiff+0x88>
 80057f6:	1b33      	subs	r3, r6, r4
 80057f8:	3b15      	subs	r3, #21
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	3415      	adds	r4, #21
 8005800:	3304      	adds	r3, #4
 8005802:	42a6      	cmp	r6, r4
 8005804:	bf38      	it	cc
 8005806:	2304      	movcc	r3, #4
 8005808:	441d      	add	r5, r3
 800580a:	445b      	add	r3, fp
 800580c:	461e      	mov	r6, r3
 800580e:	462c      	mov	r4, r5
 8005810:	4544      	cmp	r4, r8
 8005812:	d30e      	bcc.n	8005832 <__mdiff+0xf6>
 8005814:	f108 0103 	add.w	r1, r8, #3
 8005818:	1b49      	subs	r1, r1, r5
 800581a:	f021 0103 	bic.w	r1, r1, #3
 800581e:	3d03      	subs	r5, #3
 8005820:	45a8      	cmp	r8, r5
 8005822:	bf38      	it	cc
 8005824:	2100      	movcc	r1, #0
 8005826:	440b      	add	r3, r1
 8005828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800582c:	b199      	cbz	r1, 8005856 <__mdiff+0x11a>
 800582e:	6117      	str	r7, [r2, #16]
 8005830:	e79e      	b.n	8005770 <__mdiff+0x34>
 8005832:	46e6      	mov	lr, ip
 8005834:	f854 1b04 	ldr.w	r1, [r4], #4
 8005838:	fa1f fc81 	uxth.w	ip, r1
 800583c:	44f4      	add	ip, lr
 800583e:	0c08      	lsrs	r0, r1, #16
 8005840:	4471      	add	r1, lr
 8005842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005846:	b289      	uxth	r1, r1
 8005848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800584c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005850:	f846 1b04 	str.w	r1, [r6], #4
 8005854:	e7dc      	b.n	8005810 <__mdiff+0xd4>
 8005856:	3f01      	subs	r7, #1
 8005858:	e7e6      	b.n	8005828 <__mdiff+0xec>
 800585a:	bf00      	nop
 800585c:	0800655e 	.word	0x0800655e
 8005860:	0800656f 	.word	0x0800656f

08005864 <__d2b>:
 8005864:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005868:	2101      	movs	r1, #1
 800586a:	4690      	mov	r8, r2
 800586c:	4699      	mov	r9, r3
 800586e:	9e08      	ldr	r6, [sp, #32]
 8005870:	f7ff fcd0 	bl	8005214 <_Balloc>
 8005874:	4604      	mov	r4, r0
 8005876:	b930      	cbnz	r0, 8005886 <__d2b+0x22>
 8005878:	4602      	mov	r2, r0
 800587a:	f240 310f 	movw	r1, #783	@ 0x30f
 800587e:	4b23      	ldr	r3, [pc, #140]	@ (800590c <__d2b+0xa8>)
 8005880:	4823      	ldr	r0, [pc, #140]	@ (8005910 <__d2b+0xac>)
 8005882:	f000 fa7f 	bl	8005d84 <__assert_func>
 8005886:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800588a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800588e:	b10d      	cbz	r5, 8005894 <__d2b+0x30>
 8005890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	f1b8 0300 	subs.w	r3, r8, #0
 800589a:	d024      	beq.n	80058e6 <__d2b+0x82>
 800589c:	4668      	mov	r0, sp
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	f7ff fd7f 	bl	80053a2 <__lo0bits>
 80058a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058a8:	b1d8      	cbz	r0, 80058e2 <__d2b+0x7e>
 80058aa:	f1c0 0320 	rsb	r3, r0, #32
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	430b      	orrs	r3, r1
 80058b4:	40c2      	lsrs	r2, r0
 80058b6:	6163      	str	r3, [r4, #20]
 80058b8:	9201      	str	r2, [sp, #4]
 80058ba:	9b01      	ldr	r3, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2201      	moveq	r2, #1
 80058c2:	2202      	movne	r2, #2
 80058c4:	61a3      	str	r3, [r4, #24]
 80058c6:	6122      	str	r2, [r4, #16]
 80058c8:	b1ad      	cbz	r5, 80058f6 <__d2b+0x92>
 80058ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058ce:	4405      	add	r5, r0
 80058d0:	6035      	str	r5, [r6, #0]
 80058d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d8:	6018      	str	r0, [r3, #0]
 80058da:	4620      	mov	r0, r4
 80058dc:	b002      	add	sp, #8
 80058de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80058e2:	6161      	str	r1, [r4, #20]
 80058e4:	e7e9      	b.n	80058ba <__d2b+0x56>
 80058e6:	a801      	add	r0, sp, #4
 80058e8:	f7ff fd5b 	bl	80053a2 <__lo0bits>
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	6163      	str	r3, [r4, #20]
 80058f2:	3020      	adds	r0, #32
 80058f4:	e7e7      	b.n	80058c6 <__d2b+0x62>
 80058f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80058fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058fe:	6030      	str	r0, [r6, #0]
 8005900:	6918      	ldr	r0, [r3, #16]
 8005902:	f7ff fd2f 	bl	8005364 <__hi0bits>
 8005906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800590a:	e7e4      	b.n	80058d6 <__d2b+0x72>
 800590c:	0800655e 	.word	0x0800655e
 8005910:	0800656f 	.word	0x0800656f

08005914 <__ssputs_r>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	461f      	mov	r7, r3
 800591a:	688e      	ldr	r6, [r1, #8]
 800591c:	4682      	mov	sl, r0
 800591e:	42be      	cmp	r6, r7
 8005920:	460c      	mov	r4, r1
 8005922:	4690      	mov	r8, r2
 8005924:	680b      	ldr	r3, [r1, #0]
 8005926:	d82d      	bhi.n	8005984 <__ssputs_r+0x70>
 8005928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800592c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005930:	d026      	beq.n	8005980 <__ssputs_r+0x6c>
 8005932:	6965      	ldr	r5, [r4, #20]
 8005934:	6909      	ldr	r1, [r1, #16]
 8005936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800593a:	eba3 0901 	sub.w	r9, r3, r1
 800593e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005942:	1c7b      	adds	r3, r7, #1
 8005944:	444b      	add	r3, r9
 8005946:	106d      	asrs	r5, r5, #1
 8005948:	429d      	cmp	r5, r3
 800594a:	bf38      	it	cc
 800594c:	461d      	movcc	r5, r3
 800594e:	0553      	lsls	r3, r2, #21
 8005950:	d527      	bpl.n	80059a2 <__ssputs_r+0x8e>
 8005952:	4629      	mov	r1, r5
 8005954:	f7ff fbd2 	bl	80050fc <_malloc_r>
 8005958:	4606      	mov	r6, r0
 800595a:	b360      	cbz	r0, 80059b6 <__ssputs_r+0xa2>
 800595c:	464a      	mov	r2, r9
 800595e:	6921      	ldr	r1, [r4, #16]
 8005960:	f000 fa02 	bl	8005d68 <memcpy>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800596a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	6126      	str	r6, [r4, #16]
 8005972:	444e      	add	r6, r9
 8005974:	6026      	str	r6, [r4, #0]
 8005976:	463e      	mov	r6, r7
 8005978:	6165      	str	r5, [r4, #20]
 800597a:	eba5 0509 	sub.w	r5, r5, r9
 800597e:	60a5      	str	r5, [r4, #8]
 8005980:	42be      	cmp	r6, r7
 8005982:	d900      	bls.n	8005986 <__ssputs_r+0x72>
 8005984:	463e      	mov	r6, r7
 8005986:	4632      	mov	r2, r6
 8005988:	4641      	mov	r1, r8
 800598a:	6820      	ldr	r0, [r4, #0]
 800598c:	f000 f9c2 	bl	8005d14 <memmove>
 8005990:	2000      	movs	r0, #0
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	1b9b      	subs	r3, r3, r6
 8005996:	60a3      	str	r3, [r4, #8]
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	4433      	add	r3, r6
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	462a      	mov	r2, r5
 80059a4:	f000 fa32 	bl	8005e0c <_realloc_r>
 80059a8:	4606      	mov	r6, r0
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d1e0      	bne.n	8005970 <__ssputs_r+0x5c>
 80059ae:	4650      	mov	r0, sl
 80059b0:	6921      	ldr	r1, [r4, #16]
 80059b2:	f7ff fb31 	bl	8005018 <_free_r>
 80059b6:	230c      	movs	r3, #12
 80059b8:	f8ca 3000 	str.w	r3, [sl]
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	e7e9      	b.n	800599e <__ssputs_r+0x8a>
	...

080059cc <_svfiprintf_r>:
 80059cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	4698      	mov	r8, r3
 80059d2:	898b      	ldrh	r3, [r1, #12]
 80059d4:	4607      	mov	r7, r0
 80059d6:	061b      	lsls	r3, r3, #24
 80059d8:	460d      	mov	r5, r1
 80059da:	4614      	mov	r4, r2
 80059dc:	b09d      	sub	sp, #116	@ 0x74
 80059de:	d510      	bpl.n	8005a02 <_svfiprintf_r+0x36>
 80059e0:	690b      	ldr	r3, [r1, #16]
 80059e2:	b973      	cbnz	r3, 8005a02 <_svfiprintf_r+0x36>
 80059e4:	2140      	movs	r1, #64	@ 0x40
 80059e6:	f7ff fb89 	bl	80050fc <_malloc_r>
 80059ea:	6028      	str	r0, [r5, #0]
 80059ec:	6128      	str	r0, [r5, #16]
 80059ee:	b930      	cbnz	r0, 80059fe <_svfiprintf_r+0x32>
 80059f0:	230c      	movs	r3, #12
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b01d      	add	sp, #116	@ 0x74
 80059fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fe:	2340      	movs	r3, #64	@ 0x40
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	2320      	movs	r3, #32
 8005a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a0c:	2330      	movs	r3, #48	@ 0x30
 8005a0e:	f04f 0901 	mov.w	r9, #1
 8005a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005bb0 <_svfiprintf_r+0x1e4>
 8005a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a1e:	4623      	mov	r3, r4
 8005a20:	469a      	mov	sl, r3
 8005a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a26:	b10a      	cbz	r2, 8005a2c <_svfiprintf_r+0x60>
 8005a28:	2a25      	cmp	r2, #37	@ 0x25
 8005a2a:	d1f9      	bne.n	8005a20 <_svfiprintf_r+0x54>
 8005a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x7e>
 8005a32:	465b      	mov	r3, fp
 8005a34:	4622      	mov	r2, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff6b 	bl	8005914 <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80a7 	beq.w	8005b92 <_svfiprintf_r+0x1c6>
 8005a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a46:	445a      	add	r2, fp
 8005a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 809f 	beq.w	8005b92 <_svfiprintf_r+0x1c6>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5e:	f10a 0a01 	add.w	sl, sl, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a74:	484e      	ldr	r0, [pc, #312]	@ (8005bb0 <_svfiprintf_r+0x1e4>)
 8005a76:	f7fe fc70 	bl	800435a <memchr>
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xea>
 8005a7e:	06d0      	lsls	r0, r2, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2320      	movmi	r3, #32
 8005a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a88:	0711      	lsls	r1, r2, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	232b      	movmi	r3, #43	@ 0x2b
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a98:	d015      	beq.n	8005ac6 <_svfiprintf_r+0xfa>
 8005a9a:	4654      	mov	r4, sl
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f04f 0c0a 	mov.w	ip, #10
 8005aa2:	9a07      	ldr	r2, [sp, #28]
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aaa:	3b30      	subs	r3, #48	@ 0x30
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d94b      	bls.n	8005b48 <_svfiprintf_r+0x17c>
 8005ab0:	b1b0      	cbz	r0, 8005ae0 <_svfiprintf_r+0x114>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e014      	b.n	8005ae0 <_svfiprintf_r+0x114>
 8005ab6:	eba0 0308 	sub.w	r3, r0, r8
 8005aba:	fa09 f303 	lsl.w	r3, r9, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	46a2      	mov	sl, r4
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	e7d2      	b.n	8005a6c <_svfiprintf_r+0xa0>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbb      	ittet	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad8:	9307      	strge	r3, [sp, #28]
 8005ada:	9307      	strlt	r3, [sp, #28]
 8005adc:	bfb8      	it	lt
 8005ade:	9204      	strlt	r2, [sp, #16]
 8005ae0:	7823      	ldrb	r3, [r4, #0]
 8005ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae4:	d10a      	bne.n	8005afc <_svfiprintf_r+0x130>
 8005ae6:	7863      	ldrb	r3, [r4, #1]
 8005ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aea:	d132      	bne.n	8005b52 <_svfiprintf_r+0x186>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	3402      	adds	r4, #2
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	9203      	str	r2, [sp, #12]
 8005af6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005bb4 <_svfiprintf_r+0x1e8>
 8005b00:	2203      	movs	r2, #3
 8005b02:	4650      	mov	r0, sl
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	f7fe fc28 	bl	800435a <memchr>
 8005b0a:	b138      	cbz	r0, 8005b1c <_svfiprintf_r+0x150>
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	eba0 000a 	sub.w	r0, r0, sl
 8005b14:	4082      	lsls	r2, r0
 8005b16:	4313      	orrs	r3, r2
 8005b18:	3401      	adds	r4, #1
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b20:	2206      	movs	r2, #6
 8005b22:	4825      	ldr	r0, [pc, #148]	@ (8005bb8 <_svfiprintf_r+0x1ec>)
 8005b24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b28:	f7fe fc17 	bl	800435a <memchr>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d036      	beq.n	8005b9e <_svfiprintf_r+0x1d2>
 8005b30:	4b22      	ldr	r3, [pc, #136]	@ (8005bbc <_svfiprintf_r+0x1f0>)
 8005b32:	bb1b      	cbnz	r3, 8005b7c <_svfiprintf_r+0x1b0>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	3307      	adds	r3, #7
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b42:	4433      	add	r3, r6
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	e76a      	b.n	8005a1e <_svfiprintf_r+0x52>
 8005b48:	460c      	mov	r4, r1
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b50:	e7a8      	b.n	8005aa4 <_svfiprintf_r+0xd8>
 8005b52:	2300      	movs	r3, #0
 8005b54:	f04f 0c0a 	mov.w	ip, #10
 8005b58:	4619      	mov	r1, r3
 8005b5a:	3401      	adds	r4, #1
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b64:	3a30      	subs	r2, #48	@ 0x30
 8005b66:	2a09      	cmp	r2, #9
 8005b68:	d903      	bls.n	8005b72 <_svfiprintf_r+0x1a6>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0c6      	beq.n	8005afc <_svfiprintf_r+0x130>
 8005b6e:	9105      	str	r1, [sp, #20]
 8005b70:	e7c4      	b.n	8005afc <_svfiprintf_r+0x130>
 8005b72:	4604      	mov	r4, r0
 8005b74:	2301      	movs	r3, #1
 8005b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7a:	e7f0      	b.n	8005b5e <_svfiprintf_r+0x192>
 8005b7c:	ab03      	add	r3, sp, #12
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	462a      	mov	r2, r5
 8005b82:	4638      	mov	r0, r7
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <_svfiprintf_r+0x1f4>)
 8005b86:	a904      	add	r1, sp, #16
 8005b88:	f7fd fe70 	bl	800386c <_printf_float>
 8005b8c:	1c42      	adds	r2, r0, #1
 8005b8e:	4606      	mov	r6, r0
 8005b90:	d1d6      	bne.n	8005b40 <_svfiprintf_r+0x174>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	065b      	lsls	r3, r3, #25
 8005b96:	f53f af2d 	bmi.w	80059f4 <_svfiprintf_r+0x28>
 8005b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b9c:	e72c      	b.n	80059f8 <_svfiprintf_r+0x2c>
 8005b9e:	ab03      	add	r3, sp, #12
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <_svfiprintf_r+0x1f4>)
 8005ba8:	a904      	add	r1, sp, #16
 8005baa:	f7fe f8fd 	bl	8003da8 <_printf_i>
 8005bae:	e7ed      	b.n	8005b8c <_svfiprintf_r+0x1c0>
 8005bb0:	080066c8 	.word	0x080066c8
 8005bb4:	080066ce 	.word	0x080066ce
 8005bb8:	080066d2 	.word	0x080066d2
 8005bbc:	0800386d 	.word	0x0800386d
 8005bc0:	08005915 	.word	0x08005915

08005bc4 <__sflush_r>:
 8005bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	0716      	lsls	r6, r2, #28
 8005bcc:	4605      	mov	r5, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	d454      	bmi.n	8005c7c <__sflush_r+0xb8>
 8005bd2:	684b      	ldr	r3, [r1, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dc02      	bgt.n	8005bde <__sflush_r+0x1a>
 8005bd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	dd48      	ble.n	8005c70 <__sflush_r+0xac>
 8005bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	d045      	beq.n	8005c70 <__sflush_r+0xac>
 8005be4:	2300      	movs	r3, #0
 8005be6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bea:	682f      	ldr	r7, [r5, #0]
 8005bec:	6a21      	ldr	r1, [r4, #32]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	d030      	beq.n	8005c54 <__sflush_r+0x90>
 8005bf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	0759      	lsls	r1, r3, #29
 8005bf8:	d505      	bpl.n	8005c06 <__sflush_r+0x42>
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	1ad2      	subs	r2, r2, r3
 8005bfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c00:	b10b      	cbz	r3, 8005c06 <__sflush_r+0x42>
 8005c02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c04:	1ad2      	subs	r2, r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	4628      	mov	r0, r5
 8005c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c0c:	6a21      	ldr	r1, [r4, #32]
 8005c0e:	47b0      	blx	r6
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	d106      	bne.n	8005c24 <__sflush_r+0x60>
 8005c16:	6829      	ldr	r1, [r5, #0]
 8005c18:	291d      	cmp	r1, #29
 8005c1a:	d82b      	bhi.n	8005c74 <__sflush_r+0xb0>
 8005c1c:	4a28      	ldr	r2, [pc, #160]	@ (8005cc0 <__sflush_r+0xfc>)
 8005c1e:	410a      	asrs	r2, r1
 8005c20:	07d6      	lsls	r6, r2, #31
 8005c22:	d427      	bmi.n	8005c74 <__sflush_r+0xb0>
 8005c24:	2200      	movs	r2, #0
 8005c26:	6062      	str	r2, [r4, #4]
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	04d9      	lsls	r1, r3, #19
 8005c2c:	6022      	str	r2, [r4, #0]
 8005c2e:	d504      	bpl.n	8005c3a <__sflush_r+0x76>
 8005c30:	1c42      	adds	r2, r0, #1
 8005c32:	d101      	bne.n	8005c38 <__sflush_r+0x74>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b903      	cbnz	r3, 8005c3a <__sflush_r+0x76>
 8005c38:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c3c:	602f      	str	r7, [r5, #0]
 8005c3e:	b1b9      	cbz	r1, 8005c70 <__sflush_r+0xac>
 8005c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c44:	4299      	cmp	r1, r3
 8005c46:	d002      	beq.n	8005c4e <__sflush_r+0x8a>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff f9e5 	bl	8005018 <_free_r>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c52:	e00d      	b.n	8005c70 <__sflush_r+0xac>
 8005c54:	2301      	movs	r3, #1
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b0      	blx	r6
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	1c50      	adds	r0, r2, #1
 8005c5e:	d1c9      	bne.n	8005bf4 <__sflush_r+0x30>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0c6      	beq.n	8005bf4 <__sflush_r+0x30>
 8005c66:	2b1d      	cmp	r3, #29
 8005c68:	d001      	beq.n	8005c6e <__sflush_r+0xaa>
 8005c6a:	2b16      	cmp	r3, #22
 8005c6c:	d11d      	bne.n	8005caa <__sflush_r+0xe6>
 8005c6e:	602f      	str	r7, [r5, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	e021      	b.n	8005cb8 <__sflush_r+0xf4>
 8005c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c78:	b21b      	sxth	r3, r3
 8005c7a:	e01a      	b.n	8005cb2 <__sflush_r+0xee>
 8005c7c:	690f      	ldr	r7, [r1, #16]
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d0f6      	beq.n	8005c70 <__sflush_r+0xac>
 8005c82:	0793      	lsls	r3, r2, #30
 8005c84:	bf18      	it	ne
 8005c86:	2300      	movne	r3, #0
 8005c88:	680e      	ldr	r6, [r1, #0]
 8005c8a:	bf08      	it	eq
 8005c8c:	694b      	ldreq	r3, [r1, #20]
 8005c8e:	1bf6      	subs	r6, r6, r7
 8005c90:	600f      	str	r7, [r1, #0]
 8005c92:	608b      	str	r3, [r1, #8]
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	ddeb      	ble.n	8005c70 <__sflush_r+0xac>
 8005c98:	4633      	mov	r3, r6
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	6a21      	ldr	r1, [r4, #32]
 8005ca0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005ca4:	47e0      	blx	ip
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	dc07      	bgt.n	8005cba <__sflush_r+0xf6>
 8005caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cba:	4407      	add	r7, r0
 8005cbc:	1a36      	subs	r6, r6, r0
 8005cbe:	e7e9      	b.n	8005c94 <__sflush_r+0xd0>
 8005cc0:	dfbffffe 	.word	0xdfbffffe

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b913      	cbnz	r3, 8005cd4 <_fflush_r+0x10>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	b118      	cbz	r0, 8005cde <_fflush_r+0x1a>
 8005cd6:	6a03      	ldr	r3, [r0, #32]
 8005cd8:	b90b      	cbnz	r3, 8005cde <_fflush_r+0x1a>
 8005cda:	f7fe fa11 	bl	8004100 <__sinit>
 8005cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f3      	beq.n	8005cce <_fflush_r+0xa>
 8005ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ce8:	07d0      	lsls	r0, r2, #31
 8005cea:	d404      	bmi.n	8005cf6 <_fflush_r+0x32>
 8005cec:	0599      	lsls	r1, r3, #22
 8005cee:	d402      	bmi.n	8005cf6 <_fflush_r+0x32>
 8005cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf2:	f7fe fb30 	bl	8004356 <__retarget_lock_acquire_recursive>
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	f7ff ff63 	bl	8005bc4 <__sflush_r>
 8005cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d00:	4605      	mov	r5, r0
 8005d02:	07da      	lsls	r2, r3, #31
 8005d04:	d4e4      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	d4e1      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0e:	f7fe fb23 	bl	8004358 <__retarget_lock_release_recursive>
 8005d12:	e7dd      	b.n	8005cd0 <_fflush_r+0xc>

08005d14 <memmove>:
 8005d14:	4288      	cmp	r0, r1
 8005d16:	b510      	push	{r4, lr}
 8005d18:	eb01 0402 	add.w	r4, r1, r2
 8005d1c:	d902      	bls.n	8005d24 <memmove+0x10>
 8005d1e:	4284      	cmp	r4, r0
 8005d20:	4623      	mov	r3, r4
 8005d22:	d807      	bhi.n	8005d34 <memmove+0x20>
 8005d24:	1e43      	subs	r3, r0, #1
 8005d26:	42a1      	cmp	r1, r4
 8005d28:	d008      	beq.n	8005d3c <memmove+0x28>
 8005d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d32:	e7f8      	b.n	8005d26 <memmove+0x12>
 8005d34:	4601      	mov	r1, r0
 8005d36:	4402      	add	r2, r0
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	d100      	bne.n	8005d3e <memmove+0x2a>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d46:	e7f7      	b.n	8005d38 <memmove+0x24>

08005d48 <_sbrk_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4d05      	ldr	r5, [pc, #20]	@ (8005d64 <_sbrk_r+0x1c>)
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fb fdf4 	bl	8001940 <_sbrk>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_sbrk_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_sbrk_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000450 	.word	0x20000450

08005d68 <memcpy>:
 8005d68:	440a      	add	r2, r1
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d70:	d100      	bne.n	8005d74 <memcpy+0xc>
 8005d72:	4770      	bx	lr
 8005d74:	b510      	push	{r4, lr}
 8005d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d80:	d1f9      	bne.n	8005d76 <memcpy+0xe>
 8005d82:	bd10      	pop	{r4, pc}

08005d84 <__assert_func>:
 8005d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d86:	4614      	mov	r4, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <__assert_func+0x2c>)
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68d8      	ldr	r0, [r3, #12]
 8005d92:	b954      	cbnz	r4, 8005daa <__assert_func+0x26>
 8005d94:	4b07      	ldr	r3, [pc, #28]	@ (8005db4 <__assert_func+0x30>)
 8005d96:	461c      	mov	r4, r3
 8005d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d9c:	9100      	str	r1, [sp, #0]
 8005d9e:	462b      	mov	r3, r5
 8005da0:	4905      	ldr	r1, [pc, #20]	@ (8005db8 <__assert_func+0x34>)
 8005da2:	f000 f86f 	bl	8005e84 <fiprintf>
 8005da6:	f000 f87f 	bl	8005ea8 <abort>
 8005daa:	4b04      	ldr	r3, [pc, #16]	@ (8005dbc <__assert_func+0x38>)
 8005dac:	e7f4      	b.n	8005d98 <__assert_func+0x14>
 8005dae:	bf00      	nop
 8005db0:	20000030 	.word	0x20000030
 8005db4:	0800671e 	.word	0x0800671e
 8005db8:	080066f0 	.word	0x080066f0
 8005dbc:	080066e3 	.word	0x080066e3

08005dc0 <_calloc_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	fba1 5402 	umull	r5, r4, r1, r2
 8005dc6:	b93c      	cbnz	r4, 8005dd8 <_calloc_r+0x18>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7ff f997 	bl	80050fc <_malloc_r>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	b928      	cbnz	r0, 8005dde <_calloc_r+0x1e>
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	220c      	movs	r2, #12
 8005dda:	6002      	str	r2, [r0, #0]
 8005ddc:	e7f9      	b.n	8005dd2 <_calloc_r+0x12>
 8005dde:	462a      	mov	r2, r5
 8005de0:	4621      	mov	r1, r4
 8005de2:	f7fe fa3a 	bl	800425a <memset>
 8005de6:	e7f5      	b.n	8005dd4 <_calloc_r+0x14>

08005de8 <__ascii_mbtowc>:
 8005de8:	b082      	sub	sp, #8
 8005dea:	b901      	cbnz	r1, 8005dee <__ascii_mbtowc+0x6>
 8005dec:	a901      	add	r1, sp, #4
 8005dee:	b142      	cbz	r2, 8005e02 <__ascii_mbtowc+0x1a>
 8005df0:	b14b      	cbz	r3, 8005e06 <__ascii_mbtowc+0x1e>
 8005df2:	7813      	ldrb	r3, [r2, #0]
 8005df4:	600b      	str	r3, [r1, #0]
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	1e10      	subs	r0, r2, #0
 8005dfa:	bf18      	it	ne
 8005dfc:	2001      	movne	r0, #1
 8005dfe:	b002      	add	sp, #8
 8005e00:	4770      	bx	lr
 8005e02:	4610      	mov	r0, r2
 8005e04:	e7fb      	b.n	8005dfe <__ascii_mbtowc+0x16>
 8005e06:	f06f 0001 	mvn.w	r0, #1
 8005e0a:	e7f8      	b.n	8005dfe <__ascii_mbtowc+0x16>

08005e0c <_realloc_r>:
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	4680      	mov	r8, r0
 8005e12:	4615      	mov	r5, r2
 8005e14:	460c      	mov	r4, r1
 8005e16:	b921      	cbnz	r1, 8005e22 <_realloc_r+0x16>
 8005e18:	4611      	mov	r1, r2
 8005e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1e:	f7ff b96d 	b.w	80050fc <_malloc_r>
 8005e22:	b92a      	cbnz	r2, 8005e30 <_realloc_r+0x24>
 8005e24:	f7ff f8f8 	bl	8005018 <_free_r>
 8005e28:	2400      	movs	r4, #0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	f000 f841 	bl	8005eb6 <_malloc_usable_size_r>
 8005e34:	4285      	cmp	r5, r0
 8005e36:	4606      	mov	r6, r0
 8005e38:	d802      	bhi.n	8005e40 <_realloc_r+0x34>
 8005e3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e3e:	d8f4      	bhi.n	8005e2a <_realloc_r+0x1e>
 8005e40:	4629      	mov	r1, r5
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7ff f95a 	bl	80050fc <_malloc_r>
 8005e48:	4607      	mov	r7, r0
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0ec      	beq.n	8005e28 <_realloc_r+0x1c>
 8005e4e:	42b5      	cmp	r5, r6
 8005e50:	462a      	mov	r2, r5
 8005e52:	4621      	mov	r1, r4
 8005e54:	bf28      	it	cs
 8005e56:	4632      	movcs	r2, r6
 8005e58:	f7ff ff86 	bl	8005d68 <memcpy>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f7ff f8da 	bl	8005018 <_free_r>
 8005e64:	463c      	mov	r4, r7
 8005e66:	e7e0      	b.n	8005e2a <_realloc_r+0x1e>

08005e68 <__ascii_wctomb>:
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	b141      	cbz	r1, 8005e80 <__ascii_wctomb+0x18>
 8005e6e:	2aff      	cmp	r2, #255	@ 0xff
 8005e70:	d904      	bls.n	8005e7c <__ascii_wctomb+0x14>
 8005e72:	228a      	movs	r2, #138	@ 0x8a
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	4770      	bx	lr
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	700a      	strb	r2, [r1, #0]
 8005e80:	4770      	bx	lr
	...

08005e84 <fiprintf>:
 8005e84:	b40e      	push	{r1, r2, r3}
 8005e86:	b503      	push	{r0, r1, lr}
 8005e88:	4601      	mov	r1, r0
 8005e8a:	ab03      	add	r3, sp, #12
 8005e8c:	4805      	ldr	r0, [pc, #20]	@ (8005ea4 <fiprintf+0x20>)
 8005e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e92:	6800      	ldr	r0, [r0, #0]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	f000 f83d 	bl	8005f14 <_vfiprintf_r>
 8005e9a:	b002      	add	sp, #8
 8005e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea0:	b003      	add	sp, #12
 8005ea2:	4770      	bx	lr
 8005ea4:	20000030 	.word	0x20000030

08005ea8 <abort>:
 8005ea8:	2006      	movs	r0, #6
 8005eaa:	b508      	push	{r3, lr}
 8005eac:	f000 fa06 	bl	80062bc <raise>
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7fb fcd0 	bl	8001856 <_exit>

08005eb6 <_malloc_usable_size_r>:
 8005eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eba:	1f18      	subs	r0, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfbc      	itt	lt
 8005ec0:	580b      	ldrlt	r3, [r1, r0]
 8005ec2:	18c0      	addlt	r0, r0, r3
 8005ec4:	4770      	bx	lr

08005ec6 <__sfputc_r>:
 8005ec6:	6893      	ldr	r3, [r2, #8]
 8005ec8:	b410      	push	{r4}
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	6093      	str	r3, [r2, #8]
 8005ed0:	da07      	bge.n	8005ee2 <__sfputc_r+0x1c>
 8005ed2:	6994      	ldr	r4, [r2, #24]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	db01      	blt.n	8005edc <__sfputc_r+0x16>
 8005ed8:	290a      	cmp	r1, #10
 8005eda:	d102      	bne.n	8005ee2 <__sfputc_r+0x1c>
 8005edc:	bc10      	pop	{r4}
 8005ede:	f000 b931 	b.w	8006144 <__swbuf_r>
 8005ee2:	6813      	ldr	r3, [r2, #0]
 8005ee4:	1c58      	adds	r0, r3, #1
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	7019      	strb	r1, [r3, #0]
 8005eea:	4608      	mov	r0, r1
 8005eec:	bc10      	pop	{r4}
 8005eee:	4770      	bx	lr

08005ef0 <__sfputs_r>:
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	18d5      	adds	r5, r2, r3
 8005efa:	42ac      	cmp	r4, r5
 8005efc:	d101      	bne.n	8005f02 <__sfputs_r+0x12>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e007      	b.n	8005f12 <__sfputs_r+0x22>
 8005f02:	463a      	mov	r2, r7
 8005f04:	4630      	mov	r0, r6
 8005f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0a:	f7ff ffdc 	bl	8005ec6 <__sfputc_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d1f3      	bne.n	8005efa <__sfputs_r+0xa>
 8005f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f14 <_vfiprintf_r>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	460d      	mov	r5, r1
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	4698      	mov	r8, r3
 8005f1e:	4606      	mov	r6, r0
 8005f20:	b09d      	sub	sp, #116	@ 0x74
 8005f22:	b118      	cbz	r0, 8005f2c <_vfiprintf_r+0x18>
 8005f24:	6a03      	ldr	r3, [r0, #32]
 8005f26:	b90b      	cbnz	r3, 8005f2c <_vfiprintf_r+0x18>
 8005f28:	f7fe f8ea 	bl	8004100 <__sinit>
 8005f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f2e:	07d9      	lsls	r1, r3, #31
 8005f30:	d405      	bmi.n	8005f3e <_vfiprintf_r+0x2a>
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	059a      	lsls	r2, r3, #22
 8005f36:	d402      	bmi.n	8005f3e <_vfiprintf_r+0x2a>
 8005f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f3a:	f7fe fa0c 	bl	8004356 <__retarget_lock_acquire_recursive>
 8005f3e:	89ab      	ldrh	r3, [r5, #12]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	d501      	bpl.n	8005f48 <_vfiprintf_r+0x34>
 8005f44:	692b      	ldr	r3, [r5, #16]
 8005f46:	b99b      	cbnz	r3, 8005f70 <_vfiprintf_r+0x5c>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 f938 	bl	80061c0 <__swsetup_r>
 8005f50:	b170      	cbz	r0, 8005f70 <_vfiprintf_r+0x5c>
 8005f52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f54:	07dc      	lsls	r4, r3, #31
 8005f56:	d504      	bpl.n	8005f62 <_vfiprintf_r+0x4e>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	b01d      	add	sp, #116	@ 0x74
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	0598      	lsls	r0, r3, #22
 8005f66:	d4f7      	bmi.n	8005f58 <_vfiprintf_r+0x44>
 8005f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f6a:	f7fe f9f5 	bl	8004358 <__retarget_lock_release_recursive>
 8005f6e:	e7f3      	b.n	8005f58 <_vfiprintf_r+0x44>
 8005f70:	2300      	movs	r3, #0
 8005f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f74:	2320      	movs	r3, #32
 8005f76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f7a:	2330      	movs	r3, #48	@ 0x30
 8005f7c:	f04f 0901 	mov.w	r9, #1
 8005f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006130 <_vfiprintf_r+0x21c>
 8005f88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	469a      	mov	sl, r3
 8005f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f94:	b10a      	cbz	r2, 8005f9a <_vfiprintf_r+0x86>
 8005f96:	2a25      	cmp	r2, #37	@ 0x25
 8005f98:	d1f9      	bne.n	8005f8e <_vfiprintf_r+0x7a>
 8005f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9e:	d00b      	beq.n	8005fb8 <_vfiprintf_r+0xa4>
 8005fa0:	465b      	mov	r3, fp
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7ff ffa2 	bl	8005ef0 <__sfputs_r>
 8005fac:	3001      	adds	r0, #1
 8005fae:	f000 80a7 	beq.w	8006100 <_vfiprintf_r+0x1ec>
 8005fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb4:	445a      	add	r2, fp
 8005fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 809f 	beq.w	8006100 <_vfiprintf_r+0x1ec>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fcc:	f10a 0a01 	add.w	sl, sl, #1
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fda:	4654      	mov	r4, sl
 8005fdc:	2205      	movs	r2, #5
 8005fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe2:	4853      	ldr	r0, [pc, #332]	@ (8006130 <_vfiprintf_r+0x21c>)
 8005fe4:	f7fe f9b9 	bl	800435a <memchr>
 8005fe8:	9a04      	ldr	r2, [sp, #16]
 8005fea:	b9d8      	cbnz	r0, 8006024 <_vfiprintf_r+0x110>
 8005fec:	06d1      	lsls	r1, r2, #27
 8005fee:	bf44      	itt	mi
 8005ff0:	2320      	movmi	r3, #32
 8005ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff6:	0713      	lsls	r3, r2, #28
 8005ff8:	bf44      	itt	mi
 8005ffa:	232b      	movmi	r3, #43	@ 0x2b
 8005ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006000:	f89a 3000 	ldrb.w	r3, [sl]
 8006004:	2b2a      	cmp	r3, #42	@ 0x2a
 8006006:	d015      	beq.n	8006034 <_vfiprintf_r+0x120>
 8006008:	4654      	mov	r4, sl
 800600a:	2000      	movs	r0, #0
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	9a07      	ldr	r2, [sp, #28]
 8006012:	4621      	mov	r1, r4
 8006014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006018:	3b30      	subs	r3, #48	@ 0x30
 800601a:	2b09      	cmp	r3, #9
 800601c:	d94b      	bls.n	80060b6 <_vfiprintf_r+0x1a2>
 800601e:	b1b0      	cbz	r0, 800604e <_vfiprintf_r+0x13a>
 8006020:	9207      	str	r2, [sp, #28]
 8006022:	e014      	b.n	800604e <_vfiprintf_r+0x13a>
 8006024:	eba0 0308 	sub.w	r3, r0, r8
 8006028:	fa09 f303 	lsl.w	r3, r9, r3
 800602c:	4313      	orrs	r3, r2
 800602e:	46a2      	mov	sl, r4
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	e7d2      	b.n	8005fda <_vfiprintf_r+0xc6>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	1d19      	adds	r1, r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	9103      	str	r1, [sp, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bfbb      	ittet	lt
 8006040:	425b      	neglt	r3, r3
 8006042:	f042 0202 	orrlt.w	r2, r2, #2
 8006046:	9307      	strge	r3, [sp, #28]
 8006048:	9307      	strlt	r3, [sp, #28]
 800604a:	bfb8      	it	lt
 800604c:	9204      	strlt	r2, [sp, #16]
 800604e:	7823      	ldrb	r3, [r4, #0]
 8006050:	2b2e      	cmp	r3, #46	@ 0x2e
 8006052:	d10a      	bne.n	800606a <_vfiprintf_r+0x156>
 8006054:	7863      	ldrb	r3, [r4, #1]
 8006056:	2b2a      	cmp	r3, #42	@ 0x2a
 8006058:	d132      	bne.n	80060c0 <_vfiprintf_r+0x1ac>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	3402      	adds	r4, #2
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	9203      	str	r2, [sp, #12]
 8006064:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006068:	9305      	str	r3, [sp, #20]
 800606a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006134 <_vfiprintf_r+0x220>
 800606e:	2203      	movs	r2, #3
 8006070:	4650      	mov	r0, sl
 8006072:	7821      	ldrb	r1, [r4, #0]
 8006074:	f7fe f971 	bl	800435a <memchr>
 8006078:	b138      	cbz	r0, 800608a <_vfiprintf_r+0x176>
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	9b04      	ldr	r3, [sp, #16]
 800607e:	eba0 000a 	sub.w	r0, r0, sl
 8006082:	4082      	lsls	r2, r0
 8006084:	4313      	orrs	r3, r2
 8006086:	3401      	adds	r4, #1
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608e:	2206      	movs	r2, #6
 8006090:	4829      	ldr	r0, [pc, #164]	@ (8006138 <_vfiprintf_r+0x224>)
 8006092:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006096:	f7fe f960 	bl	800435a <memchr>
 800609a:	2800      	cmp	r0, #0
 800609c:	d03f      	beq.n	800611e <_vfiprintf_r+0x20a>
 800609e:	4b27      	ldr	r3, [pc, #156]	@ (800613c <_vfiprintf_r+0x228>)
 80060a0:	bb1b      	cbnz	r3, 80060ea <_vfiprintf_r+0x1d6>
 80060a2:	9b03      	ldr	r3, [sp, #12]
 80060a4:	3307      	adds	r3, #7
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	3308      	adds	r3, #8
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b0:	443b      	add	r3, r7
 80060b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b4:	e76a      	b.n	8005f8c <_vfiprintf_r+0x78>
 80060b6:	460c      	mov	r4, r1
 80060b8:	2001      	movs	r0, #1
 80060ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80060be:	e7a8      	b.n	8006012 <_vfiprintf_r+0xfe>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4619      	mov	r1, r3
 80060c8:	3401      	adds	r4, #1
 80060ca:	9305      	str	r3, [sp, #20]
 80060cc:	4620      	mov	r0, r4
 80060ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d2:	3a30      	subs	r2, #48	@ 0x30
 80060d4:	2a09      	cmp	r2, #9
 80060d6:	d903      	bls.n	80060e0 <_vfiprintf_r+0x1cc>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0c6      	beq.n	800606a <_vfiprintf_r+0x156>
 80060dc:	9105      	str	r1, [sp, #20]
 80060de:	e7c4      	b.n	800606a <_vfiprintf_r+0x156>
 80060e0:	4604      	mov	r4, r0
 80060e2:	2301      	movs	r3, #1
 80060e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e8:	e7f0      	b.n	80060cc <_vfiprintf_r+0x1b8>
 80060ea:	ab03      	add	r3, sp, #12
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	462a      	mov	r2, r5
 80060f0:	4630      	mov	r0, r6
 80060f2:	4b13      	ldr	r3, [pc, #76]	@ (8006140 <_vfiprintf_r+0x22c>)
 80060f4:	a904      	add	r1, sp, #16
 80060f6:	f7fd fbb9 	bl	800386c <_printf_float>
 80060fa:	4607      	mov	r7, r0
 80060fc:	1c78      	adds	r0, r7, #1
 80060fe:	d1d6      	bne.n	80060ae <_vfiprintf_r+0x19a>
 8006100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d405      	bmi.n	8006112 <_vfiprintf_r+0x1fe>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d402      	bmi.n	8006112 <_vfiprintf_r+0x1fe>
 800610c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800610e:	f7fe f923 	bl	8004358 <__retarget_lock_release_recursive>
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	065b      	lsls	r3, r3, #25
 8006116:	f53f af1f 	bmi.w	8005f58 <_vfiprintf_r+0x44>
 800611a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800611c:	e71e      	b.n	8005f5c <_vfiprintf_r+0x48>
 800611e:	ab03      	add	r3, sp, #12
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	462a      	mov	r2, r5
 8006124:	4630      	mov	r0, r6
 8006126:	4b06      	ldr	r3, [pc, #24]	@ (8006140 <_vfiprintf_r+0x22c>)
 8006128:	a904      	add	r1, sp, #16
 800612a:	f7fd fe3d 	bl	8003da8 <_printf_i>
 800612e:	e7e4      	b.n	80060fa <_vfiprintf_r+0x1e6>
 8006130:	080066c8 	.word	0x080066c8
 8006134:	080066ce 	.word	0x080066ce
 8006138:	080066d2 	.word	0x080066d2
 800613c:	0800386d 	.word	0x0800386d
 8006140:	08005ef1 	.word	0x08005ef1

08006144 <__swbuf_r>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	460e      	mov	r6, r1
 8006148:	4614      	mov	r4, r2
 800614a:	4605      	mov	r5, r0
 800614c:	b118      	cbz	r0, 8006156 <__swbuf_r+0x12>
 800614e:	6a03      	ldr	r3, [r0, #32]
 8006150:	b90b      	cbnz	r3, 8006156 <__swbuf_r+0x12>
 8006152:	f7fd ffd5 	bl	8004100 <__sinit>
 8006156:	69a3      	ldr	r3, [r4, #24]
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	071a      	lsls	r2, r3, #28
 800615e:	d501      	bpl.n	8006164 <__swbuf_r+0x20>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b943      	cbnz	r3, 8006176 <__swbuf_r+0x32>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f82a 	bl	80061c0 <__swsetup_r>
 800616c:	b118      	cbz	r0, 8006176 <__swbuf_r+0x32>
 800616e:	f04f 37ff 	mov.w	r7, #4294967295
 8006172:	4638      	mov	r0, r7
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	6922      	ldr	r2, [r4, #16]
 800617a:	b2f6      	uxtb	r6, r6
 800617c:	1a98      	subs	r0, r3, r2
 800617e:	6963      	ldr	r3, [r4, #20]
 8006180:	4637      	mov	r7, r6
 8006182:	4283      	cmp	r3, r0
 8006184:	dc05      	bgt.n	8006192 <__swbuf_r+0x4e>
 8006186:	4621      	mov	r1, r4
 8006188:	4628      	mov	r0, r5
 800618a:	f7ff fd9b 	bl	8005cc4 <_fflush_r>
 800618e:	2800      	cmp	r0, #0
 8006190:	d1ed      	bne.n	800616e <__swbuf_r+0x2a>
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	3b01      	subs	r3, #1
 8006196:	60a3      	str	r3, [r4, #8]
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	701e      	strb	r6, [r3, #0]
 80061a0:	6962      	ldr	r2, [r4, #20]
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d004      	beq.n	80061b2 <__swbuf_r+0x6e>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	07db      	lsls	r3, r3, #31
 80061ac:	d5e1      	bpl.n	8006172 <__swbuf_r+0x2e>
 80061ae:	2e0a      	cmp	r6, #10
 80061b0:	d1df      	bne.n	8006172 <__swbuf_r+0x2e>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff fd85 	bl	8005cc4 <_fflush_r>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d0d9      	beq.n	8006172 <__swbuf_r+0x2e>
 80061be:	e7d6      	b.n	800616e <__swbuf_r+0x2a>

080061c0 <__swsetup_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4b29      	ldr	r3, [pc, #164]	@ (8006268 <__swsetup_r+0xa8>)
 80061c4:	4605      	mov	r5, r0
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	460c      	mov	r4, r1
 80061ca:	b118      	cbz	r0, 80061d4 <__swsetup_r+0x14>
 80061cc:	6a03      	ldr	r3, [r0, #32]
 80061ce:	b90b      	cbnz	r3, 80061d4 <__swsetup_r+0x14>
 80061d0:	f7fd ff96 	bl	8004100 <__sinit>
 80061d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d8:	0719      	lsls	r1, r3, #28
 80061da:	d422      	bmi.n	8006222 <__swsetup_r+0x62>
 80061dc:	06da      	lsls	r2, r3, #27
 80061de:	d407      	bmi.n	80061f0 <__swsetup_r+0x30>
 80061e0:	2209      	movs	r2, #9
 80061e2:	602a      	str	r2, [r5, #0]
 80061e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	e033      	b.n	8006258 <__swsetup_r+0x98>
 80061f0:	0758      	lsls	r0, r3, #29
 80061f2:	d512      	bpl.n	800621a <__swsetup_r+0x5a>
 80061f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061f6:	b141      	cbz	r1, 800620a <__swsetup_r+0x4a>
 80061f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061fc:	4299      	cmp	r1, r3
 80061fe:	d002      	beq.n	8006206 <__swsetup_r+0x46>
 8006200:	4628      	mov	r0, r5
 8006202:	f7fe ff09 	bl	8005018 <_free_r>
 8006206:	2300      	movs	r3, #0
 8006208:	6363      	str	r3, [r4, #52]	@ 0x34
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	2300      	movs	r3, #0
 8006214:	6063      	str	r3, [r4, #4]
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f043 0308 	orr.w	r3, r3, #8
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	b94b      	cbnz	r3, 800623a <__swsetup_r+0x7a>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800622c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006230:	d003      	beq.n	800623a <__swsetup_r+0x7a>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 f882 	bl	800633e <__smakebuf_r>
 800623a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623e:	f013 0201 	ands.w	r2, r3, #1
 8006242:	d00a      	beq.n	800625a <__swsetup_r+0x9a>
 8006244:	2200      	movs	r2, #0
 8006246:	60a2      	str	r2, [r4, #8]
 8006248:	6962      	ldr	r2, [r4, #20]
 800624a:	4252      	negs	r2, r2
 800624c:	61a2      	str	r2, [r4, #24]
 800624e:	6922      	ldr	r2, [r4, #16]
 8006250:	b942      	cbnz	r2, 8006264 <__swsetup_r+0xa4>
 8006252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006256:	d1c5      	bne.n	80061e4 <__swsetup_r+0x24>
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	0799      	lsls	r1, r3, #30
 800625c:	bf58      	it	pl
 800625e:	6962      	ldrpl	r2, [r4, #20]
 8006260:	60a2      	str	r2, [r4, #8]
 8006262:	e7f4      	b.n	800624e <__swsetup_r+0x8e>
 8006264:	2000      	movs	r0, #0
 8006266:	e7f7      	b.n	8006258 <__swsetup_r+0x98>
 8006268:	20000030 	.word	0x20000030

0800626c <_raise_r>:
 800626c:	291f      	cmp	r1, #31
 800626e:	b538      	push	{r3, r4, r5, lr}
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	d904      	bls.n	8006280 <_raise_r+0x14>
 8006276:	2316      	movs	r3, #22
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006282:	b112      	cbz	r2, 800628a <_raise_r+0x1e>
 8006284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006288:	b94b      	cbnz	r3, 800629e <_raise_r+0x32>
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f830 	bl	80062f0 <_getpid_r>
 8006290:	4622      	mov	r2, r4
 8006292:	4601      	mov	r1, r0
 8006294:	4628      	mov	r0, r5
 8006296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800629a:	f000 b817 	b.w	80062cc <_kill_r>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d00a      	beq.n	80062b8 <_raise_r+0x4c>
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	d103      	bne.n	80062ae <_raise_r+0x42>
 80062a6:	2316      	movs	r3, #22
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	2001      	movs	r0, #1
 80062ac:	e7e7      	b.n	800627e <_raise_r+0x12>
 80062ae:	2100      	movs	r1, #0
 80062b0:	4620      	mov	r0, r4
 80062b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062b6:	4798      	blx	r3
 80062b8:	2000      	movs	r0, #0
 80062ba:	e7e0      	b.n	800627e <_raise_r+0x12>

080062bc <raise>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <raise+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f7ff bfd3 	b.w	800626c <_raise_r>
 80062c6:	bf00      	nop
 80062c8:	20000030 	.word	0x20000030

080062cc <_kill_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	2300      	movs	r3, #0
 80062d0:	4d06      	ldr	r5, [pc, #24]	@ (80062ec <_kill_r+0x20>)
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f7fb faac 	bl	8001836 <_kill>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d102      	bne.n	80062e8 <_kill_r+0x1c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	b103      	cbz	r3, 80062e8 <_kill_r+0x1c>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000450 	.word	0x20000450

080062f0 <_getpid_r>:
 80062f0:	f7fb ba9a 	b.w	8001828 <_getpid>

080062f4 <__swhatbuf_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460c      	mov	r4, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	4615      	mov	r5, r2
 80062fe:	2900      	cmp	r1, #0
 8006300:	461e      	mov	r6, r3
 8006302:	b096      	sub	sp, #88	@ 0x58
 8006304:	da0c      	bge.n	8006320 <__swhatbuf_r+0x2c>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	2100      	movs	r1, #0
 800630a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800630e:	bf14      	ite	ne
 8006310:	2340      	movne	r3, #64	@ 0x40
 8006312:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006316:	2000      	movs	r0, #0
 8006318:	6031      	str	r1, [r6, #0]
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	b016      	add	sp, #88	@ 0x58
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	466a      	mov	r2, sp
 8006322:	f000 f849 	bl	80063b8 <_fstat_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	dbed      	blt.n	8006306 <__swhatbuf_r+0x12>
 800632a:	9901      	ldr	r1, [sp, #4]
 800632c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006330:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006334:	4259      	negs	r1, r3
 8006336:	4159      	adcs	r1, r3
 8006338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800633c:	e7eb      	b.n	8006316 <__swhatbuf_r+0x22>

0800633e <__smakebuf_r>:
 800633e:	898b      	ldrh	r3, [r1, #12]
 8006340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006342:	079d      	lsls	r5, r3, #30
 8006344:	4606      	mov	r6, r0
 8006346:	460c      	mov	r4, r1
 8006348:	d507      	bpl.n	800635a <__smakebuf_r+0x1c>
 800634a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2301      	movs	r3, #1
 8006354:	6163      	str	r3, [r4, #20]
 8006356:	b003      	add	sp, #12
 8006358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635a:	466a      	mov	r2, sp
 800635c:	ab01      	add	r3, sp, #4
 800635e:	f7ff ffc9 	bl	80062f4 <__swhatbuf_r>
 8006362:	9f00      	ldr	r7, [sp, #0]
 8006364:	4605      	mov	r5, r0
 8006366:	4639      	mov	r1, r7
 8006368:	4630      	mov	r0, r6
 800636a:	f7fe fec7 	bl	80050fc <_malloc_r>
 800636e:	b948      	cbnz	r0, 8006384 <__smakebuf_r+0x46>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d4ee      	bmi.n	8006356 <__smakebuf_r+0x18>
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7e2      	b.n	800634a <__smakebuf_r+0xc>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800638a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	b15b      	cbz	r3, 80063ae <__smakebuf_r+0x70>
 8006396:	4630      	mov	r0, r6
 8006398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800639c:	f000 f81e 	bl	80063dc <_isatty_r>
 80063a0:	b128      	cbz	r0, 80063ae <__smakebuf_r+0x70>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	431d      	orrs	r5, r3
 80063b2:	81a5      	strh	r5, [r4, #12]
 80063b4:	e7cf      	b.n	8006356 <__smakebuf_r+0x18>
	...

080063b8 <_fstat_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	2300      	movs	r3, #0
 80063bc:	4d06      	ldr	r5, [pc, #24]	@ (80063d8 <_fstat_r+0x20>)
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f7fb fa95 	bl	80018f4 <_fstat>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d102      	bne.n	80063d4 <_fstat_r+0x1c>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	b103      	cbz	r3, 80063d4 <_fstat_r+0x1c>
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	20000450 	.word	0x20000450

080063dc <_isatty_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	2300      	movs	r3, #0
 80063e0:	4d05      	ldr	r5, [pc, #20]	@ (80063f8 <_isatty_r+0x1c>)
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb fa93 	bl	8001912 <_isatty>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_isatty_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_isatty_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20000450 	.word	0x20000450

080063fc <_init>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr

08006408 <_fini>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr
