
Da_nhiem_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009278  08009278  0000a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  0000b1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009758  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  200001f4  0800994c  0000b1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  0800994c  0000b4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168dd  00000000  00000000  0000b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003570  00000000  00000000  00021afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00025070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102b  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000512b  00000000  00000000  0002756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ae  00000000  00000000  0002c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ec4  00000000  00000000  00043744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  000da64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e0f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009260 	.word	0x08009260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009260 	.word	0x08009260

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2uiz>:
 8000d44:	0042      	lsls	r2, r0, #1
 8000d46:	d20e      	bcs.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d4c:	d30b      	bcc.n	8000d66 <__aeabi_f2uiz+0x22>
 8000d4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d409      	bmi.n	8000d6c <__aeabi_f2uiz+0x28>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2uiz+0x32>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d102      	bne.n	8000d7c <__aeabi_f2uiz+0x38>
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	4770      	bx	lr
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <vApplicationGetIdleTaskMemory+0x28>)
 8000d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2280      	movs	r2, #128	@ 0x80
 8000da0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	20000210 	.word	0x20000210
 8000db0:	200002b0 	.word	0x200002b0

08000db4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t system_state = 1; // 1: Chạy, 0: Dừng
uint8_t received_data;       // Biến lưu dữ liệu nhận được qua UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <HAL_UART_RxCpltCallback+0x60>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d121      	bne.n	8000e0a <HAL_UART_RxCpltCallback+0x56>
        if (received_data == '1') {
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_UART_RxCpltCallback+0x64>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b31      	cmp	r3, #49	@ 0x31
 8000dcc:	d10a      	bne.n	8000de4 <HAL_UART_RxCpltCallback+0x30>
            system_state = 1; // Chạy
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <HAL_UART_RxCpltCallback+0x68>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)" System Running\r\n", 16, HAL_MAX_DELAY);
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	2210      	movs	r2, #16
 8000dda:	4911      	ldr	r1, [pc, #68]	@ (8000e20 <HAL_UART_RxCpltCallback+0x6c>)
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <HAL_UART_RxCpltCallback+0x70>)
 8000dde:	f002 fe79 	bl	8003ad4 <HAL_UART_Transmit>
 8000de2:	e00d      	b.n	8000e00 <HAL_UART_RxCpltCallback+0x4c>
        } else if (received_data == '0') {
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_UART_RxCpltCallback+0x64>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b30      	cmp	r3, #48	@ 0x30
 8000dea:	d109      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x4c>
            system_state = 0; // Dừng
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_UART_RxCpltCallback+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)" System Stopped\r\n", 16, HAL_MAX_DELAY);
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	2210      	movs	r2, #16
 8000df8:	490b      	ldr	r1, [pc, #44]	@ (8000e28 <HAL_UART_RxCpltCallback+0x74>)
 8000dfa:	480a      	ldr	r0, [pc, #40]	@ (8000e24 <HAL_UART_RxCpltCallback+0x70>)
 8000dfc:	f002 fe6a 	bl	8003ad4 <HAL_UART_Transmit>
        }

        // Tiếp tục nhận dữ liệu
        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	4905      	ldr	r1, [pc, #20]	@ (8000e18 <HAL_UART_RxCpltCallback+0x64>)
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <HAL_UART_RxCpltCallback+0x70>)
 8000e06:	f002 fef0 	bl	8003bea <HAL_UART_Receive_IT>
    }
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013800 	.word	0x40013800
 8000e18:	200005ac 	.word	0x200005ac
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	08009278 	.word	0x08009278
 8000e24:	20000550 	.word	0x20000550
 8000e28:	0800928c 	.word	0x0800928c

08000e2c <ConvertNumberToDigits>:
    0x78, // 7
    0x00, // 8
    0x10  // 9
};

void ConvertNumberToDigits(uint16_t number, uint8_t *digits){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	80fb      	strh	r3, [r7, #6]
    digits[3] = digit_codes[number % 10];
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <ConvertNumberToDigits+0xbc>)
 8000e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e40:	08d9      	lsrs	r1, r3, #3
 8000e42:	460b      	mov	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3303      	adds	r3, #3
 8000e54:	4a25      	ldr	r2, [pc, #148]	@ (8000eec <ConvertNumberToDigits+0xc0>)
 8000e56:	5c52      	ldrb	r2, [r2, r1]
 8000e58:	701a      	strb	r2, [r3, #0]
    digits[2] = digit_codes[(number / 10) % 10];
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ee8 <ConvertNumberToDigits+0xbc>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <ConvertNumberToDigits+0xbc>)
 8000e68:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6c:	08d9      	lsrs	r1, r3, #3
 8000e6e:	460b      	mov	r3, r1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3302      	adds	r3, #2
 8000e80:	4a1a      	ldr	r2, [pc, #104]	@ (8000eec <ConvertNumberToDigits+0xc0>)
 8000e82:	5c52      	ldrb	r2, [r2, r1]
 8000e84:	701a      	strb	r2, [r3, #0]
    digits[1] = dp[(number / 100) % 10];
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <ConvertNumberToDigits+0xc4>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <ConvertNumberToDigits+0xbc>)
 8000e94:	fba3 1302 	umull	r1, r3, r3, r2
 8000e98:	08d9      	lsrs	r1, r3, #3
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <ConvertNumberToDigits+0xc8>)
 8000eae:	5c52      	ldrb	r2, [r2, r1]
 8000eb0:	701a      	strb	r2, [r3, #0]
    digits[0] = digit_codes[(number / 1000) % 10];
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <ConvertNumberToDigits+0xcc>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	099b      	lsrs	r3, r3, #6
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <ConvertNumberToDigits+0xbc>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	08d9      	lsrs	r1, r3, #3
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <ConvertNumberToDigits+0xc0>)
 8000ed6:	5c9a      	ldrb	r2, [r3, r2]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	cccccccd 	.word	0xcccccccd
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	51eb851f 	.word	0x51eb851f
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <SendToLED_SPI>:

void SendToLED_SPI(uint8_t* digits){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    // LOAD xuống thấp trước khi gửi dữ liệu
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	4810      	ldr	r0, [pc, #64]	@ (8000f4c <SendToLED_SPI+0x50>)
 8000f0a:	f001 fa66 	bl	80023da <HAL_GPIO_WritePin>

    // Gửi lần lượt 4 byte (4 chữ số) qua SPI
    for (int i = 0; i < 4; i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	e00e      	b.n	8000f32 <SendToLED_SPI+0x36>
        HAL_SPI_Transmit(&hspi1, &digits[3 - i], 1, HAL_MAX_DELAY); // Gửi byte từ trái sang phải
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f1c3 0303 	rsb	r3, r3, #3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1899      	adds	r1, r3, r2
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	2201      	movs	r2, #1
 8000f26:	480a      	ldr	r0, [pc, #40]	@ (8000f50 <SendToLED_SPI+0x54>)
 8000f28:	f001 ff4c 	bl	8002dc4 <HAL_SPI_Transmit>
    for (int i = 0; i < 4; i++){
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dded      	ble.n	8000f14 <SendToLED_SPI+0x18>
    }

    // LOAD lên cao để chốt dữ liệu hiển thị
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <SendToLED_SPI+0x50>)
 8000f3e:	f001 fa4c 	bl	80023da <HAL_GPIO_WritePin>
    //HAL_Delay(100);
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	200004b0 	.word	0x200004b0

08000f54 <delay>:

void delay(uint16_t time){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COUNTER(&htim1,0);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <delay+0x2c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
	 while((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 8000f66:	bf00      	nop
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <delay+0x2c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f9      	bcc.n	8000f68 <delay+0x14>
 }
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000508 	.word	0x20000508

08000f84 <SET_PIN_OUTPUT>:
 uint8_t Presence = 0;

 uint16_t temp_humi_display;
 uint8_t digits[4];

 void SET_PIN_OUTPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <SET_PIN_OUTPUT+0x40>)
 8000fb6:	f001 f875 	bl	80020a4 <HAL_GPIO_Init>
 }
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <SET_PIN_INPUT>:

 void SET_PIN_INPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <SET_PIN_INPUT+0x3c>)
 8000ff6:	f001 f855 	bl	80020a4 <HAL_GPIO_Init>
 }
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010800 	.word	0x40010800

08001008 <DHT11_Start>:

 void DHT11_Start (void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
 	SET_PIN_OUTPUT(DHT11_PORT, DHT11_PIN);
 800100c:	2102      	movs	r1, #2
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <DHT11_Start+0x3c>)
 8001010:	f7ff ffb8 	bl	8000f84 <SET_PIN_OUTPUT>
 	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <DHT11_Start+0x3c>)
 800101a:	f001 f9de 	bl	80023da <HAL_GPIO_WritePin>
 	delay(18000);   // wait for 18ms
 800101e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001022:	f7ff ff97 	bl	8000f54 <delay>
 	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	2102      	movs	r1, #2
 800102a:	4806      	ldr	r0, [pc, #24]	@ (8001044 <DHT11_Start+0x3c>)
 800102c:	f001 f9d5 	bl	80023da <HAL_GPIO_WritePin>
 	delay(20);
 8001030:	2014      	movs	r0, #20
 8001032:	f7ff ff8f 	bl	8000f54 <delay>
 	SET_PIN_INPUT(DHT11_PORT, DHT11_PIN);
 8001036:	2102      	movs	r1, #2
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <DHT11_Start+0x3c>)
 800103a:	f7ff ffc5 	bl	8000fc8 <SET_PIN_INPUT>
 }
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800

08001048 <Check_Response>:

  uint8_t Check_Response (void){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 	uint8_t Response = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
 	delay (40);
 8001052:	2028      	movs	r0, #40	@ 0x28
 8001054:	f7ff ff7e 	bl	8000f54 <delay>
 	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))){
 8001058:	2102      	movs	r1, #2
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <Check_Response+0x58>)
 800105c:	f001 f9a6 	bl	80023ac <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10e      	bne.n	8001084 <Check_Response+0x3c>
 		delay (80);
 8001066:	2050      	movs	r0, #80	@ 0x50
 8001068:	f7ff ff74 	bl	8000f54 <delay>
 		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800106c:	2102      	movs	r1, #2
 800106e:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <Check_Response+0x58>)
 8001070:	f001 f99c 	bl	80023ac <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <Check_Response+0x38>
 800107a:	2301      	movs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e001      	b.n	8001084 <Check_Response+0x3c>
 		else Response = -1;  //255
 8001080:	23ff      	movs	r3, #255	@ 0xff
 8001082:	71fb      	strb	r3, [r7, #7]
 	}
 	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // doi pin xung thap
 8001084:	bf00      	nop
 8001086:	2102      	movs	r1, #2
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <Check_Response+0x58>)
 800108a:	f001 f98f 	bl	80023ac <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f8      	bne.n	8001086 <Check_Response+0x3e>

 	return Response;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 }
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800

080010a4 <DHT11_Read>:

 uint8_t DHT11_Read (void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 	uint8_t i, j;
 	for (j=0; j<8; j++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	e037      	b.n	8001120 <DHT11_Read+0x7c>
 		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80010b0:	bf00      	nop
 80010b2:	2102      	movs	r1, #2
 80010b4:	481e      	ldr	r0, [pc, #120]	@ (8001130 <DHT11_Read+0x8c>)
 80010b6:	f001 f979 	bl	80023ac <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f8      	beq.n	80010b2 <DHT11_Read+0xe>
 		delay (40);   // wait for 40 us, cho trong 40us, neu Readdht11 ma xuong 0 --> nhan bit 0, neu sau 40us ma chua xuong 0--> nhan bit 1
 80010c0:	2028      	movs	r0, #40	@ 0x28
 80010c2:	f7ff ff47 	bl	8000f54 <delay>
 		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010c6:	2102      	movs	r1, #2
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <DHT11_Read+0x8c>)
 80010ca:	f001 f96f 	bl	80023ac <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10e      	bne.n	80010f2 <DHT11_Read+0x4e>
 		{
 			i&= ~(1<<(7-j));   // write 0
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2201      	movs	r2, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	4013      	ands	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	e00b      	b.n	800110a <DHT11_Read+0x66>
 		}
 		else {
 			i|= (1<<(7-j));
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	f1c3 0307 	rsb	r3, r3, #7
 80010f8:	2201      	movs	r2, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4313      	orrs	r3, r2
 8001106:	b25b      	sxtb	r3, r3
 8001108:	71fb      	strb	r3, [r7, #7]
 		}			// pin high , write 1
 		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800110a:	bf00      	nop
 800110c:	2102      	movs	r1, #2
 800110e:	4808      	ldr	r0, [pc, #32]	@ (8001130 <DHT11_Read+0x8c>)
 8001110:	f001 f94c 	bl	80023ac <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f8      	bne.n	800110c <DHT11_Read+0x68>
 	for (j=0; j<8; j++){
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	3301      	adds	r3, #1
 800111e:	71bb      	strb	r3, [r7, #6]
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d9c4      	bls.n	80010b0 <DHT11_Read+0xc>
 	}
 	return i;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 }
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010800 	.word	0x40010800

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b09e      	sub	sp, #120	@ 0x78
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 fdef 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f883 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 f977 	bl	8001434 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001146:	f000 f94b 	bl	80013e0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800114a:	f000 f8c3 	bl	80012d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800114e:	f000 f8f7 	bl	8001340 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //osKernelInitialize();
  HAL_TIM_Base_Start(&htim1);
 8001152:	4831      	ldr	r0, [pc, #196]	@ (8001218 <main+0xe4>)
 8001154:	f002 f882 	bl	800325c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	4930      	ldr	r1, [pc, #192]	@ (800121c <main+0xe8>)
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <main+0xec>)
 800115e:	f002 fd44 	bl	8003bea <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of R1_Mutex */
  osMutexDef(R1_Mutex);
 8001162:	2300      	movs	r3, #0
 8001164:	673b      	str	r3, [r7, #112]	@ 0x70
 8001166:	2300      	movs	r3, #0
 8001168:	677b      	str	r3, [r7, #116]	@ 0x74
  R1_MutexHandle = osMutexCreate(osMutex(R1_Mutex));
 800116a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fb48 	bl	8004804 <osMutexCreate>
 8001174:	4603      	mov	r3, r0
 8001176:	4a2b      	ldr	r2, [pc, #172]	@ (8001224 <main+0xf0>)
 8001178:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1_ReadTemp */
  osThreadDef(Task1_ReadTemp, Task1_GetTemperature, osPriorityNormal, 0, 128);
 800117a:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <main+0xf4>)
 800117c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1_ReadTempHandle = osThreadCreate(osThread(Task1_ReadTemp), NULL);
 800118e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fad5 	bl	8004744 <osThreadCreate>
 800119a:	4603      	mov	r3, r0
 800119c:	4a23      	ldr	r2, [pc, #140]	@ (800122c <main+0xf8>)
 800119e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2_ReadHumi */
  osThreadDef(Task2_ReadHumi, Task2_GetHumidity, osPriorityNormal, 0, 128);
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <main+0xfc>)
 80011a2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2_ReadHumiHandle = osThreadCreate(osThread(Task2_ReadHumi), NULL);
 80011b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fac2 	bl	8004744 <osThreadCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <main+0x100>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3_SendData */
  osThreadDef(Task3_SendData, Task3_SendTempHumidity, osPriorityNormal, 0, 128);
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <main+0x104>)
 80011c8:	f107 041c 	add.w	r4, r7, #28
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3_SendDataHandle = osThreadCreate(osThread(Task3_SendData), NULL);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 faaf 	bl	8004744 <osThreadCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a14      	ldr	r2, [pc, #80]	@ (800123c <main+0x108>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4_7display */
  osThreadDef(Task4_7display, Task4_DisplayTempHumidity, osPriorityNormal, 0, 128);
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <main+0x10c>)
 80011ee:	463c      	mov	r4, r7
 80011f0:	461d      	mov	r5, r3
 80011f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4_7displayHandle = osThreadCreate(osThread(Task4_7display), NULL);
 80011fe:	463b      	mov	r3, r7
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fa9e 	bl	8004744 <osThreadCreate>
 8001208:	4603      	mov	r3, r0
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <main+0x110>)
 800120c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  //osKernelInitialize();
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800120e:	f003 fa92 	bl	8004736 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001212:	bf00      	nop
 8001214:	e7fd      	b.n	8001212 <main+0xde>
 8001216:	bf00      	nop
 8001218:	20000508 	.word	0x20000508
 800121c:	200005ac 	.word	0x200005ac
 8001220:	20000550 	.word	0x20000550
 8001224:	200005a8 	.word	0x200005a8
 8001228:	080092b0 	.word	0x080092b0
 800122c:	20000598 	.word	0x20000598
 8001230:	080092dc 	.word	0x080092dc
 8001234:	2000059c 	.word	0x2000059c
 8001238:	08009308 	.word	0x08009308
 800123c:	200005a0 	.word	0x200005a0
 8001240:	08009334 	.word	0x08009334
 8001244:	200005a4 	.word	0x200005a4

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	@ 0x40
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2228      	movs	r2, #40	@ 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fedb 	bl	8007012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127a:	2301      	movs	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001288:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f8d2 	bl	800243c <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800129e:	f000 fab5 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2302      	movs	r3, #2
 80012a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fb40 	bl	8002940 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012c6:	f000 faa1 	bl	800180c <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3740      	adds	r7, #64	@ 0x40
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	@ (800133c <MX_SPI1_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001308:	2218      	movs	r2, #24
 800130a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001326:	f001 fcc9 	bl	8002cbc <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fa6c 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200004b0 	.word	0x200004b0
 800133c:	40013000 	.word	0x40013000

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <MX_TIM1_Init+0x98>)
 800135e:	4a1f      	ldr	r2, [pc, #124]	@ (80013dc <MX_TIM1_Init+0x9c>)
 8001360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_TIM1_Init+0x98>)
 8001364:	220f      	movs	r2, #15
 8001366:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_TIM1_Init+0x98>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_TIM1_Init+0x98>)
 8001370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001374:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_TIM1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_TIM1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_TIM1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001388:	4813      	ldr	r0, [pc, #76]	@ (80013d8 <MX_TIM1_Init+0x98>)
 800138a:	f001 ff18 	bl	80031be <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fa3a 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <MX_TIM1_Init+0x98>)
 80013a6:	f002 f8e5 	bl	8003574 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b0:	f000 fa2c 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_TIM1_Init+0x98>)
 80013c2:	f002 fac7 	bl	8003954 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013cc:	f000 fa1e 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000508 	.word	0x20000508
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_USART1_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001418:	f002 fb0c 	bl	8003a34 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 f9f3 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000550 	.word	0x20000550
 8001430:	40013800 	.word	0x40013800

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <MX_GPIO_Init+0xd0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <MX_GPIO_Init+0xd0>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_GPIO_Init+0xd0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001460:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <MX_GPIO_Init+0xd0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <MX_GPIO_Init+0xd0>)
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <MX_GPIO_Init+0xd0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_GPIO_Init+0xd0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <MX_GPIO_Init+0xd0>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_GPIO_Init+0xd0>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001496:	481c      	ldr	r0, [pc, #112]	@ (8001508 <MX_GPIO_Init+0xd4>)
 8001498:	f000 ff9f 	bl	80023da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2112      	movs	r1, #18
 80014a0:	481a      	ldr	r0, [pc, #104]	@ (800150c <MX_GPIO_Init+0xd8>)
 80014a2:	f000 ff9a 	bl	80023da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4812      	ldr	r0, [pc, #72]	@ (8001508 <MX_GPIO_Init+0xd4>)
 80014c0:	f000 fdf0 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_GPIO_Init+0xd8>)
 80014dc:	f000 fde2 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e0:	2310      	movs	r3, #16
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_GPIO_Init+0xd8>)
 80014f8:	f000 fdd4 	bl	80020a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40011000 	.word	0x40011000
 800150c:	40010800 	.word	0x40010800

08001510 <Task1_GetTemperature>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_GetTemperature */
void Task1_GetTemperature(void const * argument)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <Task1_GetTemperature+0xec>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d167      	bne.n	80015f0 <Task1_GetTemperature+0xe0>
	    char msg[] = "Task 1 is running\r\n";
 8001520:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <Task1_GetTemperature+0xf0>)
 8001522:	f107 040c 	add.w	r4, r7, #12
 8001526:	461d      	mov	r5, r3
 8001528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe0b 	bl	8000150 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 010c 	add.w	r1, r7, #12
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	482f      	ldr	r0, [pc, #188]	@ (8001604 <Task1_GetTemperature+0xf4>)
 8001548:	f002 fac4 	bl	8003ad4 <HAL_UART_Transmit>
	    DHT11_Start();
 800154c:	f7ff fd5c 	bl	8001008 <DHT11_Start>
	    Presence = Check_Response();
 8001550:	f7ff fd7a 	bl	8001048 <Check_Response>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <Task1_GetTemperature+0xf8>)
 800155a:	701a      	strb	r2, [r3, #0]
	    // Bảo vệ việc ghi vào R1
	    //osMutexWait(R1_MutexHandle, osWaitForever);
	    R1 = DHT11_Read();  // Ghi giá trị vào R1
 800155c:	f7ff fda2 	bl	80010a4 <DHT11_Read>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	@ (800160c <Task1_GetTemperature+0xfc>)
 8001566:	701a      	strb	r2, [r3, #0]
	    //osMutexRelease(R1_MutexHandle);
	    //R1 = DHT11_Read();
	    R2 = DHT11_Read();
 8001568:	f7ff fd9c 	bl	80010a4 <DHT11_Read>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <Task1_GetTemperature+0x100>)
 8001572:	701a      	strb	r2, [r3, #0]
	    T1 = DHT11_Read();
 8001574:	f7ff fd96 	bl	80010a4 <DHT11_Read>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <Task1_GetTemperature+0x104>)
 800157e:	701a      	strb	r2, [r3, #0]
	    T2 = DHT11_Read();
 8001580:	f7ff fd90 	bl	80010a4 <DHT11_Read>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <Task1_GetTemperature+0x108>)
 800158a:	701a      	strb	r2, [r3, #0]
	    sum = DHT11_Read();
 800158c:	f7ff fd8a 	bl	80010a4 <DHT11_Read>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <Task1_GetTemperature+0x10c>)
 8001596:	801a      	strh	r2, [r3, #0]
	    TEMP = T1 + T2 / 10.0;
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <Task1_GetTemperature+0x104>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff31 	bl	8000404 <__aeabi_i2d>
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <Task1_GetTemperature+0x108>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff2a 	bl	8000404 <__aeabi_i2d>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <Task1_GetTemperature+0x110>)
 80015b6:	f7ff f8b9 	bl	800072c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fdd3 	bl	800016c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa5b 	bl	8000a88 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a13      	ldr	r2, [pc, #76]	@ (8001624 <Task1_GetTemperature+0x114>)
 80015d6:	6013      	str	r3, [r2, #0]
	    Temperature = TEMP;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <Task1_GetTemperature+0x114>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <Task1_GetTemperature+0x118>)
 80015de:	6013      	str	r3, [r2, #0]
	    Humidity = R1;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <Task1_GetTemperature+0xfc>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fb55 	bl	8000c94 <__aeabi_ui2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <Task1_GetTemperature+0x11c>)
 80015ee:	6013      	str	r3, [r2, #0]
	    //RH = R1;
	  }
	    osDelay(2000);
 80015f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015f4:	f003 f8f2 	bl	80047dc <osDelay>
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 80015f8:	e78e      	b.n	8001518 <Task1_GetTemperature+0x8>
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	08009350 	.word	0x08009350
 8001604:	20000550 	.word	0x20000550
 8001608:	200005c0 	.word	0x200005c0
 800160c:	200005ad 	.word	0x200005ad
 8001610:	200005ae 	.word	0x200005ae
 8001614:	200005af 	.word	0x200005af
 8001618:	200005b0 	.word	0x200005b0
 800161c:	200005b2 	.word	0x200005b2
 8001620:	40240000 	.word	0x40240000
 8001624:	200005b4 	.word	0x200005b4
 8001628:	200005b8 	.word	0x200005b8
 800162c:	200005bc 	.word	0x200005bc

08001630 <Task2_GetHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_GetHumidity */
void Task2_GetHumidity(void const * argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_GetHumidity */
  /* Infinite loop */
  for(;;)
  {
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <Task2_GetHumidity+0x24>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d104      	bne.n	800164a <Task2_GetHumidity+0x1a>
	    // Bảo vệ việc đ�?c từ R1
	    //osMutexWait(R1_MutexHandle, osWaitForever);
	    //RH = R1;  // �?�?c giá trị từ R1
	    //osMutexRelease(R1_MutexHandle);
	    //Humidity = RH;
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // �?ổi trạng thái chân GPIO (nháy LED)
 8001640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <Task2_GetHumidity+0x28>)
 8001646:	f000 fee0 	bl	800240a <HAL_GPIO_TogglePin>
	    //HAL_Delay(100);
	  }
	    osDelay(2000);
 800164a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800164e:	f003 f8c5 	bl	80047dc <osDelay>
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001652:	e7f1      	b.n	8001638 <Task2_GetHumidity+0x8>
 8001654:	20000000 	.word	0x20000000
 8001658:	40011000 	.word	0x40011000

0800165c <Task3_SendTempHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_SendTempHumidity */
void Task3_SendTempHumidity(void const * argument)
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b096      	sub	sp, #88	@ 0x58
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_SendTempHumidity */
  /* Infinite loop */
  char buffer[50];
  for(;;)
  {
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001664:	4b2c      	ldr	r3, [pc, #176]	@ (8001718 <Task3_SendTempHumidity+0xbc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d14f      	bne.n	800170c <Task3_SendTempHumidity+0xb0>
	    char msg[] = "Task 2 is running\r\n";
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <Task3_SendTempHumidity+0xc0>)
 800166e:	f107 0408 	add.w	r4, r7, #8
 8001672:	461d      	mov	r5, r3
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fd65 	bl	8000150 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 0108 	add.w	r1, r7, #8
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	4823      	ldr	r0, [pc, #140]	@ (8001720 <Task3_SendTempHumidity+0xc4>)
 8001694:	f002 fa1e 	bl	8003ad4 <HAL_UART_Transmit>
	    snprintf(buffer, sizeof(buffer), "Temp: %.1f \n", Temperature);
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <Task3_SendTempHumidity+0xc8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	f107 001c 	add.w	r0, r7, #28
 80016aa:	e9cd 2300 	strd	r2, r3, [sp]
 80016ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <Task3_SendTempHumidity+0xcc>)
 80016b0:	2132      	movs	r1, #50	@ 0x32
 80016b2:	f005 fc37 	bl	8006f24 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd48 	bl	8000150 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 011c 	add.w	r1, r7, #28
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	4814      	ldr	r0, [pc, #80]	@ (8001720 <Task3_SendTempHumidity+0xc4>)
 80016ce:	f002 fa01 	bl	8003ad4 <HAL_UART_Transmit>
	    snprintf(buffer, sizeof(buffer), "Hum: %.1f \n", Humidity);
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <Task3_SendTempHumidity+0xd0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fea6 	bl	8000428 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	f107 001c 	add.w	r0, r7, #28
 80016e4:	e9cd 2300 	strd	r2, r3, [sp]
 80016e8:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <Task3_SendTempHumidity+0xd4>)
 80016ea:	2132      	movs	r1, #50	@ 0x32
 80016ec:	f005 fc1a 	bl	8006f24 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd2b 	bl	8000150 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f107 011c 	add.w	r1, r7, #28
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <Task3_SendTempHumidity+0xc4>)
 8001708:	f002 f9e4 	bl	8003ad4 <HAL_UART_Transmit>
	  }
	    osDelay(2000);
 800170c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001710:	f003 f864 	bl	80047dc <osDelay>
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001714:	e7a6      	b.n	8001664 <Task3_SendTempHumidity+0x8>
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000
 800171c:	08009380 	.word	0x08009380
 8001720:	20000550 	.word	0x20000550
 8001724:	200005b8 	.word	0x200005b8
 8001728:	08009364 	.word	0x08009364
 800172c:	200005bc 	.word	0x200005bc
 8001730:	08009374 	.word	0x08009374

08001734 <Task4_DisplayTempHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task4_DisplayTempHumidity */
void Task4_DisplayTempHumidity(void const * argument)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task4_DisplayTempHumidity */
  /* Infinite loop */
  osDelay(5);
 800173c:	2005      	movs	r0, #5
 800173e:	f003 f84d 	bl	80047dc <osDelay>
  for(;;)
  {
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <Task4_DisplayTempHumidity+0x98>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d13a      	bne.n	80017c0 <Task4_DisplayTempHumidity+0x8c>
	    char msg[] = "Task 3 is running\r\n";
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <Task4_DisplayTempHumidity+0x9c>)
 800174c:	f107 040c 	add.w	r4, r7, #12
 8001750:	461d      	mov	r5, r3
 8001752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fcf6 	bl	8000150 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <Task4_DisplayTempHumidity+0xa0>)
 8001772:	f002 f9af 	bl	8003ad4 <HAL_UART_Transmit>
	    temp_humi_display = (uint8_t)Temperature * 100 + (uint8_t)Humidity;
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <Task4_DisplayTempHumidity+0xa4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fae2 	bl	8000d44 <__aeabi_f2uiz>
 8001780:	4603      	mov	r3, r0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4413      	add	r3, r2
 800178a:	461a      	mov	r2, r3
 800178c:	0091      	lsls	r1, r2, #2
 800178e:	461a      	mov	r2, r3
 8001790:	460b      	mov	r3, r1
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	b29c      	uxth	r4, r3
 8001798:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <Task4_DisplayTempHumidity+0xa8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fad1 	bl	8000d44 <__aeabi_f2uiz>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4423      	add	r3, r4
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <Task4_DisplayTempHumidity+0xac>)
 80017ac:	801a      	strh	r2, [r3, #0]
	    ConvertNumberToDigits(temp_humi_display, digits);
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <Task4_DisplayTempHumidity+0xac>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <Task4_DisplayTempHumidity+0xb0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fb39 	bl	8000e2c <ConvertNumberToDigits>
	    SendToLED_SPI(digits);
 80017ba:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <Task4_DisplayTempHumidity+0xb0>)
 80017bc:	f7ff fb9e 	bl	8000efc <SendToLED_SPI>
	    //HAL_Delay(500);
	  }
	    osDelay(2000);
 80017c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017c4:	f003 f80a 	bl	80047dc <osDelay>
	  if (system_state == 1) { // Chỉ thực thi nếu đang ở trạng thái chạy
 80017c8:	e7bb      	b.n	8001742 <Task4_DisplayTempHumidity+0xe>
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	08009394 	.word	0x08009394
 80017d4:	20000550 	.word	0x20000550
 80017d8:	200005b8 	.word	0x200005b8
 80017dc:	200005bc 	.word	0x200005bc
 80017e0:	200005c2 	.word	0x200005c2
 80017e4:	200005c4 	.word	0x200005c4

080017e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017fa:	f000 faa5 	bl	8001d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40000800 	.word	0x40000800

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_MspInit+0x68>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <HAL_MspInit+0x68>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_MspInit+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_MspInit+0x68>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a11      	ldr	r2, [pc, #68]	@ (8001880 <HAL_MspInit+0x68>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_MspInit+0x68>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	210f      	movs	r1, #15
 8001852:	f06f 0001 	mvn.w	r0, #1
 8001856:	f000 fb48 	bl	8001eea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_MspInit+0x6c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <HAL_MspInit+0x6c>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000

08001888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <HAL_SPI_MspInit+0x70>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d123      	bne.n	80018f0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a13      	ldr	r2, [pc, #76]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_SPI_MspInit+0x74>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018d8:	23a0      	movs	r3, #160	@ 0xa0
 80018da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <HAL_SPI_MspInit+0x78>)
 80018ec:	f000 fbda 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010800 	.word	0x40010800

08001904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_TIM_Base_MspInit+0x34>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_TIM_Base_MspInit+0x38>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_TIM_Base_MspInit+0x38>)
 800191c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_TIM_Base_MspInit+0x38>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_UART_MspInit+0x9c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d139      	bne.n	80019d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <HAL_UART_MspInit+0xa0>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	480f      	ldr	r0, [pc, #60]	@ (80019e4 <HAL_UART_MspInit+0xa4>)
 80019a6:	f000 fb7d 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4809      	ldr	r0, [pc, #36]	@ (80019e4 <HAL_UART_MspInit+0xa4>)
 80019c0:	f000 fb70 	bl	80020a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	2025      	movs	r0, #37	@ 0x25
 80019ca:	f000 fa8e 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ce:	2025      	movs	r0, #37	@ 0x25
 80019d0:	f000 faa7 	bl	8001f22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010800 	.word	0x40010800

080019e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	@ 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <HAL_InitTick+0xe8>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a33      	ldr	r2, [pc, #204]	@ (8001ad0 <HAL_InitTick+0xe8>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <HAL_InitTick+0xe8>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a16:	f107 0210 	add.w	r2, r7, #16
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 f8fd 	bl	8002c20 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a30:	f001 f8ce 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8001a34:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a36:	e004      	b.n	8001a42 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a38:	f001 f8ca 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a44:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <HAL_InitTick+0xec>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a52:	4a22      	ldr	r2, [pc, #136]	@ (8001adc <HAL_InitTick+0xf4>)
 8001a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a5c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a62:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001a76:	4818      	ldr	r0, [pc, #96]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a78:	f001 fba1 	bl	80031be <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11b      	bne.n	8001ac2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a8a:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <HAL_InitTick+0xf0>)
 8001a8c:	f001 fc30 	bl	80032f0 <HAL_TIM_Base_Start_IT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d111      	bne.n	8001ac2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a9e:	201e      	movs	r0, #30
 8001aa0:	f000 fa3f 	bl	8001f22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d808      	bhi.n	8001abc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	201e      	movs	r0, #30
 8001ab0:	f000 fa1b 	bl	8001eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <HAL_InitTick+0xf8>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e002      	b.n	8001ac2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ac2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3738      	adds	r7, #56	@ 0x38
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	200005c8 	.word	0x200005c8
 8001adc:	40000800 	.word	0x40000800
 8001ae0:	20000020 	.word	0x20000020

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM4_IRQHandler+0x10>)
 8001b1e:	f001 fc39 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200005c8 	.word	0x200005c8

08001b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART1_IRQHandler+0x10>)
 8001b32:	f002 f87f 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000550 	.word	0x20000550

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <_kill>:

int _kill(int pid, int sig)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b58:	f005 fb04 	bl	8007164 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2216      	movs	r2, #22
 8001b60:	601a      	str	r2, [r3, #0]
  return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_exit>:

void _exit (int status)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b76:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffe7 	bl	8001b4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <_exit+0x12>

08001b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b96:	f3af 8000 	nop.w
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
  }

  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf1      	blt.n	8001bd0 <_write+0x12>
  }
  return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	@ (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f005 fa6c 	bl	8007164 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20005000 	.word	0x20005000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000610 	.word	0x20000610
 8001cc0:	200014b8 	.word	0x200014b8

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fff8 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	@ (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f005 fa39 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff fa19 	bl	8001134 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001d0c:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 8001d10:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001d14:	200014b8 	.word	0x200014b8

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f8d1 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f7ff fe58 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fd6e 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000024 	.word	0x20000024
 8001d68:	20000614 	.word	0x20000614

08001d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000614 	.word	0x20000614

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4906      	ldr	r1, [pc, #24]	@ (8001e18 <__NVIC_EnableIRQ+0x34>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff4f 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff64 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ffb2 	bl	8001e70 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff81 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff57 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d008      	beq.n	8001f68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e020      	b.n	8001faa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 020e 	bic.w	r2, r2, #14
 8001f76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d005      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e051      	b.n	800207c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020e 	bic.w	r2, r2, #14
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_DMA_Abort_IT+0xd4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d029      	beq.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a21      	ldr	r2, [pc, #132]	@ (800208c <HAL_DMA_Abort_IT+0xd8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_Abort_IT+0x9e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <HAL_DMA_Abort_IT+0xdc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01a      	beq.n	800204c <HAL_DMA_Abort_IT+0x98>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_DMA_Abort_IT+0xe0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d012      	beq.n	8002046 <HAL_DMA_Abort_IT+0x92>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_DMA_Abort_IT+0xe4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00a      	beq.n	8002040 <HAL_DMA_Abort_IT+0x8c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_DMA_Abort_IT+0xe8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <HAL_DMA_Abort_IT+0x86>
 8002034:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002038:	e00e      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 800203a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800203e:	e00b      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 8002040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002044:	e008      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 8002046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204a:	e005      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 800204c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002050:	e002      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 8002052:	2310      	movs	r3, #16
 8002054:	e000      	b.n	8002058 <HAL_DMA_Abort_IT+0xa4>
 8002056:	2301      	movs	r3, #1
 8002058:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <HAL_DMA_Abort_IT+0xec>)
 800205a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
    } 
  }
  return status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020008 	.word	0x40020008
 800208c:	4002001c 	.word	0x4002001c
 8002090:	40020030 	.word	0x40020030
 8002094:	40020044 	.word	0x40020044
 8002098:	40020058 	.word	0x40020058
 800209c:	4002006c 	.word	0x4002006c
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e169      	b.n	800238c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b8:	2201      	movs	r2, #1
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8158 	bne.w	8002386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a9a      	ldr	r2, [pc, #616]	@ (8002344 <HAL_GPIO_Init+0x2a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020e0:	4a98      	ldr	r2, [pc, #608]	@ (8002344 <HAL_GPIO_Init+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d875      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020e6:	4a98      	ldr	r2, [pc, #608]	@ (8002348 <HAL_GPIO_Init+0x2a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d058      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020ec:	4a96      	ldr	r2, [pc, #600]	@ (8002348 <HAL_GPIO_Init+0x2a4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d86f      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020f2:	4a96      	ldr	r2, [pc, #600]	@ (800234c <HAL_GPIO_Init+0x2a8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d052      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020f8:	4a94      	ldr	r2, [pc, #592]	@ (800234c <HAL_GPIO_Init+0x2a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d869      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020fe:	4a94      	ldr	r2, [pc, #592]	@ (8002350 <HAL_GPIO_Init+0x2ac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04c      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002104:	4a92      	ldr	r2, [pc, #584]	@ (8002350 <HAL_GPIO_Init+0x2ac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d863      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800210a:	4a92      	ldr	r2, [pc, #584]	@ (8002354 <HAL_GPIO_Init+0x2b0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d046      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002110:	4a90      	ldr	r2, [pc, #576]	@ (8002354 <HAL_GPIO_Init+0x2b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d85d      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 8002116:	2b12      	cmp	r3, #18
 8002118:	d82a      	bhi.n	8002170 <HAL_GPIO_Init+0xcc>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d859      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800211e:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <HAL_GPIO_Init+0x80>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	0800219f 	.word	0x0800219f
 8002128:	08002179 	.word	0x08002179
 800212c:	0800218b 	.word	0x0800218b
 8002130:	080021cd 	.word	0x080021cd
 8002134:	080021d3 	.word	0x080021d3
 8002138:	080021d3 	.word	0x080021d3
 800213c:	080021d3 	.word	0x080021d3
 8002140:	080021d3 	.word	0x080021d3
 8002144:	080021d3 	.word	0x080021d3
 8002148:	080021d3 	.word	0x080021d3
 800214c:	080021d3 	.word	0x080021d3
 8002150:	080021d3 	.word	0x080021d3
 8002154:	080021d3 	.word	0x080021d3
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021d3 	.word	0x080021d3
 8002160:	080021d3 	.word	0x080021d3
 8002164:	080021d3 	.word	0x080021d3
 8002168:	08002181 	.word	0x08002181
 800216c:	08002195 	.word	0x08002195
 8002170:	4a79      	ldr	r2, [pc, #484]	@ (8002358 <HAL_GPIO_Init+0x2b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002176:	e02c      	b.n	80021d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e029      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e024      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	3308      	adds	r3, #8
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e01f      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	330c      	adds	r3, #12
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e01a      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021a6:	2304      	movs	r3, #4
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e013      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	611a      	str	r2, [r3, #16]
          break;
 80021be:	e009      	b.n	80021d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	615a      	str	r2, [r3, #20]
          break;
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          break;
 80021d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d801      	bhi.n	80021de <HAL_GPIO_Init+0x13a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_Init+0x13e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	@ 0xff
 80021e8:	d802      	bhi.n	80021f0 <HAL_GPIO_Init+0x14c>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x152>
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	3b08      	subs	r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	210f      	movs	r1, #15
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80b1 	beq.w	8002386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002224:	4b4d      	ldr	r3, [pc, #308]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800223c:	4a48      	ldr	r2, [pc, #288]	@ (8002360 <HAL_GPIO_Init+0x2bc>)
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a40      	ldr	r2, [pc, #256]	@ (8002364 <HAL_GPIO_Init+0x2c0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x1ec>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3f      	ldr	r2, [pc, #252]	@ (8002368 <HAL_GPIO_Init+0x2c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1e8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3e      	ldr	r2, [pc, #248]	@ (800236c <HAL_GPIO_Init+0x2c8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	@ (8002370 <HAL_GPIO_Init+0x2cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1e0>
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002284:	2304      	movs	r3, #4
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002290:	2300      	movs	r3, #0
 8002292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a2:	492f      	ldr	r1, [pc, #188]	@ (8002360 <HAL_GPIO_Init+0x2bc>)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	492c      	ldr	r1, [pc, #176]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4928      	ldr	r1, [pc, #160]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4922      	ldr	r1, [pc, #136]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	491e      	ldr	r1, [pc, #120]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4918      	ldr	r1, [pc, #96]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d021      	beq.n	8002378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e021      	b.n	8002386 <HAL_GPIO_Init+0x2e2>
 8002342:	bf00      	nop
 8002344:	10320000 	.word	0x10320000
 8002348:	10310000 	.word	0x10310000
 800234c:	10220000 	.word	0x10220000
 8002350:	10210000 	.word	0x10210000
 8002354:	10120000 	.word	0x10120000
 8002358:	10110000 	.word	0x10110000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40011400 	.word	0x40011400
 8002374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_GPIO_Init+0x304>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	43db      	mvns	r3, r3
 8002380:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <HAL_GPIO_Init+0x304>)
 8002382:	4013      	ands	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f ae8e 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	372c      	adds	r7, #44	@ 0x2c
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	807b      	strh	r3, [r7, #2]
 80023e6:	4613      	mov	r3, r2
 80023e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ea:	787b      	ldrb	r3, [r7, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023f6:	e003      	b.n	8002400 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	041a      	lsls	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	611a      	str	r2, [r3, #16]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	041a      	lsls	r2, r3, #16
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43d9      	mvns	r1, r3
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	400b      	ands	r3, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e272      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8087 	beq.w	800256a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b92      	ldr	r3, [pc, #584]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00c      	beq.n	8002482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002468:	4b8f      	ldr	r3, [pc, #572]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d112      	bne.n	800249a <HAL_RCC_OscConfig+0x5e>
 8002474:	4b8c      	ldr	r3, [pc, #560]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b89      	ldr	r3, [pc, #548]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d06c      	beq.n	8002568 <HAL_RCC_OscConfig+0x12c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d168      	bne.n	8002568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e24c      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x76>
 80024a4:	4b80      	ldr	r3, [pc, #512]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7f      	ldr	r2, [pc, #508]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e02e      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b7b      	ldr	r3, [pc, #492]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7a      	ldr	r2, [pc, #488]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b78      	ldr	r3, [pc, #480]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a77      	ldr	r2, [pc, #476]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0xbc>
 80024de:	4b72      	ldr	r3, [pc, #456]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a71      	ldr	r2, [pc, #452]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b6f      	ldr	r3, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024f8:	4b6b      	ldr	r3, [pc, #428]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6a      	ldr	r2, [pc, #424]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a67      	ldr	r2, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fc28 	bl	8001d6c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fc24 	bl	8001d6c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	@ 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e200      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b5d      	ldr	r3, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xe4>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fc14 	bl	8001d6c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff fc10 	bl	8001d6c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	@ 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1ec      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x10c>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002576:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002582:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x18c>
 800258e:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1c0      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4939      	ldr	r1, [pc, #228]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fbc9 	bl	8001d6c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff fbc5 	bl	8001d6c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1a1      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4927      	ldr	r1, [pc, #156]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <HAL_RCC_OscConfig+0x270>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fba8 	bl	8001d6c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff fba4 	bl	8001d6c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e180      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d03a      	beq.n	80026c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002658:	f7ff fb88 	bl	8001d6c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff fb84 	bl	8001d6c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e160      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800267e:	2001      	movs	r0, #1
 8002680:	f000 fafe 	bl	8002c80 <RCC_Delay>
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7ff fb6e 	bl	8001d6c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002692:	e00f      	b.n	80026b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fb6a 	bl	8001d6c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d908      	bls.n	80026b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e146      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	42420000 	.word	0x42420000
 80026b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b92      	ldr	r3, [pc, #584]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e9      	bne.n	8002694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a6 	beq.w	800281a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a87      	ldr	r2, [pc, #540]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b85      	ldr	r3, [pc, #532]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b82      	ldr	r3, [pc, #520]	@ (8002904 <HAL_RCC_OscConfig+0x4c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b7f      	ldr	r3, [pc, #508]	@ (8002904 <HAL_RCC_OscConfig+0x4c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7e      	ldr	r2, [pc, #504]	@ (8002904 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff fb2b 	bl	8001d6c <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7ff fb27 	bl	8001d6c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	@ 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e103      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <HAL_RCC_OscConfig+0x4c8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x312>
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e02d      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x334>
 8002756:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a69      	ldr	r2, [pc, #420]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b67      	ldr	r3, [pc, #412]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a66      	ldr	r2, [pc, #408]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	e01c      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x356>
 8002778:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a60      	ldr	r2, [pc, #384]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	4b5e      	ldr	r3, [pc, #376]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a5d      	ldr	r2, [pc, #372]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 8002792:	4b5b      	ldr	r3, [pc, #364]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b58      	ldr	r3, [pc, #352]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a57      	ldr	r2, [pc, #348]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fadb 	bl	8001d6c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fad7 	bl	8001d6c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0b1      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RCC_OscConfig+0x37e>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7ff fac5 	bl	8001d6c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7ff fac1 	bl	8001d6c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e09b      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a3b      	ldr	r2, [pc, #236]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8087 	beq.w	8002932 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002824:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d061      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d146      	bne.n	80028c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b33      	ldr	r3, [pc, #204]	@ (8002908 <HAL_RCC_OscConfig+0x4cc>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7ff fa95 	bl	8001d6c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff fa91 	bl	8001d6c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e06d      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4921      	ldr	r1, [pc, #132]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a19      	ldr	r1, [r3, #32]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	430b      	orrs	r3, r1
 8002892:	491b      	ldr	r1, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fa65 	bl	8001d6c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fa61 	bl	8001d6c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e03d      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x46a>
 80028c4:	e035      	b.n	8002932 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCC_OscConfig+0x4cc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa4e 	bl	8001d6c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff fa4a 	bl	8001d6c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e026      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x498>
 80028f2:	e01e      	b.n	8002932 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e019      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_OscConfig+0x500>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0d0      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b67      	ldr	r3, [pc, #412]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4965      	ldr	r1, [pc, #404]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d040      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d115      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e073      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06b      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4936      	ldr	r1, [pc, #216]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7ff f99c 	bl	8001d6c <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7ff f998 	bl	8001d6c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e053      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d210      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4922      	ldr	r1, [pc, #136]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490a      	ldr	r1, [pc, #40]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1d0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ff7a 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	080093b0 	.word	0x080093b0
 8002b0c:	2000001c 	.word	0x2000001c
 8002b10:	20000020 	.word	0x20000020

08002b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x30>
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x36>
 8002b42:	e027      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x98>)
 8002b46:	613b      	str	r3, [r7, #16]
      break;
 8002b48:	e027      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	0c9b      	lsrs	r3, r3, #18
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b54:	5cd3      	ldrb	r3, [r2, r3]
 8002b56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0c5b      	lsrs	r3, r3, #17
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	4a11      	ldr	r2, [pc, #68]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x98>)
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e004      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	613b      	str	r3, [r7, #16]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x98>)
 8002b96:	613b      	str	r3, [r7, #16]
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	693b      	ldr	r3, [r7, #16]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	007a1200 	.word	0x007a1200
 8002bb0:	080093c8 	.word	0x080093c8
 8002bb4:	080093d8 	.word	0x080093d8
 8002bb8:	003d0900 	.word	0x003d0900

08002bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b02      	ldr	r3, [pc, #8]	@ (8002bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	2000001c 	.word	0x2000001c

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff2 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	080093c0 	.word	0x080093c0

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0adb      	lsrs	r3, r3, #11
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080093c0 	.word	0x080093c0

08002c20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_RCC_GetClockConfig+0x58>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_RCC_GetClockConfig+0x58>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_GetClockConfig+0x58>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_RCC_GetClockConfig+0x58>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCC_GetClockConfig+0x5c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0207 	and.w	r2, r3, #7
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40022000 	.word	0x40022000

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	2000001c 	.word	0x2000001c
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e076      	b.n	8002dbc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cde:	d009      	beq.n	8002cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
 8002ce6:	e005      	b.n	8002cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fdba 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0c1a      	lsrs	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f002 0204 	and.w	r2, r2, #4
 8002d9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002daa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd4:	f7fe ffca 	bl	8001d6c <HAL_GetTick>
 8002dd8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e12a      	b.n	8003044 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_Transmit+0x36>
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e122      	b.n	8003044 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_SPI_Transmit+0x48>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e11b      	b.n	8003044 <HAL_SPI_Transmit+0x280>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2203      	movs	r2, #3
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e5a:	d10f      	bne.n	8002e7c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d007      	beq.n	8002e9a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea2:	d152      	bne.n	8002f4a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SPI_Transmit+0xee>
 8002eac:	8b7b      	ldrh	r3, [r7, #26]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d145      	bne.n	8002f3e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ed6:	e032      	b.n	8002f3e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d112      	bne.n	8002f0c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f0a:	e018      	b.n	8002f3e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f0c:	f7fe ff2e 	bl	8001d6c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d803      	bhi.n	8002f24 <HAL_SPI_Transmit+0x160>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d102      	bne.n	8002f2a <HAL_SPI_Transmit+0x166>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e082      	b.n	8003044 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1c7      	bne.n	8002ed8 <HAL_SPI_Transmit+0x114>
 8002f48:	e053      	b.n	8002ff2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Transmit+0x194>
 8002f52:	8b7b      	ldrh	r3, [r7, #26]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d147      	bne.n	8002fe8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f7e:	e033      	b.n	8002fe8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fb4:	e018      	b.n	8002fe8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb6:	f7fe fed9 	bl	8001d6c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d803      	bhi.n	8002fce <HAL_SPI_Transmit+0x20a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x210>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e02d      	b.n	8003044 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c6      	bne.n	8002f80 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8b0 	bl	800315c <SPI_EndRxTxTransaction>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003042:	2300      	movs	r3, #0
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800305c:	f7fe fe86 	bl	8001d6c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4413      	add	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800306c:	f7fe fe7e 	bl	8001d6c <HAL_GetTick>
 8003070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003072:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	0d1b      	lsrs	r3, r3, #20
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003082:	e054      	b.n	800312e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d050      	beq.n	800312e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800308c:	f7fe fe6e 	bl	8001d6c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	d902      	bls.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d13d      	bne.n	800311e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ba:	d111      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	d004      	beq.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d107      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e8:	d10f      	bne.n	800310a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e017      	b.n	800314e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3b01      	subs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d19b      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000001c 	.word	0x2000001c

0800315c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2201      	movs	r2, #1
 8003170:	2102      	movs	r1, #2
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff6a 	bl	800304c <SPI_WaitFlagStateUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e013      	b.n	80031b6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff57 	bl	800304c <SPI_WaitFlagStateUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e000      	b.n	80031b6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e041      	b.n	8003254 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fb8d 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f000 faa5 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <HAL_TIM_Base_Start+0x88>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIM_Base_Start+0x48>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328e:	d009      	beq.n	80032a4 <HAL_TIM_Base_Start+0x48>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a14      	ldr	r2, [pc, #80]	@ (80032e8 <HAL_TIM_Base_Start+0x8c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIM_Base_Start+0x48>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a13      	ldr	r2, [pc, #76]	@ (80032ec <HAL_TIM_Base_Start+0x90>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d010      	beq.n	80032d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e007      	b.n	80032d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e03a      	b.n	800337e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <HAL_TIM_Base_Start_IT+0x98>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d009      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a14      	ldr	r2, [pc, #80]	@ (800338c <HAL_TIM_Base_Start_IT+0x9c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a13      	ldr	r2, [pc, #76]	@ (8003390 <HAL_TIM_Base_Start_IT+0xa0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d111      	bne.n	800336c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d010      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e007      	b.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800

08003394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0202 	mvn.w	r2, #2
 80033c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f998 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f98b 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f99a 	bl	8003726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0204 	mvn.w	r2, #4
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f972 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f965 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f974 	bl	8003726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d020      	beq.n	8003490 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0208 	mvn.w	r2, #8
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f94c 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f93f 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f94e 	bl	8003726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d020      	beq.n	80034dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0210 	mvn.w	r2, #16
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2208      	movs	r2, #8
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f926 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f919 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f928 	bl	8003726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0201 	mvn.w	r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe f974 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa7f 	bl	8003a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8f8 	bl	8003738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0220 	mvn.w	r2, #32
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa52 	bl	8003a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIM_ConfigClockSource+0x1c>
 800358c:	2302      	movs	r3, #2
 800358e:	e0b4      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x186>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c8:	d03e      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xd4>
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ce:	f200 8087 	bhi.w	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d6:	f000 8086 	beq.w	80036e6 <HAL_TIM_ConfigClockSource+0x172>
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035de:	d87f      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b70      	cmp	r3, #112	@ 0x70
 80035e2:	d01a      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xa6>
 80035e4:	2b70      	cmp	r3, #112	@ 0x70
 80035e6:	d87b      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b60      	cmp	r3, #96	@ 0x60
 80035ea:	d050      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x11a>
 80035ec:	2b60      	cmp	r3, #96	@ 0x60
 80035ee:	d877      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b50      	cmp	r3, #80	@ 0x50
 80035f2:	d03c      	beq.n	800366e <HAL_TIM_ConfigClockSource+0xfa>
 80035f4:	2b50      	cmp	r3, #80	@ 0x50
 80035f6:	d873      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b40      	cmp	r3, #64	@ 0x40
 80035fa:	d058      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x13a>
 80035fc:	2b40      	cmp	r3, #64	@ 0x40
 80035fe:	d86f      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b30      	cmp	r3, #48	@ 0x30
 8003602:	d064      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x15a>
 8003604:	2b30      	cmp	r3, #48	@ 0x30
 8003606:	d86b      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b20      	cmp	r3, #32
 800360a:	d060      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x15a>
 800360c:	2b20      	cmp	r3, #32
 800360e:	d867      	bhi.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d05c      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	2b10      	cmp	r3, #16
 8003616:	d05a      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	e062      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800362a:	f000 f974 	bl	8003916 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800363c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
      break;
 8003646:	e04f      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003658:	f000 f95d 	bl	8003916 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800366a:	609a      	str	r2, [r3, #8]
      break;
 800366c:	e03c      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	461a      	mov	r2, r3
 800367c:	f000 f8d4 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2150      	movs	r1, #80	@ 0x50
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f92b 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 800368c:	e02c      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800369a:	461a      	mov	r2, r3
 800369c:	f000 f8f2 	bl	8003884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2160      	movs	r1, #96	@ 0x60
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f91b 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e01c      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	461a      	mov	r2, r3
 80036bc:	f000 f8b4 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2140      	movs	r1, #64	@ 0x40
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f90b 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 80036cc:	e00c      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f000 f902 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 80036de:	e003      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e000      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
	...

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a2f      	ldr	r2, [pc, #188]	@ (800381c <TIM_Base_SetConfig+0xd0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2c      	ldr	r2, [pc, #176]	@ (8003820 <TIM_Base_SetConfig+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x30>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2b      	ldr	r2, [pc, #172]	@ (8003824 <TIM_Base_SetConfig+0xd8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a22      	ldr	r2, [pc, #136]	@ (800381c <TIM_Base_SetConfig+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <TIM_Base_SetConfig+0xd4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <TIM_Base_SetConfig+0xd8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <TIM_Base_SetConfig+0xd0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]
  }
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0210 	bic.w	r2, r3, #16
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	031b      	lsls	r3, r3, #12
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f043 0307 	orr.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	609a      	str	r2, [r3, #8]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003968:	2302      	movs	r3, #2
 800396a:	e046      	b.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b8:	d009      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a12      	ldr	r2, [pc, #72]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a10      	ldr	r2, [pc, #64]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10c      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800

08003a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e042      	b.n	8003acc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd ff70 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	@ 0x24
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fdb7 	bl	80045ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d175      	bne.n	8003be0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Transmit+0x2c>
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e06e      	b.n	8003be2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	@ 0x21
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b12:	f7fe f92b 	bl	8001d6c <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x6c>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b48:	e02e      	b.n	8003ba8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	@ 0x80
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fb1c 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e03a      	b.n	8003be2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cb      	bne.n	8003b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fae8 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d112      	bne.n	8003c2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Receive_IT+0x26>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e00b      	b.n	8003c2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fb0f 	bl	8004244 <UART_Start_Receive_IT>
 8003c26:	4603      	mov	r3, r0
 8003c28:	e000      	b.n	8003c2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0ba      	sub	sp, #232	@ 0xe8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fbec 	bl	8004470 <UART_Receive_IT>
      return;
 8003c98:	e25b      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80de 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
 8003ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80d1 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 81f2 	beq.w	8004148 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb77 	bl	8004470 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_UART_IRQHandler+0x17a>
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04f      	beq.n	8003e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa81 	bl	80042b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d041      	beq.n	8003e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1d9      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004014 <HAL_UART_IRQHandler+0x3e0>)
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f8c6 	bl	8001fb4 <HAL_DMA_Abort_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e00e      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f993 	bl	800416a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e00a      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f98f 	bl	800416a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e006      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f98b 	bl	800416a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e5a:	e175      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	bf00      	nop
    return;
 8003e5e:	e173      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 814f 	bne.w	8004108 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8148 	beq.w	8004108 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8141 	beq.w	8004108 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80b6 	beq.w	8004018 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8145 	beq.w	800414c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f080 813e 	bcs.w	800414c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f000 8088 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1d9      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e1      	bne.n	8003f30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e3      	bne.n	8003f6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc4:	f023 0310 	bic.w	r3, r3, #16
 8003fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e3      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd ffa5 	bl	8001f3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004002:	b29b      	uxth	r3, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	b29b      	uxth	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8b6 	bl	800417c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004010:	e09c      	b.n	800414c <HAL_UART_IRQHandler+0x518>
 8004012:	bf00      	nop
 8004014:	0800437b 	.word	0x0800437b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004020:	b29b      	uxth	r3, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 808e 	beq.w	8004150 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8089 	beq.w	8004150 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004062:	647a      	str	r2, [r7, #68]	@ 0x44
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	623b      	str	r3, [r7, #32]
   return(result);
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800409a:	633a      	str	r2, [r7, #48]	@ 0x30
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e3      	bne.n	8004076 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040e0:	61fa      	str	r2, [r7, #28]
 80040e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	617b      	str	r3, [r7, #20]
   return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f83b 	bl	800417c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004106:	e023      	b.n	8004150 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_UART_IRQHandler+0x4f4>
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f93e 	bl	80043a2 <UART_Transmit_IT>
    return;
 8004126:	e014      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_UART_IRQHandler+0x51e>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f97d 	bl	8004440 <UART_EndTransmit_IT>
    return;
 8004146:	e004      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
    return;
 8004148:	bf00      	nop
 800414a:	e002      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
      return;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_UART_IRQHandler+0x51e>
      return;
 8004150:	bf00      	nop
  }
}
 8004152:	37e8      	adds	r7, #232	@ 0xe8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	e03b      	b.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d037      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fd fdde 	bl	8001d6c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e03a      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d023      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b80      	cmp	r3, #128	@ 0x80
 80041d8:	d020      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d01d      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d116      	bne.n	800421c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f856 	bl	80042b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2208      	movs	r2, #8
 800420e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00f      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	429a      	cmp	r2, r3
 8004238:	d0b4      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2222      	movs	r2, #34	@ 0x22
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004288:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0220 	orr.w	r2, r2, #32
 80042a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b095      	sub	sp, #84	@ 0x54
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042de:	643a      	str	r2, [r7, #64]	@ 0x40
 80042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	61fb      	str	r3, [r7, #28]
   return(result);
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d119      	bne.n	8004362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60bb      	str	r3, [r7, #8]
   return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	647b      	str	r3, [r7, #68]	@ 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800434e:	61ba      	str	r2, [r7, #24]
 8004350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004370:	bf00      	nop
 8004372:	3754      	adds	r7, #84	@ 0x54
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fee8 	bl	800416a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b21      	cmp	r3, #33	@ 0x21
 80043b4:	d13e      	bne.n	8004434 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d114      	bne.n	80043ea <UART_Transmit_IT+0x48>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]
 80043e8:	e008      	b.n	80043fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6211      	str	r1, [r2, #32]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4619      	mov	r1, r3
 800440a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800441e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800442e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004456:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe79 	bl	8004158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08c      	sub	sp, #48	@ 0x30
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b22      	cmp	r3, #34	@ 0x22
 8004482:	f040 80ae 	bne.w	80045e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	d117      	bne.n	80044c0 <UART_Receive_IT+0x50>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d113      	bne.n	80044c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044be:	e026      	b.n	800450e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	d007      	beq.n	80044e4 <UART_Receive_IT+0x74>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <UART_Receive_IT+0x82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e008      	b.n	8004504 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4619      	mov	r1, r3
 800451c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800451e:	2b00      	cmp	r3, #0
 8004520:	d15d      	bne.n	80045de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0220 	bic.w	r2, r2, #32
 8004530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	2b01      	cmp	r3, #1
 8004566:	d135      	bne.n	80045d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f023 0310 	bic.w	r3, r3, #16
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458e:	623a      	str	r2, [r7, #32]
 8004590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	69f9      	ldr	r1, [r7, #28]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	61bb      	str	r3, [r7, #24]
   return(result);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d10a      	bne.n	80045c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fdd5 	bl	800417c <HAL_UARTEx_RxEventCallback>
 80045d2:	e002      	b.n	80045da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fc fbed 	bl	8000db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e002      	b.n	80045e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3730      	adds	r7, #48	@ 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004626:	f023 030c 	bic.w	r3, r3, #12
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	430b      	orrs	r3, r1
 8004632:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <UART_SetConfig+0x114>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d103      	bne.n	800465c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004654:	f7fe fad0 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	e002      	b.n	8004662 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe fab8 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8004660:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009a      	lsls	r2, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	4a22      	ldr	r2, [pc, #136]	@ (8004704 <UART_SetConfig+0x118>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	0119      	lsls	r1, r3, #4
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009a      	lsls	r2, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fbb2 f2f3 	udiv	r2, r2, r3
 8004698:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <UART_SetConfig+0x118>)
 800469a:	fba3 0302 	umull	r0, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2064      	movs	r0, #100	@ 0x64
 80046a2:	fb00 f303 	mul.w	r3, r0, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	@ 0x32
 80046ac:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <UART_SetConfig+0x118>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b8:	4419      	add	r1, r3
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009a      	lsls	r2, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <UART_SetConfig+0x118>)
 80046d2:	fba3 0302 	umull	r0, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2064      	movs	r0, #100	@ 0x64
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	@ 0x32
 80046e4:	4a07      	ldr	r2, [pc, #28]	@ (8004704 <UART_SetConfig+0x118>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	440a      	add	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40013800 	.word	0x40013800
 8004704:	51eb851f 	.word	0x51eb851f

08004708 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471a:	2b84      	cmp	r3, #132	@ 0x84
 800471c:	d005      	beq.n	800472a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800471e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	3303      	adds	r3, #3
 8004728:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800473a:	f000 fe41 	bl	80053c0 <vTaskStartScheduler>
  
  return osOK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}

08004744 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af04      	add	r7, sp, #16
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d020      	beq.n	8004798 <osThreadCreate+0x54>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01c      	beq.n	8004798 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685c      	ldr	r4, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691e      	ldr	r6, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ffc9 	bl	8004708 <makeFreeRtosPriority>
 8004776:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004780:	9202      	str	r2, [sp, #8]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	9100      	str	r1, [sp, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	4632      	mov	r2, r6
 800478a:	4629      	mov	r1, r5
 800478c:	4620      	mov	r0, r4
 800478e:	f000 fc3f 	bl	8005010 <xTaskCreateStatic>
 8004792:	4603      	mov	r3, r0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e01c      	b.n	80047d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685c      	ldr	r4, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ffab 	bl	8004708 <makeFreeRtosPriority>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9200      	str	r2, [sp, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4632      	mov	r2, r6
 80047c0:	4629      	mov	r1, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fc84 	bl	80050d0 <xTaskCreate>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <osDelay+0x16>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	e000      	b.n	80047f4 <osDelay+0x18>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fdad 	bl	8005354 <vTaskDelay>
  
  return osOK;
 80047fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4619      	mov	r1, r3
 800481a:	2001      	movs	r0, #1
 800481c:	f000 fa1e 	bl	8004c5c <xQueueCreateMutexStatic>
 8004820:	4603      	mov	r3, r0
 8004822:	e003      	b.n	800482c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004824:	2001      	movs	r0, #1
 8004826:	f000 fa01 	bl	8004c2c <xQueueCreateMutex>
 800482a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f103 0208 	add.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 0208 	add.w	r2, r3, #8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f103 0208 	add.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d103      	bne.n	80048f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e00c      	b.n	800490a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3308      	adds	r3, #8
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e002      	b.n	80048fe <vListInsert+0x2e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	d2f6      	bcs.n	80048f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6892      	ldr	r2, [r2, #8]
 8004956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6852      	ldr	r2, [r2, #4]
 8004960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d103      	bne.n	8004974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1e5a      	subs	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049be:	f001 fae5 	bl	8005f8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	3b01      	subs	r3, #1
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	441a      	add	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22ff      	movs	r2, #255	@ 0xff
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	22ff      	movs	r2, #255	@ 0xff
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fef3 	bl	800580c <xTaskRemoveFromEventList>
 8004a26:	e009      	b.n	8004a3c <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff01 	bl	8004834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3324      	adds	r3, #36	@ 0x24
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fefc 	bl	8004834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a3c:	f001 fad6 	bl	8005fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a40:	2301      	movs	r3, #1
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b08e      	sub	sp, #56	@ 0x38
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <xQueueGenericCreateStatic+0x56>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <xQueueGenericCreateStatic+0x5a>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <xQueueGenericCreateStatic+0x5c>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	623b      	str	r3, [r7, #32]
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	e7fd      	b.n	8004abe <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xQueueGenericCreateStatic+0x84>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericCreateStatic+0x88>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericCreateStatic+0x8a>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61fb      	str	r3, [r7, #28]
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004af0:	2348      	movs	r3, #72	@ 0x48
 8004af2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b48      	cmp	r3, #72	@ 0x48
 8004af8:	d00b      	beq.n	8004b12 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61bb      	str	r3, [r7, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b26:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f840 	bl	8004bba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3730      	adds	r7, #48	@ 0x30
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	613b      	str	r3, [r7, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3348      	adds	r3, #72	@ 0x48
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fac6 	bl	8006110 <pvPortMalloc>
 8004b84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d011      	beq.n	8004bb0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3348      	adds	r3, #72	@ 0x48
 8004b94:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b9e:	79fa      	ldrb	r2, [r7, #7]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f805 	bl	8004bba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e002      	b.n	8004bdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004be8:	2101      	movs	r1, #1
 8004bea:	69b8      	ldr	r0, [r7, #24]
 8004bec:	f7ff fed1 	bl	8004992 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00e      	beq.n	8004c24 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f838 	bl	8004c94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c36:	2301      	movs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7ff ff7d 	bl	8004b44 <xQueueGenericCreate>
 8004c4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff ffd3 	bl	8004bf8 <prvInitialiseMutex>

		return xNewQueue;
 8004c52:	68fb      	ldr	r3, [r7, #12]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	4603      	mov	r3, r0
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	6939      	ldr	r1, [r7, #16]
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	f7ff fee5 	bl	8004a4a <xQueueGenericCreateStatic>
 8004c80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ffb8 	bl	8004bf8 <prvInitialiseMutex>

		return xNewQueue;
 8004c88:	68fb      	ldr	r3, [r7, #12]
	}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	@ 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <xQueueGenericSend+0x34>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d103      	bne.n	8004cd6 <xQueueGenericSend+0x42>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xQueueGenericSend+0x46>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueGenericSend+0x48>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xQueueGenericSend+0x64>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x72>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericSend+0x76>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericSend+0x78>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <xQueueGenericSend+0x94>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d28:	f000 ff30 	bl	8005b8c <xTaskGetSchedulerState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <xQueueGenericSend+0xa4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <xQueueGenericSend+0xa8>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <xQueueGenericSend+0xaa>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <xQueueGenericSend+0xc6>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	61fb      	str	r3, [r7, #28]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5a:	f001 f917 	bl	8005f8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <xQueueGenericSend+0xdc>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d112      	bne.n	8004d96 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d76:	f000 f877 	bl	8004e68 <prvCopyDataToQueue>
 8004d7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	3324      	adds	r3, #36	@ 0x24
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fd3f 	bl	800580c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d8e:	f001 f92d 	bl	8005fec <vPortExitCritical>
				return pdPASS;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e062      	b.n	8004e5c <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d9c:	f001 f926 	bl	8005fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e05b      	b.n	8004e5c <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd90 	bl	80058d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004db8:	f001 f918 	bl	8005fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dbc:	f000 fb6a 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc0:	f001 f8e4 	bl	8005f8c <vPortEnterCritical>
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSend+0x146>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de0:	b25b      	sxtb	r3, r3
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d103      	bne.n	8004df0 <xQueueGenericSend+0x15c>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df0:	f001 f8fc 	bl	8005fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df4:	1d3a      	adds	r2, r7, #4
 8004df6:	f107 0314 	add.w	r3, r7, #20
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd7f 	bl	8005900 <xTaskCheckForTimeOut>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d123      	bne.n	8004e50 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e0a:	f000 f8e9 	bl	8004fe0 <prvIsQueueFull>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	3310      	adds	r3, #16
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fccf 	bl	80057c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e24:	f000 f88a 	bl	8004f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e28:	f000 fb42 	bl	80054b0 <xTaskResumeAll>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d193      	bne.n	8004d5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <xQueueGenericSend+0x1d0>)
 8004e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	e78a      	b.n	8004d5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e46:	f000 f879 	bl	8004f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e4a:	f000 fb31 	bl	80054b0 <xTaskResumeAll>
 8004e4e:	e784      	b.n	8004d5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e52:	f000 f873 	bl	8004f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e56:	f000 fb2b 	bl	80054b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3738      	adds	r7, #56	@ 0x38
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	e000ed04 	.word	0xe000ed04

08004e68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d14d      	bne.n	8004f2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fe98 	bl	8005bc8 <xTaskPriorityDisinherit>
 8004e98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	e043      	b.n	8004f2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d119      	bne.n	8004edc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6858      	ldr	r0, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	f002 f991 	bl	80071da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d32b      	bcc.n	8004f2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
 8004eda:	e026      	b.n	8004f2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68d8      	ldr	r0, [r3, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	f002 f977 	bl	80071da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d207      	bcs.n	8004f18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	425b      	negs	r3, r3
 8004f12:	441a      	add	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d105      	bne.n	8004f2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f32:	697b      	ldr	r3, [r7, #20]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f44:	f001 f822 	bl	8005f8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f50:	e011      	b.n	8004f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	@ 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fc54 	bl	800580c <xTaskRemoveFromEventList>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f6a:	f000 fd2d 	bl	80059c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dce9      	bgt.n	8004f52 <prvUnlockQueue+0x16>
 8004f7e:	e000      	b.n	8004f82 <prvUnlockQueue+0x46>
					break;
 8004f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	22ff      	movs	r2, #255	@ 0xff
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 f82f 	bl	8005fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f8e:	f000 fffd 	bl	8005f8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f9a:	e011      	b.n	8004fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fc2f 	bl	800580c <xTaskRemoveFromEventList>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fb4:	f000 fd08 	bl	80059c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dce9      	bgt.n	8004f9c <prvUnlockQueue+0x60>
 8004fc8:	e000      	b.n	8004fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	22ff      	movs	r2, #255	@ 0xff
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fd4:	f001 f80a 	bl	8005fec <vPortExitCritical>
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fe8:	f000 ffd0 	bl	8005f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d102      	bne.n	8004ffe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e001      	b.n	8005002 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005002:	f000 fff3 	bl	8005fec <vPortExitCritical>

	return xReturn;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	@ 0x38
 8005014:	af04      	add	r7, sp, #16
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800501e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	623b      	str	r3, [r7, #32]
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800503c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	61fb      	str	r3, [r7, #28]
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	e7fd      	b.n	8005056 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505a:	23a0      	movs	r3, #160	@ 0xa0
 800505c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2ba0      	cmp	r3, #160	@ 0xa0
 8005062:	d00b      	beq.n	800507c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61bb      	str	r3, [r7, #24]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800507c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01e      	beq.n	80050c2 <xTaskCreateStatic+0xb2>
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	2202      	movs	r2, #2
 8005098:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f851 	bl	800515c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050bc:	f000 f8ee 	bl	800529c <prvAddNewTaskToReadyList>
 80050c0:	e001      	b.n	80050c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050c6:	697b      	ldr	r3, [r7, #20]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	@ 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	@ 0x30
 80050d4:	af04      	add	r7, sp, #16
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 f813 	bl	8006110 <pvPortMalloc>
 80050ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050f2:	20a0      	movs	r0, #160	@ 0xa0
 80050f4:	f001 f80c 	bl	8006110 <pvPortMalloc>
 80050f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
 8005106:	e005      	b.n	8005114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f001 f8cf 	bl	80062ac <vPortFree>
 800510e:	e001      	b.n	8005114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	2300      	movs	r3, #0
 8005126:	9303      	str	r3, [sp, #12]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f80f 	bl	800515c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800513e:	69f8      	ldr	r0, [r7, #28]
 8005140:	f000 f8ac 	bl	800529c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005144:	2301      	movs	r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e002      	b.n	8005150 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005150:	69bb      	ldr	r3, [r7, #24]
	}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005174:	3b01      	subs	r3, #1
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01f      	beq.n	80051ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ac:	2300      	movs	r3, #0
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e012      	b.n	80051d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	3334      	adds	r3, #52	@ 0x34
 80051c2:	460a      	mov	r2, r1
 80051c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d9e9      	bls.n	80051b2 <prvInitialiseNewTask+0x56>
 80051de:	e000      	b.n	80051e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80051e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051ea:	e003      	b.n	80051f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d901      	bls.n	80051fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fa:	2306      	movs	r3, #6
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	2200      	movs	r2, #0
 800520e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	3304      	adds	r3, #4
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fb2c 	bl	8004872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	3318      	adds	r3, #24
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fb27 	bl	8004872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	f1c3 0207 	rsb	r2, r3, #7
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2200      	movs	r2, #0
 800523e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	2200      	movs	r2, #0
 8005246:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	334c      	adds	r3, #76	@ 0x4c
 800524e:	224c      	movs	r2, #76	@ 0x4c
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fedd 	bl	8007012 <memset>
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <prvInitialiseNewTask+0x134>)
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <prvInitialiseNewTask+0x138>)
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	4a0c      	ldr	r2, [pc, #48]	@ (8005298 <prvInitialiseNewTask+0x13c>)
 8005268:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	69b8      	ldr	r0, [r7, #24]
 8005270:	f000 fd98 	bl	8005da4 <pxPortInitialiseStack>
 8005274:	4602      	mov	r2, r0
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005286:	bf00      	nop
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	2000136c 	.word	0x2000136c
 8005294:	200013d4 	.word	0x200013d4
 8005298:	2000143c 	.word	0x2000143c

0800529c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a4:	f000 fe72 	bl	8005f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052a8:	4b24      	ldr	r3, [pc, #144]	@ (800533c <prvAddNewTaskToReadyList+0xa0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	4a23      	ldr	r2, [pc, #140]	@ (800533c <prvAddNewTaskToReadyList+0xa0>)
 80052b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052b2:	4b23      	ldr	r3, [pc, #140]	@ (8005340 <prvAddNewTaskToReadyList+0xa4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ba:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <prvAddNewTaskToReadyList+0xa4>)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052c0:	4b1e      	ldr	r3, [pc, #120]	@ (800533c <prvAddNewTaskToReadyList+0xa0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d110      	bne.n	80052ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052c8:	f000 fb9c 	bl	8005a04 <prvInitialiseTaskLists>
 80052cc:	e00d      	b.n	80052ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <prvAddNewTaskToReadyList+0xa8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005340 <prvAddNewTaskToReadyList+0xa4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d802      	bhi.n	80052ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e4:	4a16      	ldr	r2, [pc, #88]	@ (8005340 <prvAddNewTaskToReadyList+0xa4>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ea:	4b17      	ldr	r3, [pc, #92]	@ (8005348 <prvAddNewTaskToReadyList+0xac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3301      	adds	r3, #1
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <prvAddNewTaskToReadyList+0xac>)
 80052f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	2201      	movs	r2, #1
 80052fa:	409a      	lsls	r2, r3
 80052fc:	4b13      	ldr	r3, [pc, #76]	@ (800534c <prvAddNewTaskToReadyList+0xb0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	4a12      	ldr	r2, [pc, #72]	@ (800534c <prvAddNewTaskToReadyList+0xb0>)
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4a0f      	ldr	r2, [pc, #60]	@ (8005350 <prvAddNewTaskToReadyList+0xb4>)
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7ff fab4 	bl	800488a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005322:	f000 fe63 	bl	8005fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005326:	4b07      	ldr	r3, [pc, #28]	@ (8005344 <prvAddNewTaskToReadyList+0xa8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800532e:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <prvAddNewTaskToReadyList+0xa4>)
 8005330:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000718 	.word	0x20000718
 8005340:	20000618 	.word	0x20000618
 8005344:	20000724 	.word	0x20000724
 8005348:	20000734 	.word	0x20000734
 800534c:	20000720 	.word	0x20000720
 8005350:	2000061c 	.word	0x2000061c

08005354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <vTaskDelay+0x64>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <vTaskDelay+0x32>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005386:	f000 f885 	bl	8005494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800538a:	2100      	movs	r1, #0
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fca3 	bl	8005cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005392:	f000 f88d 	bl	80054b0 <xTaskResumeAll>
 8005396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800539e:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <vTaskDelay+0x68>)
 80053a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000740 	.word	0x20000740
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	@ 0x28
 80053c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ce:	463a      	mov	r2, r7
 80053d0:	1d39      	adds	r1, r7, #4
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fb fcd4 	bl	8000d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	9202      	str	r2, [sp, #8]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	460a      	mov	r2, r1
 80053ee:	4921      	ldr	r1, [pc, #132]	@ (8005474 <vTaskStartScheduler+0xb4>)
 80053f0:	4821      	ldr	r0, [pc, #132]	@ (8005478 <vTaskStartScheduler+0xb8>)
 80053f2:	f7ff fe0d 	bl	8005010 <xTaskCreateStatic>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a20      	ldr	r2, [pc, #128]	@ (800547c <vTaskStartScheduler+0xbc>)
 80053fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053fc:	4b1f      	ldr	r3, [pc, #124]	@ (800547c <vTaskStartScheduler+0xbc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e001      	b.n	800540e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11b      	bne.n	800544c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	613b      	str	r3, [r7, #16]
}
 8005426:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005428:	4b15      	ldr	r3, [pc, #84]	@ (8005480 <vTaskStartScheduler+0xc0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	334c      	adds	r3, #76	@ 0x4c
 800542e:	4a15      	ldr	r2, [pc, #84]	@ (8005484 <vTaskStartScheduler+0xc4>)
 8005430:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <vTaskStartScheduler+0xc8>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800543a:	4b14      	ldr	r3, [pc, #80]	@ (800548c <vTaskStartScheduler+0xcc>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005440:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <vTaskStartScheduler+0xd0>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005446:	f000 fd2f 	bl	8005ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800544a:	e00f      	b.n	800546c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d10b      	bne.n	800546c <vTaskStartScheduler+0xac>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60fb      	str	r3, [r7, #12]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <vTaskStartScheduler+0xa8>
}
 800546c:	bf00      	nop
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	080093a8 	.word	0x080093a8
 8005478:	080059e1 	.word	0x080059e1
 800547c:	2000073c 	.word	0x2000073c
 8005480:	20000618 	.word	0x20000618
 8005484:	20000038 	.word	0x20000038
 8005488:	20000738 	.word	0x20000738
 800548c:	20000724 	.word	0x20000724
 8005490:	2000071c 	.word	0x2000071c

08005494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <vTaskSuspendAll+0x18>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a03      	ldr	r2, [pc, #12]	@ (80054ac <vTaskSuspendAll+0x18>)
 80054a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000740 	.word	0x20000740

080054b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054be:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <xTaskResumeAll+0x100>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <xTaskResumeAll+0x2e>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	603b      	str	r3, [r7, #0]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054de:	f000 fd55 	bl	8005f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054e2:	4b33      	ldr	r3, [pc, #204]	@ (80055b0 <xTaskResumeAll+0x100>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a31      	ldr	r2, [pc, #196]	@ (80055b0 <xTaskResumeAll+0x100>)
 80054ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ec:	4b30      	ldr	r3, [pc, #192]	@ (80055b0 <xTaskResumeAll+0x100>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d155      	bne.n	80055a0 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054f4:	4b2f      	ldr	r3, [pc, #188]	@ (80055b4 <xTaskResumeAll+0x104>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d051      	beq.n	80055a0 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054fc:	e02e      	b.n	800555c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054fe:	4b2e      	ldr	r3, [pc, #184]	@ (80055b8 <xTaskResumeAll+0x108>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3318      	adds	r3, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fa18 	bl	8004940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3304      	adds	r3, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fa13 	bl	8004940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	2201      	movs	r2, #1
 8005520:	409a      	lsls	r2, r3
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <xTaskResumeAll+0x10c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <xTaskResumeAll+0x10c>)
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <xTaskResumeAll+0x110>)
 800553a:	441a      	add	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7ff f9a1 	bl	800488a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <xTaskResumeAll+0x114>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005556:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <xTaskResumeAll+0x118>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555c:	4b16      	ldr	r3, [pc, #88]	@ (80055b8 <xTaskResumeAll+0x108>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1cc      	bne.n	80054fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800556a:	f000 faef 	bl	8005b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800556e:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <xTaskResumeAll+0x11c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d010      	beq.n	800559c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800557a:	f000 f829 	bl	80055d0 <xTaskIncrementTick>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005584:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <xTaskResumeAll+0x118>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3b01      	subs	r3, #1
 800558e:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f1      	bne.n	800557a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <xTaskResumeAll+0x11c>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <xTaskResumeAll+0x118>)
 800559e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a0:	f000 fd24 	bl	8005fec <vPortExitCritical>

	return xAlreadyYielded;
 80055a4:	687b      	ldr	r3, [r7, #4]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000740 	.word	0x20000740
 80055b4:	20000718 	.word	0x20000718
 80055b8:	200006d8 	.word	0x200006d8
 80055bc:	20000720 	.word	0x20000720
 80055c0:	2000061c 	.word	0x2000061c
 80055c4:	20000618 	.word	0x20000618
 80055c8:	2000072c 	.word	0x2000072c
 80055cc:	20000728 	.word	0x20000728

080055d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055da:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <xTaskIncrementTick+0x108>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d170      	bne.n	80056c4 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055e2:	4b3e      	ldr	r3, [pc, #248]	@ (80056dc <xTaskIncrementTick+0x10c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055ea:	4a3c      	ldr	r2, [pc, #240]	@ (80056dc <xTaskIncrementTick+0x10c>)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d121      	bne.n	800563a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055f6:	4b3a      	ldr	r3, [pc, #232]	@ (80056e0 <xTaskIncrementTick+0x110>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <xTaskIncrementTick+0x48>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	603b      	str	r3, [r7, #0]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xTaskIncrementTick+0x44>
 8005618:	4b31      	ldr	r3, [pc, #196]	@ (80056e0 <xTaskIncrementTick+0x110>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	4b31      	ldr	r3, [pc, #196]	@ (80056e4 <xTaskIncrementTick+0x114>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2f      	ldr	r2, [pc, #188]	@ (80056e0 <xTaskIncrementTick+0x110>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4a2f      	ldr	r2, [pc, #188]	@ (80056e4 <xTaskIncrementTick+0x114>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <xTaskIncrementTick+0x118>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a2d      	ldr	r2, [pc, #180]	@ (80056e8 <xTaskIncrementTick+0x118>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	f000 fa89 	bl	8005b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800563a:	4b2c      	ldr	r3, [pc, #176]	@ (80056ec <xTaskIncrementTick+0x11c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	429a      	cmp	r2, r3
 8005642:	d344      	bcc.n	80056ce <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005644:	4b26      	ldr	r3, [pc, #152]	@ (80056e0 <xTaskIncrementTick+0x110>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564e:	4b27      	ldr	r3, [pc, #156]	@ (80056ec <xTaskIncrementTick+0x11c>)
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	601a      	str	r2, [r3, #0]
					break;
 8005656:	e03a      	b.n	80056ce <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005658:	4b21      	ldr	r3, [pc, #132]	@ (80056e0 <xTaskIncrementTick+0x110>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d203      	bcs.n	8005678 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005670:	4a1e      	ldr	r2, [pc, #120]	@ (80056ec <xTaskIncrementTick+0x11c>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005676:	e02a      	b.n	80056ce <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f95f 	bl	8004940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	3318      	adds	r3, #24
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff f956 	bl	8004940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	4b14      	ldr	r3, [pc, #80]	@ (80056f0 <xTaskIncrementTick+0x120>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	4a13      	ldr	r2, [pc, #76]	@ (80056f0 <xTaskIncrementTick+0x120>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a10      	ldr	r2, [pc, #64]	@ (80056f4 <xTaskIncrementTick+0x124>)
 80056b4:	441a      	add	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7ff f8e4 	bl	800488a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c2:	e7bf      	b.n	8005644 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <xTaskIncrementTick+0x128>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	4a0b      	ldr	r2, [pc, #44]	@ (80056f8 <xTaskIncrementTick+0x128>)
 80056cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056ce:	697b      	ldr	r3, [r7, #20]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000740 	.word	0x20000740
 80056dc:	2000071c 	.word	0x2000071c
 80056e0:	200006d0 	.word	0x200006d0
 80056e4:	200006d4 	.word	0x200006d4
 80056e8:	20000730 	.word	0x20000730
 80056ec:	20000738 	.word	0x20000738
 80056f0:	20000720 	.word	0x20000720
 80056f4:	2000061c 	.word	0x2000061c
 80056f8:	20000728 	.word	0x20000728

080056fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005702:	4b29      	ldr	r3, [pc, #164]	@ (80057a8 <vTaskSwitchContext+0xac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800570a:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <vTaskSwitchContext+0xb0>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005710:	e045      	b.n	800579e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005712:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <vTaskSwitchContext+0xb0>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005718:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <vTaskSwitchContext+0xb4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	fab3 f383 	clz	r3, r3
 8005724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f1c3 031f 	rsb	r3, r3, #31
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	4921      	ldr	r1, [pc, #132]	@ (80057b4 <vTaskSwitchContext+0xb8>)
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	607b      	str	r3, [r7, #4]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <vTaskSwitchContext+0x5a>
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <vTaskSwitchContext+0xb8>)
 8005766:	4413      	add	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3308      	adds	r3, #8
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <vTaskSwitchContext+0x8e>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a09      	ldr	r2, [pc, #36]	@ (80057b8 <vTaskSwitchContext+0xbc>)
 8005792:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <vTaskSwitchContext+0xbc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	334c      	adds	r3, #76	@ 0x4c
 800579a:	4a08      	ldr	r2, [pc, #32]	@ (80057bc <vTaskSwitchContext+0xc0>)
 800579c:	6013      	str	r3, [r2, #0]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	20000740 	.word	0x20000740
 80057ac:	2000072c 	.word	0x2000072c
 80057b0:	20000720 	.word	0x20000720
 80057b4:	2000061c 	.word	0x2000061c
 80057b8:	20000618 	.word	0x20000618
 80057bc:	20000038 	.word	0x20000038

080057c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057e8:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <vTaskPlaceOnEventList+0x48>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3318      	adds	r3, #24
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff f86d 	bl	80048d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057f6:	2101      	movs	r1, #1
 80057f8:	6838      	ldr	r0, [r7, #0]
 80057fa:	f000 fa6d 	bl	8005cd8 <prvAddCurrentTaskToDelayedList>
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000618 	.word	0x20000618

0800580c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60fb      	str	r3, [r7, #12]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3318      	adds	r3, #24
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f87e 	bl	8004940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005844:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <xTaskRemoveFromEventList+0xb0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3304      	adds	r3, #4
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff f875 	bl	8004940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	4b18      	ldr	r3, [pc, #96]	@ (80058c0 <xTaskRemoveFromEventList+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4313      	orrs	r3, r2
 8005864:	4a16      	ldr	r2, [pc, #88]	@ (80058c0 <xTaskRemoveFromEventList+0xb4>)
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <xTaskRemoveFromEventList+0xb8>)
 8005876:	441a      	add	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f7ff f803 	bl	800488a <vListInsertEnd>
 8005884:	e005      	b.n	8005892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3318      	adds	r3, #24
 800588a:	4619      	mov	r1, r3
 800588c:	480e      	ldr	r0, [pc, #56]	@ (80058c8 <xTaskRemoveFromEventList+0xbc>)
 800588e:	f7fe fffc 	bl	800488a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <xTaskRemoveFromEventList+0xc0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d905      	bls.n	80058ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <xTaskRemoveFromEventList+0xc4>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e001      	b.n	80058b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000740 	.word	0x20000740
 80058c0:	20000720 	.word	0x20000720
 80058c4:	2000061c 	.word	0x2000061c
 80058c8:	200006d8 	.word	0x200006d8
 80058cc:	20000618 	.word	0x20000618
 80058d0:	2000072c 	.word	0x2000072c

080058d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <vTaskInternalSetTimeOutState+0x24>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <vTaskInternalSetTimeOutState+0x28>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000730 	.word	0x20000730
 80058fc:	2000071c 	.word	0x2000071c

08005900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60fb      	str	r3, [r7, #12]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005946:	f000 fb21 	bl	8005f8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800594a:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <xTaskCheckForTimeOut+0xc0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d102      	bne.n	800596a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	e023      	b.n	80059b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <xTaskCheckForTimeOut+0xc4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d007      	beq.n	8005986 <xTaskCheckForTimeOut+0x86>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	e015      	b.n	80059b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	429a      	cmp	r2, r3
 800598e:	d20b      	bcs.n	80059a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad2      	subs	r2, r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ff99 	bl	80058d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	e004      	b.n	80059b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059b2:	f000 fb1b 	bl	8005fec <vPortExitCritical>

	return xReturn;
 80059b6:	69fb      	ldr	r3, [r7, #28]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2000071c 	.word	0x2000071c
 80059c4:	20000730 	.word	0x20000730

080059c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059cc:	4b03      	ldr	r3, [pc, #12]	@ (80059dc <vTaskMissedYield+0x14>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	2000072c 	.word	0x2000072c

080059e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e8:	f000 f84c 	bl	8005a84 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80059ec:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <prvIdleTask+0x20>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059fc:	bf00      	nop
 80059fe:	e7f3      	b.n	80059e8 <prvIdleTask+0x8>
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	e00c      	b.n	8005a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a12      	ldr	r2, [pc, #72]	@ (8005a64 <prvInitialiseTaskLists+0x60>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe ff08 	bl	8004834 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3301      	adds	r3, #1
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d9ef      	bls.n	8005a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a30:	480d      	ldr	r0, [pc, #52]	@ (8005a68 <prvInitialiseTaskLists+0x64>)
 8005a32:	f7fe feff 	bl	8004834 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a36:	480d      	ldr	r0, [pc, #52]	@ (8005a6c <prvInitialiseTaskLists+0x68>)
 8005a38:	f7fe fefc 	bl	8004834 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a3c:	480c      	ldr	r0, [pc, #48]	@ (8005a70 <prvInitialiseTaskLists+0x6c>)
 8005a3e:	f7fe fef9 	bl	8004834 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a42:	480c      	ldr	r0, [pc, #48]	@ (8005a74 <prvInitialiseTaskLists+0x70>)
 8005a44:	f7fe fef6 	bl	8004834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a48:	480b      	ldr	r0, [pc, #44]	@ (8005a78 <prvInitialiseTaskLists+0x74>)
 8005a4a:	f7fe fef3 	bl	8004834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <prvInitialiseTaskLists+0x78>)
 8005a50:	4a05      	ldr	r2, [pc, #20]	@ (8005a68 <prvInitialiseTaskLists+0x64>)
 8005a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a54:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <prvInitialiseTaskLists+0x7c>)
 8005a56:	4a05      	ldr	r2, [pc, #20]	@ (8005a6c <prvInitialiseTaskLists+0x68>)
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2000061c 	.word	0x2000061c
 8005a68:	200006a8 	.word	0x200006a8
 8005a6c:	200006bc 	.word	0x200006bc
 8005a70:	200006d8 	.word	0x200006d8
 8005a74:	200006ec 	.word	0x200006ec
 8005a78:	20000704 	.word	0x20000704
 8005a7c:	200006d0 	.word	0x200006d0
 8005a80:	200006d4 	.word	0x200006d4

08005a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a8a:	e019      	b.n	8005ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a8c:	f000 fa7e 	bl	8005f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <prvCheckTasksWaitingTermination+0x50>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe ff4f 	bl	8004940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x54>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x54>)
 8005aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	@ (8005adc <prvCheckTasksWaitingTermination+0x58>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <prvCheckTasksWaitingTermination+0x58>)
 8005ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ab6:	f000 fa99 	bl	8005fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f810 	bl	8005ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <prvCheckTasksWaitingTermination+0x58>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e1      	bne.n	8005a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200006ec 	.word	0x200006ec
 8005ad8:	20000718 	.word	0x20000718
 8005adc:	20000700 	.word	0x20000700

08005ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	334c      	adds	r3, #76	@ 0x4c
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 faad 	bl	800704c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d108      	bne.n	8005b0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbd3 	bl	80062ac <vPortFree>
				vPortFree( pxTCB );
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fbd0 	bl	80062ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b0c:	e019      	b.n	8005b42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d103      	bne.n	8005b20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fbc7 	bl	80062ac <vPortFree>
	}
 8005b1e:	e010      	b.n	8005b42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d00b      	beq.n	8005b42 <prvDeleteTCB+0x62>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60fb      	str	r3, [r7, #12]
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <prvDeleteTCB+0x5e>
	}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b52:	4b0c      	ldr	r3, [pc, #48]	@ (8005b84 <prvResetNextTaskUnblockTime+0x38>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <prvResetNextTaskUnblockTime+0x3c>)
 8005b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b64:	e008      	b.n	8005b78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b66:	4b07      	ldr	r3, [pc, #28]	@ (8005b84 <prvResetNextTaskUnblockTime+0x38>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a04      	ldr	r2, [pc, #16]	@ (8005b88 <prvResetNextTaskUnblockTime+0x3c>)
 8005b76:	6013      	str	r3, [r2, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200006d0 	.word	0x200006d0
 8005b88:	20000738 	.word	0x20000738

08005b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b92:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <xTaskGetSchedulerState+0x34>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	e008      	b.n	8005bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba0:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <xTaskGetSchedulerState+0x38>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	e001      	b.n	8005bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bb2:	687b      	ldr	r3, [r7, #4]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000724 	.word	0x20000724
 8005bc4:	20000740 	.word	0x20000740

08005bc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d070      	beq.n	8005cc0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bde:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <xTaskPriorityDisinherit+0x104>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d00b      	beq.n	8005c00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60bb      	str	r3, [r7, #8]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d044      	beq.n	8005cc0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d140      	bne.n	8005cc0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fe7c 	bl	8004940 <uxListRemove>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d115      	bne.n	8005c7a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c52:	491f      	ldr	r1, [pc, #124]	@ (8005cd0 <xTaskPriorityDisinherit+0x108>)
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xTaskPriorityDisinherit+0xb2>
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	4b18      	ldr	r3, [pc, #96]	@ (8005cd4 <xTaskPriorityDisinherit+0x10c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4013      	ands	r3, r2
 8005c76:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <xTaskPriorityDisinherit+0x10c>)
 8005c78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	f1c3 0207 	rsb	r2, r3, #7
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <xTaskPriorityDisinherit+0x10c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd4 <xTaskPriorityDisinherit+0x10c>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a08      	ldr	r2, [pc, #32]	@ (8005cd0 <xTaskPriorityDisinherit+0x108>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe fde7 	bl	800488a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cc0:	697b      	ldr	r3, [r7, #20]
	}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000618 	.word	0x20000618
 8005cd0:	2000061c 	.word	0x2000061c
 8005cd4:	20000720 	.word	0x20000720

08005cd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ce2:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce8:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fe26 	bl	8004940 <uxListRemove>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cfa:	4b24      	ldr	r3, [pc, #144]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	2201      	movs	r2, #1
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43da      	mvns	r2, r3
 8005d08:	4b21      	ldr	r3, [pc, #132]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d10a      	bne.n	8005d30 <prvAddCurrentTaskToDelayedList+0x58>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d20:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	481a      	ldr	r0, [pc, #104]	@ (8005d94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d2a:	f7fe fdae 	bl	800488a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d2e:	e026      	b.n	8005d7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d38:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d209      	bcs.n	8005d5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d48:	4b13      	ldr	r3, [pc, #76]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7fe fdbb 	bl	80048d0 <vListInsert>
}
 8005d5a:	e010      	b.n	8005d7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f7fe fdb1 	bl	80048d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d202      	bcs.n	8005d7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d78:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6013      	str	r3, [r2, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000071c 	.word	0x2000071c
 8005d8c:	20000618 	.word	0x20000618
 8005d90:	20000720 	.word	0x20000720
 8005d94:	20000704 	.word	0x20000704
 8005d98:	200006d4 	.word	0x200006d4
 8005d9c:	200006d0 	.word	0x200006d0
 8005da0:	20000738 	.word	0x20000738

08005da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3b04      	subs	r3, #4
 8005db4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dd4:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <pxPortInitialiseStack+0x54>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b14      	subs	r3, #20
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b20      	subs	r3, #32
 8005dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	08005dfd 	.word	0x08005dfd

08005dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e06:	4b12      	ldr	r3, [pc, #72]	@ (8005e50 <prvTaskExitError+0x54>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d00b      	beq.n	8005e28 <prvTaskExitError+0x2c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <prvTaskExitError+0x28>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60bb      	str	r3, [r7, #8]
}
 8005e3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e3c:	bf00      	nop
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0fc      	beq.n	8005e3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	20000028 	.word	0x20000028
	...

08005e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pxCurrentTCBConst2>)
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e6a:	f380 8809 	msr	PSP, r0
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8811 	msr	BASEPRI, r0
 8005e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e7e:	4770      	bx	lr

08005e80 <pxCurrentTCBConst2>:
 8005e80:	20000618 	.word	0x20000618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e88:	4806      	ldr	r0, [pc, #24]	@ (8005ea4 <prvPortStartFirstTask+0x1c>)
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f380 8808 	msr	MSP, r0
 8005e92:	b662      	cpsie	i
 8005e94:	b661      	cpsie	f
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	df00      	svc	0
 8005ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ea2:	bf00      	nop
 8005ea4:	e000ed08 	.word	0xe000ed08

08005ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eae:	4b32      	ldr	r3, [pc, #200]	@ (8005f78 <xPortStartScheduler+0xd0>)
 8005eb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	22ff      	movs	r2, #255	@ 0xff
 8005ebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f7c <xPortStartScheduler+0xd4>)
 8005ed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005ed8:	2207      	movs	r2, #7
 8005eda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005edc:	e009      	b.n	8005ef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005ede:	4b28      	ldr	r3, [pc, #160]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	4a26      	ldr	r2, [pc, #152]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005ee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efa:	2b80      	cmp	r3, #128	@ 0x80
 8005efc:	d0ef      	beq.n	8005ede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005efe:	4b20      	ldr	r3, [pc, #128]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1c3 0307 	rsb	r3, r3, #7
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d00b      	beq.n	8005f22 <xPortStartScheduler+0x7a>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60bb      	str	r3, [r7, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f22:	4b17      	ldr	r3, [pc, #92]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005f2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f2c:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f34:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <xPortStartScheduler+0xd8>)
 8005f36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f40:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <xPortStartScheduler+0xdc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a0f      	ldr	r2, [pc, #60]	@ (8005f84 <xPortStartScheduler+0xdc>)
 8005f46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <xPortStartScheduler+0xdc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <xPortStartScheduler+0xdc>)
 8005f52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f58:	f000 f8b8 	bl	80060cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <xPortStartScheduler+0xe0>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f62:	f7ff ff91 	bl	8005e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f66:	f7ff fbc9 	bl	80056fc <vTaskSwitchContext>
	prvTaskExitError();
 8005f6a:	f7ff ff47 	bl	8005dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	e000e400 	.word	0xe000e400
 8005f7c:	20000744 	.word	0x20000744
 8005f80:	20000748 	.word	0x20000748
 8005f84:	e000ed20 	.word	0xe000ed20
 8005f88:	20000028 	.word	0x20000028

08005f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <vPortEnterCritical+0x58>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe4 <vPortEnterCritical+0x58>)
 8005fae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe4 <vPortEnterCritical+0x58>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d110      	bne.n	8005fda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <vPortEnterCritical+0x5c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <vPortEnterCritical+0x4e>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	603b      	str	r3, [r7, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	e7fd      	b.n	8005fd6 <vPortEnterCritical+0x4a>
	}
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000028 	.word	0x20000028
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ff2:	4b12      	ldr	r3, [pc, #72]	@ (800603c <vPortExitCritical+0x50>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <vPortExitCritical+0x26>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	607b      	str	r3, [r7, #4]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006012:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <vPortExitCritical+0x50>)
 800601a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <vPortExitCritical+0x50>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <vPortExitCritical+0x44>
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800602e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000028 	.word	0x20000028

08006040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006056:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800605a:	f380 8811 	msr	BASEPRI, r0
 800605e:	f7ff fb4d 	bl	80056fc <vTaskSwitchContext>
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006076:	f380 8809 	msr	PSP, r0
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	4770      	bx	lr

08006080 <pxCurrentTCBConst>:
 8006080:	20000618 	.word	0x20000618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
}
 80060a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060a2:	f7ff fa95 	bl	80055d0 <xTaskIncrementTick>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <SysTick_Handler+0x40>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060d0:	4b0a      	ldr	r3, [pc, #40]	@ (80060fc <vPortSetupTimerInterrupt+0x30>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006100 <vPortSetupTimerInterrupt+0x34>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060dc:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <vPortSetupTimerInterrupt+0x38>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <vPortSetupTimerInterrupt+0x3c>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	4a08      	ldr	r2, [pc, #32]	@ (800610c <vPortSetupTimerInterrupt+0x40>)
 80060ea:	3b01      	subs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ee:	4b03      	ldr	r3, [pc, #12]	@ (80060fc <vPortSetupTimerInterrupt+0x30>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	e000e010 	.word	0xe000e010
 8006100:	e000e018 	.word	0xe000e018
 8006104:	2000001c 	.word	0x2000001c
 8006108:	10624dd3 	.word	0x10624dd3
 800610c:	e000e014 	.word	0xe000e014

08006110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800611c:	f7ff f9ba 	bl	8005494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006120:	4b5c      	ldr	r3, [pc, #368]	@ (8006294 <pvPortMalloc+0x184>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006128:	f000 f924 	bl	8006374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800612c:	4b5a      	ldr	r3, [pc, #360]	@ (8006298 <pvPortMalloc+0x188>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8095 	bne.w	8006264 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01e      	beq.n	800617e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006140:	2208      	movs	r2, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b00      	cmp	r3, #0
 8006150:	d015      	beq.n	800617e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f023 0307 	bic.w	r3, r3, #7
 8006158:	3308      	adds	r3, #8
 800615a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <pvPortMalloc+0x6e>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	617b      	str	r3, [r7, #20]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d06f      	beq.n	8006264 <pvPortMalloc+0x154>
 8006184:	4b45      	ldr	r3, [pc, #276]	@ (800629c <pvPortMalloc+0x18c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d86a      	bhi.n	8006264 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800618e:	4b44      	ldr	r3, [pc, #272]	@ (80062a0 <pvPortMalloc+0x190>)
 8006190:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006192:	4b43      	ldr	r3, [pc, #268]	@ (80062a0 <pvPortMalloc+0x190>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006198:	e004      	b.n	80061a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d903      	bls.n	80061b6 <pvPortMalloc+0xa6>
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f1      	bne.n	800619a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061b6:	4b37      	ldr	r3, [pc, #220]	@ (8006294 <pvPortMalloc+0x184>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061bc:	429a      	cmp	r2, r3
 80061be:	d051      	beq.n	8006264 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2208      	movs	r2, #8
 80061c6:	4413      	add	r3, r2
 80061c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	1ad2      	subs	r2, r2, r3
 80061da:	2308      	movs	r3, #8
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	d920      	bls.n	8006224 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <pvPortMalloc+0xfc>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800621e:	69b8      	ldr	r0, [r7, #24]
 8006220:	f000 f90a 	bl	8006438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006224:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <pvPortMalloc+0x18c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	4a1b      	ldr	r2, [pc, #108]	@ (800629c <pvPortMalloc+0x18c>)
 8006230:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006232:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <pvPortMalloc+0x18c>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b1b      	ldr	r3, [pc, #108]	@ (80062a4 <pvPortMalloc+0x194>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d203      	bcs.n	8006246 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800623e:	4b17      	ldr	r3, [pc, #92]	@ (800629c <pvPortMalloc+0x18c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a18      	ldr	r2, [pc, #96]	@ (80062a4 <pvPortMalloc+0x194>)
 8006244:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <pvPortMalloc+0x188>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	431a      	orrs	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <pvPortMalloc+0x198>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	4a11      	ldr	r2, [pc, #68]	@ (80062a8 <pvPortMalloc+0x198>)
 8006262:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006264:	f7ff f924 	bl	80054b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <pvPortMalloc+0x17a>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <pvPortMalloc+0x176>
	return pvReturn;
 800628a:	69fb      	ldr	r3, [r7, #28]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3728      	adds	r7, #40	@ 0x28
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20001354 	.word	0x20001354
 8006298:	20001368 	.word	0x20001368
 800629c:	20001358 	.word	0x20001358
 80062a0:	2000134c 	.word	0x2000134c
 80062a4:	2000135c 	.word	0x2000135c
 80062a8:	20001360 	.word	0x20001360

080062ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04f      	beq.n	800635e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062be:	2308      	movs	r3, #8
 80062c0:	425b      	negs	r3, r3
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b25      	ldr	r3, [pc, #148]	@ (8006368 <vPortFree+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <vPortFree+0x46>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60fb      	str	r3, [r7, #12]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <vPortFree+0x66>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	60bb      	str	r3, [r7, #8]
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	e7fd      	b.n	800630e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	4b14      	ldr	r3, [pc, #80]	@ (8006368 <vPortFree+0xbc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11a      	bne.n	800635e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <vPortFree+0xbc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	43db      	mvns	r3, r3
 8006332:	401a      	ands	r2, r3
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006338:	f7ff f8ac 	bl	8005494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <vPortFree+0xc0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4413      	add	r3, r2
 8006346:	4a09      	ldr	r2, [pc, #36]	@ (800636c <vPortFree+0xc0>)
 8006348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f000 f874 	bl	8006438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006350:	4b07      	ldr	r3, [pc, #28]	@ (8006370 <vPortFree+0xc4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a06      	ldr	r2, [pc, #24]	@ (8006370 <vPortFree+0xc4>)
 8006358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800635a:	f7ff f8a9 	bl	80054b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800635e:	bf00      	nop
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20001368 	.word	0x20001368
 800636c:	20001358 	.word	0x20001358
 8006370:	20001364 	.word	0x20001364

08006374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800637a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800637e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <prvHeapInit+0xac>)
 8006382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3307      	adds	r3, #7
 8006392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <prvHeapInit+0xac>)
 80063a4:	4413      	add	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <prvHeapInit+0xb0>)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006424 <prvHeapInit+0xb0>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4413      	add	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063c0:	2208      	movs	r2, #8
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0307 	bic.w	r3, r3, #7
 80063ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a15      	ldr	r2, [pc, #84]	@ (8006428 <prvHeapInit+0xb4>)
 80063d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063d6:	4b14      	ldr	r3, [pc, #80]	@ (8006428 <prvHeapInit+0xb4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063de:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <prvHeapInit+0xb4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <prvHeapInit+0xb4>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4a0a      	ldr	r2, [pc, #40]	@ (800642c <prvHeapInit+0xb8>)
 8006402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4a09      	ldr	r2, [pc, #36]	@ (8006430 <prvHeapInit+0xbc>)
 800640a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800640c:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <prvHeapInit+0xc0>)
 800640e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	2000074c 	.word	0x2000074c
 8006424:	2000134c 	.word	0x2000134c
 8006428:	20001354 	.word	0x20001354
 800642c:	2000135c 	.word	0x2000135c
 8006430:	20001358 	.word	0x20001358
 8006434:	20001368 	.word	0x20001368

08006438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006440:	4b27      	ldr	r3, [pc, #156]	@ (80064e0 <prvInsertBlockIntoFreeList+0xa8>)
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e002      	b.n	800644c <prvInsertBlockIntoFreeList+0x14>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d8f7      	bhi.n	8006446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d108      	bne.n	800647a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d118      	bne.n	80064c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <prvInsertBlockIntoFreeList+0xac>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d00d      	beq.n	80064b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	441a      	add	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e008      	b.n	80064c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <prvInsertBlockIntoFreeList+0xac>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e003      	b.n	80064c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d002      	beq.n	80064d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	2000134c 	.word	0x2000134c
 80064e4:	20001354 	.word	0x20001354

080064e8 <__cvt>:
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ee:	461d      	mov	r5, r3
 80064f0:	bfbb      	ittet	lt
 80064f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80064f6:	461d      	movlt	r5, r3
 80064f8:	2300      	movge	r3, #0
 80064fa:	232d      	movlt	r3, #45	@ 0x2d
 80064fc:	b088      	sub	sp, #32
 80064fe:	4614      	mov	r4, r2
 8006500:	bfb8      	it	lt
 8006502:	4614      	movlt	r4, r2
 8006504:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006506:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006508:	7013      	strb	r3, [r2, #0]
 800650a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800650c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006510:	f023 0820 	bic.w	r8, r3, #32
 8006514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006518:	d005      	beq.n	8006526 <__cvt+0x3e>
 800651a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800651e:	d100      	bne.n	8006522 <__cvt+0x3a>
 8006520:	3601      	adds	r6, #1
 8006522:	2302      	movs	r3, #2
 8006524:	e000      	b.n	8006528 <__cvt+0x40>
 8006526:	2303      	movs	r3, #3
 8006528:	aa07      	add	r2, sp, #28
 800652a:	9204      	str	r2, [sp, #16]
 800652c:	aa06      	add	r2, sp, #24
 800652e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006532:	e9cd 3600 	strd	r3, r6, [sp]
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	f000 fee5 	bl	8007308 <_dtoa_r>
 800653e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006542:	4607      	mov	r7, r0
 8006544:	d119      	bne.n	800657a <__cvt+0x92>
 8006546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006548:	07db      	lsls	r3, r3, #31
 800654a:	d50e      	bpl.n	800656a <__cvt+0x82>
 800654c:	eb00 0906 	add.w	r9, r0, r6
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4620      	mov	r0, r4
 8006556:	4629      	mov	r1, r5
 8006558:	f7fa fa26 	bl	80009a8 <__aeabi_dcmpeq>
 800655c:	b108      	cbz	r0, 8006562 <__cvt+0x7a>
 800655e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006562:	2230      	movs	r2, #48	@ 0x30
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	454b      	cmp	r3, r9
 8006568:	d31e      	bcc.n	80065a8 <__cvt+0xc0>
 800656a:	4638      	mov	r0, r7
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006570:	1bdb      	subs	r3, r3, r7
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	b008      	add	sp, #32
 8006576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800657e:	eb00 0906 	add.w	r9, r0, r6
 8006582:	d1e5      	bne.n	8006550 <__cvt+0x68>
 8006584:	7803      	ldrb	r3, [r0, #0]
 8006586:	2b30      	cmp	r3, #48	@ 0x30
 8006588:	d10a      	bne.n	80065a0 <__cvt+0xb8>
 800658a:	2200      	movs	r2, #0
 800658c:	2300      	movs	r3, #0
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa fa09 	bl	80009a8 <__aeabi_dcmpeq>
 8006596:	b918      	cbnz	r0, 80065a0 <__cvt+0xb8>
 8006598:	f1c6 0601 	rsb	r6, r6, #1
 800659c:	f8ca 6000 	str.w	r6, [sl]
 80065a0:	f8da 3000 	ldr.w	r3, [sl]
 80065a4:	4499      	add	r9, r3
 80065a6:	e7d3      	b.n	8006550 <__cvt+0x68>
 80065a8:	1c59      	adds	r1, r3, #1
 80065aa:	9107      	str	r1, [sp, #28]
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e7d9      	b.n	8006564 <__cvt+0x7c>

080065b0 <__exponent>:
 80065b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b2:	2900      	cmp	r1, #0
 80065b4:	bfb6      	itet	lt
 80065b6:	232d      	movlt	r3, #45	@ 0x2d
 80065b8:	232b      	movge	r3, #43	@ 0x2b
 80065ba:	4249      	neglt	r1, r1
 80065bc:	2909      	cmp	r1, #9
 80065be:	7002      	strb	r2, [r0, #0]
 80065c0:	7043      	strb	r3, [r0, #1]
 80065c2:	dd29      	ble.n	8006618 <__exponent+0x68>
 80065c4:	f10d 0307 	add.w	r3, sp, #7
 80065c8:	461d      	mov	r5, r3
 80065ca:	270a      	movs	r7, #10
 80065cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80065d0:	461a      	mov	r2, r3
 80065d2:	fb07 1416 	mls	r4, r7, r6, r1
 80065d6:	3430      	adds	r4, #48	@ 0x30
 80065d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065dc:	460c      	mov	r4, r1
 80065de:	2c63      	cmp	r4, #99	@ 0x63
 80065e0:	4631      	mov	r1, r6
 80065e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80065e6:	dcf1      	bgt.n	80065cc <__exponent+0x1c>
 80065e8:	3130      	adds	r1, #48	@ 0x30
 80065ea:	1e94      	subs	r4, r2, #2
 80065ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065f0:	4623      	mov	r3, r4
 80065f2:	1c41      	adds	r1, r0, #1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	d30a      	bcc.n	800660e <__exponent+0x5e>
 80065f8:	f10d 0309 	add.w	r3, sp, #9
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	42ac      	cmp	r4, r5
 8006600:	bf88      	it	hi
 8006602:	2300      	movhi	r3, #0
 8006604:	3302      	adds	r3, #2
 8006606:	4403      	add	r3, r0
 8006608:	1a18      	subs	r0, r3, r0
 800660a:	b003      	add	sp, #12
 800660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006612:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006616:	e7ed      	b.n	80065f4 <__exponent+0x44>
 8006618:	2330      	movs	r3, #48	@ 0x30
 800661a:	3130      	adds	r1, #48	@ 0x30
 800661c:	7083      	strb	r3, [r0, #2]
 800661e:	70c1      	strb	r1, [r0, #3]
 8006620:	1d03      	adds	r3, r0, #4
 8006622:	e7f1      	b.n	8006608 <__exponent+0x58>

08006624 <_printf_float>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	b091      	sub	sp, #68	@ 0x44
 800662a:	460c      	mov	r4, r1
 800662c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006630:	4616      	mov	r6, r2
 8006632:	461f      	mov	r7, r3
 8006634:	4605      	mov	r5, r0
 8006636:	f000 fcf5 	bl	8007024 <_localeconv_r>
 800663a:	6803      	ldr	r3, [r0, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	f7f9 fd86 	bl	8000150 <strlen>
 8006644:	2300      	movs	r3, #0
 8006646:	930e      	str	r3, [sp, #56]	@ 0x38
 8006648:	f8d8 3000 	ldr.w	r3, [r8]
 800664c:	9009      	str	r0, [sp, #36]	@ 0x24
 800664e:	3307      	adds	r3, #7
 8006650:	f023 0307 	bic.w	r3, r3, #7
 8006654:	f103 0208 	add.w	r2, r3, #8
 8006658:	f894 a018 	ldrb.w	sl, [r4, #24]
 800665c:	f8d4 b000 	ldr.w	fp, [r4]
 8006660:	f8c8 2000 	str.w	r2, [r8]
 8006664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006668:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800666c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800666e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800667a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800667e:	4b9c      	ldr	r3, [pc, #624]	@ (80068f0 <_printf_float+0x2cc>)
 8006680:	f7fa f9c4 	bl	8000a0c <__aeabi_dcmpun>
 8006684:	bb70      	cbnz	r0, 80066e4 <_printf_float+0xc0>
 8006686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	4b98      	ldr	r3, [pc, #608]	@ (80068f0 <_printf_float+0x2cc>)
 8006690:	f7fa f99e 	bl	80009d0 <__aeabi_dcmple>
 8006694:	bb30      	cbnz	r0, 80066e4 <_printf_float+0xc0>
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	f7fa f98d 	bl	80009bc <__aeabi_dcmplt>
 80066a2:	b110      	cbz	r0, 80066aa <_printf_float+0x86>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066aa:	4a92      	ldr	r2, [pc, #584]	@ (80068f4 <_printf_float+0x2d0>)
 80066ac:	4b92      	ldr	r3, [pc, #584]	@ (80068f8 <_printf_float+0x2d4>)
 80066ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066b2:	bf94      	ite	ls
 80066b4:	4690      	movls	r8, r2
 80066b6:	4698      	movhi	r8, r3
 80066b8:	2303      	movs	r3, #3
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	f02b 0304 	bic.w	r3, fp, #4
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	4633      	mov	r3, r6
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	9700      	str	r7, [sp, #0]
 80066ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80066d0:	f000 f9d4 	bl	8006a7c <_printf_common>
 80066d4:	3001      	adds	r0, #1
 80066d6:	f040 8090 	bne.w	80067fa <_printf_float+0x1d6>
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	b011      	add	sp, #68	@ 0x44
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7fa f98e 	bl	8000a0c <__aeabi_dcmpun>
 80066f0:	b148      	cbz	r0, 8006706 <_printf_float+0xe2>
 80066f2:	464b      	mov	r3, r9
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfb8      	it	lt
 80066f8:	232d      	movlt	r3, #45	@ 0x2d
 80066fa:	4a80      	ldr	r2, [pc, #512]	@ (80068fc <_printf_float+0x2d8>)
 80066fc:	bfb8      	it	lt
 80066fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006702:	4b7f      	ldr	r3, [pc, #508]	@ (8006900 <_printf_float+0x2dc>)
 8006704:	e7d3      	b.n	80066ae <_printf_float+0x8a>
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	d13f      	bne.n	8006790 <_printf_float+0x16c>
 8006710:	2306      	movs	r3, #6
 8006712:	6063      	str	r3, [r4, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006720:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006724:	aa0d      	add	r2, sp, #52	@ 0x34
 8006726:	9203      	str	r2, [sp, #12]
 8006728:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800672c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	4642      	mov	r2, r8
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	4628      	mov	r0, r5
 8006738:	464b      	mov	r3, r9
 800673a:	910a      	str	r1, [sp, #40]	@ 0x28
 800673c:	f7ff fed4 	bl	80064e8 <__cvt>
 8006740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006742:	4680      	mov	r8, r0
 8006744:	2947      	cmp	r1, #71	@ 0x47
 8006746:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006748:	d128      	bne.n	800679c <_printf_float+0x178>
 800674a:	1cc8      	adds	r0, r1, #3
 800674c:	db02      	blt.n	8006754 <_printf_float+0x130>
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	4299      	cmp	r1, r3
 8006752:	dd40      	ble.n	80067d6 <_printf_float+0x1b2>
 8006754:	f1aa 0a02 	sub.w	sl, sl, #2
 8006758:	fa5f fa8a 	uxtb.w	sl, sl
 800675c:	4652      	mov	r2, sl
 800675e:	3901      	subs	r1, #1
 8006760:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006764:	910d      	str	r1, [sp, #52]	@ 0x34
 8006766:	f7ff ff23 	bl	80065b0 <__exponent>
 800676a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800676c:	4681      	mov	r9, r0
 800676e:	1813      	adds	r3, r2, r0
 8006770:	2a01      	cmp	r2, #1
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	dc02      	bgt.n	800677c <_printf_float+0x158>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	07d2      	lsls	r2, r2, #31
 800677a:	d501      	bpl.n	8006780 <_printf_float+0x15c>
 800677c:	3301      	adds	r3, #1
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006784:	2b00      	cmp	r3, #0
 8006786:	d09e      	beq.n	80066c6 <_printf_float+0xa2>
 8006788:	232d      	movs	r3, #45	@ 0x2d
 800678a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800678e:	e79a      	b.n	80066c6 <_printf_float+0xa2>
 8006790:	2947      	cmp	r1, #71	@ 0x47
 8006792:	d1bf      	bne.n	8006714 <_printf_float+0xf0>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1bd      	bne.n	8006714 <_printf_float+0xf0>
 8006798:	2301      	movs	r3, #1
 800679a:	e7ba      	b.n	8006712 <_printf_float+0xee>
 800679c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067a0:	d9dc      	bls.n	800675c <_printf_float+0x138>
 80067a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067a6:	d118      	bne.n	80067da <_printf_float+0x1b6>
 80067a8:	2900      	cmp	r1, #0
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	dd0b      	ble.n	80067c6 <_printf_float+0x1a2>
 80067ae:	6121      	str	r1, [r4, #16]
 80067b0:	b913      	cbnz	r3, 80067b8 <_printf_float+0x194>
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	07d0      	lsls	r0, r2, #31
 80067b6:	d502      	bpl.n	80067be <_printf_float+0x19a>
 80067b8:	3301      	adds	r3, #1
 80067ba:	440b      	add	r3, r1
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067c4:	e7dc      	b.n	8006780 <_printf_float+0x15c>
 80067c6:	b913      	cbnz	r3, 80067ce <_printf_float+0x1aa>
 80067c8:	6822      	ldr	r2, [r4, #0]
 80067ca:	07d2      	lsls	r2, r2, #31
 80067cc:	d501      	bpl.n	80067d2 <_printf_float+0x1ae>
 80067ce:	3302      	adds	r3, #2
 80067d0:	e7f4      	b.n	80067bc <_printf_float+0x198>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7f2      	b.n	80067bc <_printf_float+0x198>
 80067d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067dc:	4299      	cmp	r1, r3
 80067de:	db05      	blt.n	80067ec <_printf_float+0x1c8>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	6121      	str	r1, [r4, #16]
 80067e4:	07d8      	lsls	r0, r3, #31
 80067e6:	d5ea      	bpl.n	80067be <_printf_float+0x19a>
 80067e8:	1c4b      	adds	r3, r1, #1
 80067ea:	e7e7      	b.n	80067bc <_printf_float+0x198>
 80067ec:	2900      	cmp	r1, #0
 80067ee:	bfcc      	ite	gt
 80067f0:	2201      	movgt	r2, #1
 80067f2:	f1c1 0202 	rsble	r2, r1, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	e7e0      	b.n	80067bc <_printf_float+0x198>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	055a      	lsls	r2, r3, #21
 80067fe:	d407      	bmi.n	8006810 <_printf_float+0x1ec>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	4642      	mov	r2, r8
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	d12b      	bne.n	8006866 <_printf_float+0x242>
 800680e:	e764      	b.n	80066da <_printf_float+0xb6>
 8006810:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006814:	f240 80dc 	bls.w	80069d0 <_printf_float+0x3ac>
 8006818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	f7fa f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8006824:	2800      	cmp	r0, #0
 8006826:	d033      	beq.n	8006890 <_printf_float+0x26c>
 8006828:	2301      	movs	r3, #1
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	4a35      	ldr	r2, [pc, #212]	@ (8006904 <_printf_float+0x2e0>)
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f af51 	beq.w	80066da <_printf_float+0xb6>
 8006838:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800683c:	4543      	cmp	r3, r8
 800683e:	db02      	blt.n	8006846 <_printf_float+0x222>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	07d8      	lsls	r0, r3, #31
 8006844:	d50f      	bpl.n	8006866 <_printf_float+0x242>
 8006846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f af42 	beq.w	80066da <_printf_float+0xb6>
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	f108 38ff 	add.w	r8, r8, #4294967295
 800685e:	f104 0a1a 	add.w	sl, r4, #26
 8006862:	45c8      	cmp	r8, r9
 8006864:	dc09      	bgt.n	800687a <_printf_float+0x256>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	079b      	lsls	r3, r3, #30
 800686a:	f100 8102 	bmi.w	8006a72 <_printf_float+0x44e>
 800686e:	68e0      	ldr	r0, [r4, #12]
 8006870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006872:	4298      	cmp	r0, r3
 8006874:	bfb8      	it	lt
 8006876:	4618      	movlt	r0, r3
 8006878:	e731      	b.n	80066de <_printf_float+0xba>
 800687a:	2301      	movs	r3, #1
 800687c:	4652      	mov	r2, sl
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	f43f af28 	beq.w	80066da <_printf_float+0xb6>
 800688a:	f109 0901 	add.w	r9, r9, #1
 800688e:	e7e8      	b.n	8006862 <_printf_float+0x23e>
 8006890:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	dc38      	bgt.n	8006908 <_printf_float+0x2e4>
 8006896:	2301      	movs	r3, #1
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	4a19      	ldr	r2, [pc, #100]	@ (8006904 <_printf_float+0x2e0>)
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f af1a 	beq.w	80066da <_printf_float+0xb6>
 80068a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068aa:	ea59 0303 	orrs.w	r3, r9, r3
 80068ae:	d102      	bne.n	80068b6 <_printf_float+0x292>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07d9      	lsls	r1, r3, #31
 80068b4:	d5d7      	bpl.n	8006866 <_printf_float+0x242>
 80068b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f af0a 	beq.w	80066da <_printf_float+0xb6>
 80068c6:	f04f 0a00 	mov.w	sl, #0
 80068ca:	f104 0b1a 	add.w	fp, r4, #26
 80068ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d0:	425b      	negs	r3, r3
 80068d2:	4553      	cmp	r3, sl
 80068d4:	dc01      	bgt.n	80068da <_printf_float+0x2b6>
 80068d6:	464b      	mov	r3, r9
 80068d8:	e793      	b.n	8006802 <_printf_float+0x1de>
 80068da:	2301      	movs	r3, #1
 80068dc:	465a      	mov	r2, fp
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f aef8 	beq.w	80066da <_printf_float+0xb6>
 80068ea:	f10a 0a01 	add.w	sl, sl, #1
 80068ee:	e7ee      	b.n	80068ce <_printf_float+0x2aa>
 80068f0:	7fefffff 	.word	0x7fefffff
 80068f4:	080093da 	.word	0x080093da
 80068f8:	080093de 	.word	0x080093de
 80068fc:	080093e2 	.word	0x080093e2
 8006900:	080093e6 	.word	0x080093e6
 8006904:	080093ea 	.word	0x080093ea
 8006908:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800690a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800690e:	4553      	cmp	r3, sl
 8006910:	bfa8      	it	ge
 8006912:	4653      	movge	r3, sl
 8006914:	2b00      	cmp	r3, #0
 8006916:	4699      	mov	r9, r3
 8006918:	dc36      	bgt.n	8006988 <_printf_float+0x364>
 800691a:	f04f 0b00 	mov.w	fp, #0
 800691e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006922:	f104 021a 	add.w	r2, r4, #26
 8006926:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006928:	930a      	str	r3, [sp, #40]	@ 0x28
 800692a:	eba3 0309 	sub.w	r3, r3, r9
 800692e:	455b      	cmp	r3, fp
 8006930:	dc31      	bgt.n	8006996 <_printf_float+0x372>
 8006932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006934:	459a      	cmp	sl, r3
 8006936:	dc3a      	bgt.n	80069ae <_printf_float+0x38a>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07da      	lsls	r2, r3, #31
 800693c:	d437      	bmi.n	80069ae <_printf_float+0x38a>
 800693e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006940:	ebaa 0903 	sub.w	r9, sl, r3
 8006944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006946:	ebaa 0303 	sub.w	r3, sl, r3
 800694a:	4599      	cmp	r9, r3
 800694c:	bfa8      	it	ge
 800694e:	4699      	movge	r9, r3
 8006950:	f1b9 0f00 	cmp.w	r9, #0
 8006954:	dc33      	bgt.n	80069be <_printf_float+0x39a>
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800695e:	f104 0b1a 	add.w	fp, r4, #26
 8006962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006964:	ebaa 0303 	sub.w	r3, sl, r3
 8006968:	eba3 0309 	sub.w	r3, r3, r9
 800696c:	4543      	cmp	r3, r8
 800696e:	f77f af7a 	ble.w	8006866 <_printf_float+0x242>
 8006972:	2301      	movs	r3, #1
 8006974:	465a      	mov	r2, fp
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f aeac 	beq.w	80066da <_printf_float+0xb6>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	e7ec      	b.n	8006962 <_printf_float+0x33e>
 8006988:	4642      	mov	r2, r8
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d1c2      	bne.n	800691a <_printf_float+0x2f6>
 8006994:	e6a1      	b.n	80066da <_printf_float+0xb6>
 8006996:	2301      	movs	r3, #1
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	920a      	str	r2, [sp, #40]	@ 0x28
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae9a 	beq.w	80066da <_printf_float+0xb6>
 80069a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069a8:	f10b 0b01 	add.w	fp, fp, #1
 80069ac:	e7bb      	b.n	8006926 <_printf_float+0x302>
 80069ae:	4631      	mov	r1, r6
 80069b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1c0      	bne.n	800693e <_printf_float+0x31a>
 80069bc:	e68d      	b.n	80066da <_printf_float+0xb6>
 80069be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c0:	464b      	mov	r3, r9
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	4442      	add	r2, r8
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d1c3      	bne.n	8006956 <_printf_float+0x332>
 80069ce:	e684      	b.n	80066da <_printf_float+0xb6>
 80069d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80069d4:	f1ba 0f01 	cmp.w	sl, #1
 80069d8:	dc01      	bgt.n	80069de <_printf_float+0x3ba>
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d536      	bpl.n	8006a4c <_printf_float+0x428>
 80069de:	2301      	movs	r3, #1
 80069e0:	4642      	mov	r2, r8
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae76 	beq.w	80066da <_printf_float+0xb6>
 80069ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f ae6e 	beq.w	80066da <_printf_float+0xb6>
 80069fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0a:	f7f9 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8006a0e:	b9c0      	cbnz	r0, 8006a42 <_printf_float+0x41e>
 8006a10:	4653      	mov	r3, sl
 8006a12:	f108 0201 	add.w	r2, r8, #1
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d10c      	bne.n	8006a3a <_printf_float+0x416>
 8006a20:	e65b      	b.n	80066da <_printf_float+0xb6>
 8006a22:	2301      	movs	r3, #1
 8006a24:	465a      	mov	r2, fp
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f43f ae54 	beq.w	80066da <_printf_float+0xb6>
 8006a32:	f108 0801 	add.w	r8, r8, #1
 8006a36:	45d0      	cmp	r8, sl
 8006a38:	dbf3      	blt.n	8006a22 <_printf_float+0x3fe>
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a40:	e6e0      	b.n	8006804 <_printf_float+0x1e0>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	f104 0b1a 	add.w	fp, r4, #26
 8006a4a:	e7f4      	b.n	8006a36 <_printf_float+0x412>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4642      	mov	r2, r8
 8006a50:	e7e1      	b.n	8006a16 <_printf_float+0x3f2>
 8006a52:	2301      	movs	r3, #1
 8006a54:	464a      	mov	r2, r9
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f ae3c 	beq.w	80066da <_printf_float+0xb6>
 8006a62:	f108 0801 	add.w	r8, r8, #1
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	4543      	cmp	r3, r8
 8006a6e:	dcf0      	bgt.n	8006a52 <_printf_float+0x42e>
 8006a70:	e6fd      	b.n	800686e <_printf_float+0x24a>
 8006a72:	f04f 0800 	mov.w	r8, #0
 8006a76:	f104 0919 	add.w	r9, r4, #25
 8006a7a:	e7f4      	b.n	8006a66 <_printf_float+0x442>

08006a7c <_printf_common>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	4616      	mov	r6, r2
 8006a82:	4698      	mov	r8, r3
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	4607      	mov	r7, r0
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	bfb8      	it	lt
 8006a8e:	4613      	movlt	r3, r2
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a96:	460c      	mov	r4, r1
 8006a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_printf_common+0x26>
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	0699      	lsls	r1, r3, #26
 8006aa6:	bf42      	ittt	mi
 8006aa8:	6833      	ldrmi	r3, [r6, #0]
 8006aaa:	3302      	addmi	r3, #2
 8006aac:	6033      	strmi	r3, [r6, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	f015 0506 	ands.w	r5, r5, #6
 8006ab4:	d106      	bne.n	8006ac4 <_printf_common+0x48>
 8006ab6:	f104 0a19 	add.w	sl, r4, #25
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	6832      	ldr	r2, [r6, #0]
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	dc2b      	bgt.n	8006b1c <_printf_common+0xa0>
 8006ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	3b00      	subs	r3, #0
 8006acc:	bf18      	it	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	0692      	lsls	r2, r2, #26
 8006ad2:	d430      	bmi.n	8006b36 <_printf_common+0xba>
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006adc:	47c8      	blx	r9
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d023      	beq.n	8006b2a <_printf_common+0xae>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	f003 0306 	and.w	r3, r3, #6
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf14      	ite	ne
 8006aee:	2500      	movne	r5, #0
 8006af0:	6833      	ldreq	r3, [r6, #0]
 8006af2:	f04f 0600 	mov.w	r6, #0
 8006af6:	bf08      	it	eq
 8006af8:	68e5      	ldreq	r5, [r4, #12]
 8006afa:	f104 041a 	add.w	r4, r4, #26
 8006afe:	bf08      	it	eq
 8006b00:	1aed      	subeq	r5, r5, r3
 8006b02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b06:	bf08      	it	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfc4      	itt	gt
 8006b10:	1a9b      	subgt	r3, r3, r2
 8006b12:	18ed      	addgt	r5, r5, r3
 8006b14:	42b5      	cmp	r5, r6
 8006b16:	d11a      	bne.n	8006b4e <_printf_common+0xd2>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e008      	b.n	8006b2e <_printf_common+0xb2>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4641      	mov	r1, r8
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c8      	blx	r9
 8006b26:	3001      	adds	r0, #1
 8006b28:	d103      	bne.n	8006b32 <_printf_common+0xb6>
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b32:	3501      	adds	r5, #1
 8006b34:	e7c1      	b.n	8006aba <_printf_common+0x3e>
 8006b36:	2030      	movs	r0, #48	@ 0x30
 8006b38:	18e1      	adds	r1, r4, r3
 8006b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b44:	4422      	add	r2, r4
 8006b46:	3302      	adds	r3, #2
 8006b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b4c:	e7c2      	b.n	8006ad4 <_printf_common+0x58>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4622      	mov	r2, r4
 8006b52:	4641      	mov	r1, r8
 8006b54:	4638      	mov	r0, r7
 8006b56:	47c8      	blx	r9
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d0e6      	beq.n	8006b2a <_printf_common+0xae>
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7d9      	b.n	8006b14 <_printf_common+0x98>

08006b60 <_printf_i>:
 8006b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	7e0f      	ldrb	r7, [r1, #24]
 8006b66:	4691      	mov	r9, r2
 8006b68:	2f78      	cmp	r7, #120	@ 0x78
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	469a      	mov	sl, r3
 8006b70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b76:	d807      	bhi.n	8006b88 <_printf_i+0x28>
 8006b78:	2f62      	cmp	r7, #98	@ 0x62
 8006b7a:	d80a      	bhi.n	8006b92 <_printf_i+0x32>
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	f000 80d3 	beq.w	8006d28 <_printf_i+0x1c8>
 8006b82:	2f58      	cmp	r7, #88	@ 0x58
 8006b84:	f000 80ba 	beq.w	8006cfc <_printf_i+0x19c>
 8006b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b90:	e03a      	b.n	8006c08 <_printf_i+0xa8>
 8006b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b96:	2b15      	cmp	r3, #21
 8006b98:	d8f6      	bhi.n	8006b88 <_printf_i+0x28>
 8006b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006ba0 <_printf_i+0x40>)
 8006b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006b89 	.word	0x08006b89
 8006bac:	08006b89 	.word	0x08006b89
 8006bb0:	08006b89 	.word	0x08006b89
 8006bb4:	08006b89 	.word	0x08006b89
 8006bb8:	08006c0d 	.word	0x08006c0d
 8006bbc:	08006b89 	.word	0x08006b89
 8006bc0:	08006b89 	.word	0x08006b89
 8006bc4:	08006b89 	.word	0x08006b89
 8006bc8:	08006b89 	.word	0x08006b89
 8006bcc:	08006d0f 	.word	0x08006d0f
 8006bd0:	08006c37 	.word	0x08006c37
 8006bd4:	08006cc9 	.word	0x08006cc9
 8006bd8:	08006b89 	.word	0x08006b89
 8006bdc:	08006b89 	.word	0x08006b89
 8006be0:	08006d31 	.word	0x08006d31
 8006be4:	08006b89 	.word	0x08006b89
 8006be8:	08006c37 	.word	0x08006c37
 8006bec:	08006b89 	.word	0x08006b89
 8006bf0:	08006b89 	.word	0x08006b89
 8006bf4:	08006cd1 	.word	0x08006cd1
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6032      	str	r2, [r6, #0]
 8006c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e09e      	b.n	8006d4a <_printf_i+0x1ea>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1d19      	adds	r1, r3, #4
 8006c12:	6031      	str	r1, [r6, #0]
 8006c14:	0606      	lsls	r6, r0, #24
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0xbc>
 8006c18:	681d      	ldr	r5, [r3, #0]
 8006c1a:	e003      	b.n	8006c24 <_printf_i+0xc4>
 8006c1c:	0645      	lsls	r5, r0, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0xb8>
 8006c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xd0>
 8006c28:	232d      	movs	r3, #45	@ 0x2d
 8006c2a:	426d      	negs	r5, r5
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c30:	230a      	movs	r3, #10
 8006c32:	4859      	ldr	r0, [pc, #356]	@ (8006d98 <_printf_i+0x238>)
 8006c34:	e011      	b.n	8006c5a <_printf_i+0xfa>
 8006c36:	6821      	ldr	r1, [r4, #0]
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	0608      	lsls	r0, r1, #24
 8006c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c40:	d402      	bmi.n	8006c48 <_printf_i+0xe8>
 8006c42:	0649      	lsls	r1, r1, #25
 8006c44:	bf48      	it	mi
 8006c46:	b2ad      	uxthmi	r5, r5
 8006c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	bf14      	ite	ne
 8006c4e:	230a      	movne	r3, #10
 8006c50:	2308      	moveq	r3, #8
 8006c52:	4851      	ldr	r0, [pc, #324]	@ (8006d98 <_printf_i+0x238>)
 8006c54:	2100      	movs	r1, #0
 8006c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c5a:	6866      	ldr	r6, [r4, #4]
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	bfa8      	it	ge
 8006c60:	6821      	ldrge	r1, [r4, #0]
 8006c62:	60a6      	str	r6, [r4, #8]
 8006c64:	bfa4      	itt	ge
 8006c66:	f021 0104 	bicge.w	r1, r1, #4
 8006c6a:	6021      	strge	r1, [r4, #0]
 8006c6c:	b90d      	cbnz	r5, 8006c72 <_printf_i+0x112>
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	d04b      	beq.n	8006d0a <_printf_i+0x1aa>
 8006c72:	4616      	mov	r6, r2
 8006c74:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c78:	fb03 5711 	mls	r7, r3, r1, r5
 8006c7c:	5dc7      	ldrb	r7, [r0, r7]
 8006c7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c82:	462f      	mov	r7, r5
 8006c84:	42bb      	cmp	r3, r7
 8006c86:	460d      	mov	r5, r1
 8006c88:	d9f4      	bls.n	8006c74 <_printf_i+0x114>
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d10b      	bne.n	8006ca6 <_printf_i+0x146>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	07df      	lsls	r7, r3, #31
 8006c92:	d508      	bpl.n	8006ca6 <_printf_i+0x146>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6861      	ldr	r1, [r4, #4]
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	bfde      	ittt	le
 8006c9c:	2330      	movle	r3, #48	@ 0x30
 8006c9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ca2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ca6:	1b92      	subs	r2, r2, r6
 8006ca8:	6122      	str	r2, [r4, #16]
 8006caa:	464b      	mov	r3, r9
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f8cd a000 	str.w	sl, [sp]
 8006cb4:	aa03      	add	r2, sp, #12
 8006cb6:	f7ff fee1 	bl	8006a7c <_printf_common>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d14a      	bne.n	8006d54 <_printf_i+0x1f4>
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	b004      	add	sp, #16
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	f043 0320 	orr.w	r3, r3, #32
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2778      	movs	r7, #120	@ 0x78
 8006cd2:	4832      	ldr	r0, [pc, #200]	@ (8006d9c <_printf_i+0x23c>)
 8006cd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	6831      	ldr	r1, [r6, #0]
 8006cdc:	061f      	lsls	r7, r3, #24
 8006cde:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce2:	d402      	bmi.n	8006cea <_printf_i+0x18a>
 8006ce4:	065f      	lsls	r7, r3, #25
 8006ce6:	bf48      	it	mi
 8006ce8:	b2ad      	uxthmi	r5, r5
 8006cea:	6031      	str	r1, [r6, #0]
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	bf44      	itt	mi
 8006cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf4:	6023      	strmi	r3, [r4, #0]
 8006cf6:	b11d      	cbz	r5, 8006d00 <_printf_i+0x1a0>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	e7ab      	b.n	8006c54 <_printf_i+0xf4>
 8006cfc:	4826      	ldr	r0, [pc, #152]	@ (8006d98 <_printf_i+0x238>)
 8006cfe:	e7e9      	b.n	8006cd4 <_printf_i+0x174>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	f023 0320 	bic.w	r3, r3, #32
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	e7f6      	b.n	8006cf8 <_printf_i+0x198>
 8006d0a:	4616      	mov	r6, r2
 8006d0c:	e7bd      	b.n	8006c8a <_printf_i+0x12a>
 8006d0e:	6833      	ldr	r3, [r6, #0]
 8006d10:	6825      	ldr	r5, [r4, #0]
 8006d12:	1d18      	adds	r0, r3, #4
 8006d14:	6961      	ldr	r1, [r4, #20]
 8006d16:	6030      	str	r0, [r6, #0]
 8006d18:	062e      	lsls	r6, r5, #24
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	d501      	bpl.n	8006d22 <_printf_i+0x1c2>
 8006d1e:	6019      	str	r1, [r3, #0]
 8006d20:	e002      	b.n	8006d28 <_printf_i+0x1c8>
 8006d22:	0668      	lsls	r0, r5, #25
 8006d24:	d5fb      	bpl.n	8006d1e <_printf_i+0x1be>
 8006d26:	8019      	strh	r1, [r3, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4616      	mov	r6, r2
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	e7bc      	b.n	8006caa <_printf_i+0x14a>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	2100      	movs	r1, #0
 8006d34:	1d1a      	adds	r2, r3, #4
 8006d36:	6032      	str	r2, [r6, #0]
 8006d38:	681e      	ldr	r6, [r3, #0]
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 fa3e 	bl	80071be <memchr>
 8006d42:	b108      	cbz	r0, 8006d48 <_printf_i+0x1e8>
 8006d44:	1b80      	subs	r0, r0, r6
 8006d46:	6060      	str	r0, [r4, #4]
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d52:	e7aa      	b.n	8006caa <_printf_i+0x14a>
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	47d0      	blx	sl
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d0ad      	beq.n	8006cbe <_printf_i+0x15e>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	079b      	lsls	r3, r3, #30
 8006d66:	d413      	bmi.n	8006d90 <_printf_i+0x230>
 8006d68:	68e0      	ldr	r0, [r4, #12]
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	4298      	cmp	r0, r3
 8006d6e:	bfb8      	it	lt
 8006d70:	4618      	movlt	r0, r3
 8006d72:	e7a6      	b.n	8006cc2 <_printf_i+0x162>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4632      	mov	r2, r6
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	47d0      	blx	sl
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d09d      	beq.n	8006cbe <_printf_i+0x15e>
 8006d82:	3501      	adds	r5, #1
 8006d84:	68e3      	ldr	r3, [r4, #12]
 8006d86:	9903      	ldr	r1, [sp, #12]
 8006d88:	1a5b      	subs	r3, r3, r1
 8006d8a:	42ab      	cmp	r3, r5
 8006d8c:	dcf2      	bgt.n	8006d74 <_printf_i+0x214>
 8006d8e:	e7eb      	b.n	8006d68 <_printf_i+0x208>
 8006d90:	2500      	movs	r5, #0
 8006d92:	f104 0619 	add.w	r6, r4, #25
 8006d96:	e7f5      	b.n	8006d84 <_printf_i+0x224>
 8006d98:	080093ec 	.word	0x080093ec
 8006d9c:	080093fd 	.word	0x080093fd

08006da0 <std>:
 8006da0:	2300      	movs	r3, #0
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	e9c0 3300 	strd	r3, r3, [r0]
 8006daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dae:	6083      	str	r3, [r0, #8]
 8006db0:	8181      	strh	r1, [r0, #12]
 8006db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006db4:	81c2      	strh	r2, [r0, #14]
 8006db6:	6183      	str	r3, [r0, #24]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2208      	movs	r2, #8
 8006dbc:	305c      	adds	r0, #92	@ 0x5c
 8006dbe:	f000 f928 	bl	8007012 <memset>
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x58>)
 8006dc4:	6224      	str	r4, [r4, #32]
 8006dc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <std+0x5c>)
 8006dca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <std+0x60>)
 8006dce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <std+0x64>)
 8006dd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <std+0x68>)
 8006dd6:	429c      	cmp	r4, r3
 8006dd8:	d006      	beq.n	8006de8 <std+0x48>
 8006dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dde:	4294      	cmp	r4, r2
 8006de0:	d002      	beq.n	8006de8 <std+0x48>
 8006de2:	33d0      	adds	r3, #208	@ 0xd0
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d105      	bne.n	8006df4 <std+0x54>
 8006de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f000 b9e2 	b.w	80071b8 <__retarget_lock_init_recursive>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	bf00      	nop
 8006df8:	08006f8d 	.word	0x08006f8d
 8006dfc:	08006faf 	.word	0x08006faf
 8006e00:	08006fe7 	.word	0x08006fe7
 8006e04:	0800700b 	.word	0x0800700b
 8006e08:	2000136c 	.word	0x2000136c

08006e0c <stdio_exit_handler>:
 8006e0c:	4a02      	ldr	r2, [pc, #8]	@ (8006e18 <stdio_exit_handler+0xc>)
 8006e0e:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <stdio_exit_handler+0x10>)
 8006e10:	4803      	ldr	r0, [pc, #12]	@ (8006e20 <stdio_exit_handler+0x14>)
 8006e12:	f000 b869 	b.w	8006ee8 <_fwalk_sglue>
 8006e16:	bf00      	nop
 8006e18:	2000002c 	.word	0x2000002c
 8006e1c:	08008b45 	.word	0x08008b45
 8006e20:	2000003c 	.word	0x2000003c

08006e24 <cleanup_stdio>:
 8006e24:	6841      	ldr	r1, [r0, #4]
 8006e26:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <cleanup_stdio+0x34>)
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	d001      	beq.n	8006e34 <cleanup_stdio+0x10>
 8006e30:	f001 fe88 	bl	8008b44 <_fflush_r>
 8006e34:	68a1      	ldr	r1, [r4, #8]
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <cleanup_stdio+0x38>)
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	d002      	beq.n	8006e42 <cleanup_stdio+0x1e>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f001 fe81 	bl	8008b44 <_fflush_r>
 8006e42:	68e1      	ldr	r1, [r4, #12]
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <cleanup_stdio+0x3c>)
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d004      	beq.n	8006e54 <cleanup_stdio+0x30>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f001 be78 	b.w	8008b44 <_fflush_r>
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	bf00      	nop
 8006e58:	2000136c 	.word	0x2000136c
 8006e5c:	200013d4 	.word	0x200013d4
 8006e60:	2000143c 	.word	0x2000143c

08006e64 <global_stdio_init.part.0>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <global_stdio_init.part.0+0x30>)
 8006e68:	4c0b      	ldr	r4, [pc, #44]	@ (8006e98 <global_stdio_init.part.0+0x34>)
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e9c <global_stdio_init.part.0+0x38>)
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	2104      	movs	r1, #4
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7ff ff94 	bl	8006da0 <std>
 8006e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2109      	movs	r1, #9
 8006e80:	f7ff ff8e 	bl	8006da0 <std>
 8006e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e88:	2202      	movs	r2, #2
 8006e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8e:	2112      	movs	r1, #18
 8006e90:	f7ff bf86 	b.w	8006da0 <std>
 8006e94:	200014a4 	.word	0x200014a4
 8006e98:	2000136c 	.word	0x2000136c
 8006e9c:	08006e0d 	.word	0x08006e0d

08006ea0 <__sfp_lock_acquire>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	@ (8006ea8 <__sfp_lock_acquire+0x8>)
 8006ea2:	f000 b98a 	b.w	80071ba <__retarget_lock_acquire_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	200014ad 	.word	0x200014ad

08006eac <__sfp_lock_release>:
 8006eac:	4801      	ldr	r0, [pc, #4]	@ (8006eb4 <__sfp_lock_release+0x8>)
 8006eae:	f000 b985 	b.w	80071bc <__retarget_lock_release_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	200014ad 	.word	0x200014ad

08006eb8 <__sinit>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	f7ff fff0 	bl	8006ea0 <__sfp_lock_acquire>
 8006ec0:	6a23      	ldr	r3, [r4, #32]
 8006ec2:	b11b      	cbz	r3, 8006ecc <__sinit+0x14>
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f7ff bff0 	b.w	8006eac <__sfp_lock_release>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <__sinit+0x28>)
 8006ece:	6223      	str	r3, [r4, #32]
 8006ed0:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <__sinit+0x2c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f5      	bne.n	8006ec4 <__sinit+0xc>
 8006ed8:	f7ff ffc4 	bl	8006e64 <global_stdio_init.part.0>
 8006edc:	e7f2      	b.n	8006ec4 <__sinit+0xc>
 8006ede:	bf00      	nop
 8006ee0:	08006e25 	.word	0x08006e25
 8006ee4:	200014a4 	.word	0x200014a4

08006ee8 <_fwalk_sglue>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4607      	mov	r7, r0
 8006eee:	4688      	mov	r8, r1
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8006efc:	d505      	bpl.n	8006f0a <_fwalk_sglue+0x22>
 8006efe:	6824      	ldr	r4, [r4, #0]
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1f7      	bne.n	8006ef4 <_fwalk_sglue+0xc>
 8006f04:	4630      	mov	r0, r6
 8006f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d907      	bls.n	8006f20 <_fwalk_sglue+0x38>
 8006f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f14:	3301      	adds	r3, #1
 8006f16:	d003      	beq.n	8006f20 <_fwalk_sglue+0x38>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c0      	blx	r8
 8006f1e:	4306      	orrs	r6, r0
 8006f20:	3568      	adds	r5, #104	@ 0x68
 8006f22:	e7e9      	b.n	8006ef8 <_fwalk_sglue+0x10>

08006f24 <sniprintf>:
 8006f24:	b40c      	push	{r2, r3}
 8006f26:	b530      	push	{r4, r5, lr}
 8006f28:	4b17      	ldr	r3, [pc, #92]	@ (8006f88 <sniprintf+0x64>)
 8006f2a:	1e0c      	subs	r4, r1, #0
 8006f2c:	681d      	ldr	r5, [r3, #0]
 8006f2e:	b09d      	sub	sp, #116	@ 0x74
 8006f30:	da08      	bge.n	8006f44 <sniprintf+0x20>
 8006f32:	238b      	movs	r3, #139	@ 0x8b
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	b01d      	add	sp, #116	@ 0x74
 8006f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f40:	b002      	add	sp, #8
 8006f42:	4770      	bx	lr
 8006f44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f4c:	bf0c      	ite	eq
 8006f4e:	4623      	moveq	r3, r4
 8006f50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f5c:	9002      	str	r0, [sp, #8]
 8006f5e:	9006      	str	r0, [sp, #24]
 8006f60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f64:	4628      	mov	r0, r5
 8006f66:	ab21      	add	r3, sp, #132	@ 0x84
 8006f68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f6a:	a902      	add	r1, sp, #8
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	f001 fc6d 	bl	800884c <_svfiprintf_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	bfbc      	itt	lt
 8006f76:	238b      	movlt	r3, #139	@ 0x8b
 8006f78:	602b      	strlt	r3, [r5, #0]
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d0dd      	beq.n	8006f3a <sniprintf+0x16>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e7d9      	b.n	8006f3a <sniprintf+0x16>
 8006f86:	bf00      	nop
 8006f88:	20000038 	.word	0x20000038

08006f8c <__sread>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f8c2 	bl	800711c <_read_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	bfab      	itete	ge
 8006f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa0:	181b      	addge	r3, r3, r0
 8006fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fa6:	bfac      	ite	ge
 8006fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006faa:	81a3      	strhlt	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__swrite>:
 8006fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	461f      	mov	r7, r3
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	05db      	lsls	r3, r3, #23
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	d505      	bpl.n	8006fcc <__swrite+0x1e>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc8:	f000 f896 	bl	80070f8 <_lseek_r>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	4632      	mov	r2, r6
 8006fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	463b      	mov	r3, r7
 8006fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	f000 b8ad 	b.w	8007140 <_write_r>

08006fe6 <__sseek>:
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 f883 	bl	80070f8 <_lseek_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	bf15      	itete	ne
 8006ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007002:	81a3      	strheq	r3, [r4, #12]
 8007004:	bf18      	it	ne
 8007006:	81a3      	strhne	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__sclose>:
 800700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700e:	f000 b80d 	b.w	800702c <_close_r>

08007012 <memset>:
 8007012:	4603      	mov	r3, r0
 8007014:	4402      	add	r2, r0
 8007016:	4293      	cmp	r3, r2
 8007018:	d100      	bne.n	800701c <memset+0xa>
 800701a:	4770      	bx	lr
 800701c:	f803 1b01 	strb.w	r1, [r3], #1
 8007020:	e7f9      	b.n	8007016 <memset+0x4>
	...

08007024 <_localeconv_r>:
 8007024:	4800      	ldr	r0, [pc, #0]	@ (8007028 <_localeconv_r+0x4>)
 8007026:	4770      	bx	lr
 8007028:	20000178 	.word	0x20000178

0800702c <_close_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	2300      	movs	r3, #0
 8007030:	4d05      	ldr	r5, [pc, #20]	@ (8007048 <_close_r+0x1c>)
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fa fddd 	bl	8001bf6 <_close>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_close_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_close_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	200014a8 	.word	0x200014a8

0800704c <_reclaim_reent>:
 800704c:	4b29      	ldr	r3, [pc, #164]	@ (80070f4 <_reclaim_reent+0xa8>)
 800704e:	b570      	push	{r4, r5, r6, lr}
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4604      	mov	r4, r0
 8007054:	4283      	cmp	r3, r0
 8007056:	d04b      	beq.n	80070f0 <_reclaim_reent+0xa4>
 8007058:	69c3      	ldr	r3, [r0, #28]
 800705a:	b1ab      	cbz	r3, 8007088 <_reclaim_reent+0x3c>
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	b16b      	cbz	r3, 800707c <_reclaim_reent+0x30>
 8007060:	2500      	movs	r5, #0
 8007062:	69e3      	ldr	r3, [r4, #28]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	5959      	ldr	r1, [r3, r5]
 8007068:	2900      	cmp	r1, #0
 800706a:	d13b      	bne.n	80070e4 <_reclaim_reent+0x98>
 800706c:	3504      	adds	r5, #4
 800706e:	2d80      	cmp	r5, #128	@ 0x80
 8007070:	d1f7      	bne.n	8007062 <_reclaim_reent+0x16>
 8007072:	69e3      	ldr	r3, [r4, #28]
 8007074:	4620      	mov	r0, r4
 8007076:	68d9      	ldr	r1, [r3, #12]
 8007078:	f000 ff0e 	bl	8007e98 <_free_r>
 800707c:	69e3      	ldr	r3, [r4, #28]
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	b111      	cbz	r1, 8007088 <_reclaim_reent+0x3c>
 8007082:	4620      	mov	r0, r4
 8007084:	f000 ff08 	bl	8007e98 <_free_r>
 8007088:	6961      	ldr	r1, [r4, #20]
 800708a:	b111      	cbz	r1, 8007092 <_reclaim_reent+0x46>
 800708c:	4620      	mov	r0, r4
 800708e:	f000 ff03 	bl	8007e98 <_free_r>
 8007092:	69e1      	ldr	r1, [r4, #28]
 8007094:	b111      	cbz	r1, 800709c <_reclaim_reent+0x50>
 8007096:	4620      	mov	r0, r4
 8007098:	f000 fefe 	bl	8007e98 <_free_r>
 800709c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800709e:	b111      	cbz	r1, 80070a6 <_reclaim_reent+0x5a>
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 fef9 	bl	8007e98 <_free_r>
 80070a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070a8:	b111      	cbz	r1, 80070b0 <_reclaim_reent+0x64>
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fef4 	bl	8007e98 <_free_r>
 80070b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80070b2:	b111      	cbz	r1, 80070ba <_reclaim_reent+0x6e>
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 feef 	bl	8007e98 <_free_r>
 80070ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80070bc:	b111      	cbz	r1, 80070c4 <_reclaim_reent+0x78>
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 feea 	bl	8007e98 <_free_r>
 80070c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80070c6:	b111      	cbz	r1, 80070ce <_reclaim_reent+0x82>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fee5 	bl	8007e98 <_free_r>
 80070ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80070d0:	b111      	cbz	r1, 80070d8 <_reclaim_reent+0x8c>
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fee0 	bl	8007e98 <_free_r>
 80070d8:	6a23      	ldr	r3, [r4, #32]
 80070da:	b14b      	cbz	r3, 80070f0 <_reclaim_reent+0xa4>
 80070dc:	4620      	mov	r0, r4
 80070de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070e2:	4718      	bx	r3
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fed6 	bl	8007e98 <_free_r>
 80070ec:	4631      	mov	r1, r6
 80070ee:	e7bb      	b.n	8007068 <_reclaim_reent+0x1c>
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	bf00      	nop
 80070f4:	20000038 	.word	0x20000038

080070f8 <_lseek_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	2200      	movs	r2, #0
 8007102:	4d05      	ldr	r5, [pc, #20]	@ (8007118 <_lseek_r+0x20>)
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fa fd99 	bl	8001c3e <_lseek>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_lseek_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_lseek_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	200014a8 	.word	0x200014a8

0800711c <_read_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	2200      	movs	r2, #0
 8007126:	4d05      	ldr	r5, [pc, #20]	@ (800713c <_read_r+0x20>)
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fa fd2a 	bl	8001b84 <_read>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_read_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_read_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	200014a8 	.word	0x200014a8

08007140 <_write_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	2200      	movs	r2, #0
 800714a:	4d05      	ldr	r5, [pc, #20]	@ (8007160 <_write_r+0x20>)
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fa fd35 	bl	8001bbe <_write>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_write_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_write_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	200014a8 	.word	0x200014a8

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	@ (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000038 	.word	0x20000038

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	2600      	movs	r6, #0
 8007174:	4d0c      	ldr	r5, [pc, #48]	@ (80071a8 <__libc_init_array+0x38>)
 8007176:	4c0d      	ldr	r4, [pc, #52]	@ (80071ac <__libc_init_array+0x3c>)
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	42a6      	cmp	r6, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	f002 f86e 	bl	8009260 <_init>
 8007184:	2600      	movs	r6, #0
 8007186:	4d0a      	ldr	r5, [pc, #40]	@ (80071b0 <__libc_init_array+0x40>)
 8007188:	4c0a      	ldr	r4, [pc, #40]	@ (80071b4 <__libc_init_array+0x44>)
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	42a6      	cmp	r6, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f855 3b04 	ldr.w	r3, [r5], #4
 8007198:	4798      	blx	r3
 800719a:	3601      	adds	r6, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a2:	4798      	blx	r3
 80071a4:	3601      	adds	r6, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	08009750 	.word	0x08009750
 80071ac:	08009750 	.word	0x08009750
 80071b0:	08009750 	.word	0x08009750
 80071b4:	08009754 	.word	0x08009754

080071b8 <__retarget_lock_init_recursive>:
 80071b8:	4770      	bx	lr

080071ba <__retarget_lock_acquire_recursive>:
 80071ba:	4770      	bx	lr

080071bc <__retarget_lock_release_recursive>:
 80071bc:	4770      	bx	lr

080071be <memchr>:
 80071be:	4603      	mov	r3, r0
 80071c0:	b510      	push	{r4, lr}
 80071c2:	b2c9      	uxtb	r1, r1
 80071c4:	4402      	add	r2, r0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	d101      	bne.n	80071d0 <memchr+0x12>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e003      	b.n	80071d8 <memchr+0x1a>
 80071d0:	7804      	ldrb	r4, [r0, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	428c      	cmp	r4, r1
 80071d6:	d1f6      	bne.n	80071c6 <memchr+0x8>
 80071d8:	bd10      	pop	{r4, pc}

080071da <memcpy>:
 80071da:	440a      	add	r2, r1
 80071dc:	4291      	cmp	r1, r2
 80071de:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e2:	d100      	bne.n	80071e6 <memcpy+0xc>
 80071e4:	4770      	bx	lr
 80071e6:	b510      	push	{r4, lr}
 80071e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ec:	4291      	cmp	r1, r2
 80071ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f2:	d1f9      	bne.n	80071e8 <memcpy+0xe>
 80071f4:	bd10      	pop	{r4, pc}

080071f6 <quorem>:
 80071f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6903      	ldr	r3, [r0, #16]
 80071fc:	690c      	ldr	r4, [r1, #16]
 80071fe:	4607      	mov	r7, r0
 8007200:	42a3      	cmp	r3, r4
 8007202:	db7e      	blt.n	8007302 <quorem+0x10c>
 8007204:	3c01      	subs	r4, #1
 8007206:	00a3      	lsls	r3, r4, #2
 8007208:	f100 0514 	add.w	r5, r0, #20
 800720c:	f101 0814 	add.w	r8, r1, #20
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800721c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007220:	3301      	adds	r3, #1
 8007222:	429a      	cmp	r2, r3
 8007224:	fbb2 f6f3 	udiv	r6, r2, r3
 8007228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800722c:	d32e      	bcc.n	800728c <quorem+0x96>
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	46c4      	mov	ip, r8
 8007234:	46ae      	mov	lr, r5
 8007236:	46d3      	mov	fp, sl
 8007238:	f85c 3b04 	ldr.w	r3, [ip], #4
 800723c:	b298      	uxth	r0, r3
 800723e:	fb06 a000 	mla	r0, r6, r0, sl
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	0c02      	lsrs	r2, r0, #16
 8007246:	fb06 2303 	mla	r3, r6, r3, r2
 800724a:	f8de 2000 	ldr.w	r2, [lr]
 800724e:	b280      	uxth	r0, r0
 8007250:	b292      	uxth	r2, r2
 8007252:	1a12      	subs	r2, r2, r0
 8007254:	445a      	add	r2, fp
 8007256:	f8de 0000 	ldr.w	r0, [lr]
 800725a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725e:	b29b      	uxth	r3, r3
 8007260:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007264:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007268:	b292      	uxth	r2, r2
 800726a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800726e:	45e1      	cmp	r9, ip
 8007270:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007274:	f84e 2b04 	str.w	r2, [lr], #4
 8007278:	d2de      	bcs.n	8007238 <quorem+0x42>
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	58eb      	ldr	r3, [r5, r3]
 800727e:	b92b      	cbnz	r3, 800728c <quorem+0x96>
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	3b04      	subs	r3, #4
 8007284:	429d      	cmp	r5, r3
 8007286:	461a      	mov	r2, r3
 8007288:	d32f      	bcc.n	80072ea <quorem+0xf4>
 800728a:	613c      	str	r4, [r7, #16]
 800728c:	4638      	mov	r0, r7
 800728e:	f001 f979 	bl	8008584 <__mcmp>
 8007292:	2800      	cmp	r0, #0
 8007294:	db25      	blt.n	80072e2 <quorem+0xec>
 8007296:	4629      	mov	r1, r5
 8007298:	2000      	movs	r0, #0
 800729a:	f858 2b04 	ldr.w	r2, [r8], #4
 800729e:	f8d1 c000 	ldr.w	ip, [r1]
 80072a2:	fa1f fe82 	uxth.w	lr, r2
 80072a6:	fa1f f38c 	uxth.w	r3, ip
 80072aa:	eba3 030e 	sub.w	r3, r3, lr
 80072ae:	4403      	add	r3, r0
 80072b0:	0c12      	lsrs	r2, r2, #16
 80072b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c0:	45c1      	cmp	r9, r8
 80072c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072c6:	f841 3b04 	str.w	r3, [r1], #4
 80072ca:	d2e6      	bcs.n	800729a <quorem+0xa4>
 80072cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d4:	b922      	cbnz	r2, 80072e0 <quorem+0xea>
 80072d6:	3b04      	subs	r3, #4
 80072d8:	429d      	cmp	r5, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	d30b      	bcc.n	80072f6 <quorem+0x100>
 80072de:	613c      	str	r4, [r7, #16]
 80072e0:	3601      	adds	r6, #1
 80072e2:	4630      	mov	r0, r6
 80072e4:	b003      	add	sp, #12
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	3b04      	subs	r3, #4
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	d1cb      	bne.n	800728a <quorem+0x94>
 80072f2:	3c01      	subs	r4, #1
 80072f4:	e7c6      	b.n	8007284 <quorem+0x8e>
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	3b04      	subs	r3, #4
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	d1ef      	bne.n	80072de <quorem+0xe8>
 80072fe:	3c01      	subs	r4, #1
 8007300:	e7ea      	b.n	80072d8 <quorem+0xe2>
 8007302:	2000      	movs	r0, #0
 8007304:	e7ee      	b.n	80072e4 <quorem+0xee>
	...

08007308 <_dtoa_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	69c7      	ldr	r7, [r0, #28]
 8007312:	b097      	sub	sp, #92	@ 0x5c
 8007314:	4683      	mov	fp, r0
 8007316:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800731a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800731c:	b97f      	cbnz	r7, 800733e <_dtoa_r+0x36>
 800731e:	2010      	movs	r0, #16
 8007320:	f000 fe02 	bl	8007f28 <malloc>
 8007324:	4602      	mov	r2, r0
 8007326:	f8cb 001c 	str.w	r0, [fp, #28]
 800732a:	b920      	cbnz	r0, 8007336 <_dtoa_r+0x2e>
 800732c:	21ef      	movs	r1, #239	@ 0xef
 800732e:	4ba8      	ldr	r3, [pc, #672]	@ (80075d0 <_dtoa_r+0x2c8>)
 8007330:	48a8      	ldr	r0, [pc, #672]	@ (80075d4 <_dtoa_r+0x2cc>)
 8007332:	f001 fc59 	bl	8008be8 <__assert_func>
 8007336:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800733a:	6007      	str	r7, [r0, #0]
 800733c:	60c7      	str	r7, [r0, #12]
 800733e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	b159      	cbz	r1, 800735e <_dtoa_r+0x56>
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	2301      	movs	r3, #1
 800734a:	4093      	lsls	r3, r2
 800734c:	604a      	str	r2, [r1, #4]
 800734e:	608b      	str	r3, [r1, #8]
 8007350:	4658      	mov	r0, fp
 8007352:	f000 fedf 	bl	8008114 <_Bfree>
 8007356:	2200      	movs	r2, #0
 8007358:	f8db 301c 	ldr.w	r3, [fp, #28]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	1e2b      	subs	r3, r5, #0
 8007360:	bfaf      	iteee	ge
 8007362:	2300      	movge	r3, #0
 8007364:	2201      	movlt	r2, #1
 8007366:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800736a:	9303      	strlt	r3, [sp, #12]
 800736c:	bfa8      	it	ge
 800736e:	6033      	strge	r3, [r6, #0]
 8007370:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007374:	4b98      	ldr	r3, [pc, #608]	@ (80075d8 <_dtoa_r+0x2d0>)
 8007376:	bfb8      	it	lt
 8007378:	6032      	strlt	r2, [r6, #0]
 800737a:	ea33 0308 	bics.w	r3, r3, r8
 800737e:	d112      	bne.n	80073a6 <_dtoa_r+0x9e>
 8007380:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007384:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800738c:	4323      	orrs	r3, r4
 800738e:	f000 8550 	beq.w	8007e32 <_dtoa_r+0xb2a>
 8007392:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007394:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80075dc <_dtoa_r+0x2d4>
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8552 	beq.w	8007e42 <_dtoa_r+0xb3a>
 800739e:	f10a 0303 	add.w	r3, sl, #3
 80073a2:	f000 bd4c 	b.w	8007e3e <_dtoa_r+0xb36>
 80073a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	f7f9 faf7 	bl	80009a8 <__aeabi_dcmpeq>
 80073ba:	4607      	mov	r7, r0
 80073bc:	b158      	cbz	r0, 80073d6 <_dtoa_r+0xce>
 80073be:	2301      	movs	r3, #1
 80073c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073c6:	b113      	cbz	r3, 80073ce <_dtoa_r+0xc6>
 80073c8:	4b85      	ldr	r3, [pc, #532]	@ (80075e0 <_dtoa_r+0x2d8>)
 80073ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80075e4 <_dtoa_r+0x2dc>
 80073d2:	f000 bd36 	b.w	8007e42 <_dtoa_r+0xb3a>
 80073d6:	ab14      	add	r3, sp, #80	@ 0x50
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	ab15      	add	r3, sp, #84	@ 0x54
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4658      	mov	r0, fp
 80073e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073e4:	f001 f97e 	bl	80086e4 <__d2b>
 80073e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80073ec:	4681      	mov	r9, r0
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	d077      	beq.n	80074e2 <_dtoa_r+0x1da>
 80073f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007400:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007404:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007408:	9712      	str	r7, [sp, #72]	@ 0x48
 800740a:	4619      	mov	r1, r3
 800740c:	2200      	movs	r2, #0
 800740e:	4b76      	ldr	r3, [pc, #472]	@ (80075e8 <_dtoa_r+0x2e0>)
 8007410:	f7f8 feaa 	bl	8000168 <__aeabi_dsub>
 8007414:	a368      	add	r3, pc, #416	@ (adr r3, 80075b8 <_dtoa_r+0x2b0>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f9 f85d 	bl	80004d8 <__aeabi_dmul>
 800741e:	a368      	add	r3, pc, #416	@ (adr r3, 80075c0 <_dtoa_r+0x2b8>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f8 fea2 	bl	800016c <__adddf3>
 8007428:	4604      	mov	r4, r0
 800742a:	4630      	mov	r0, r6
 800742c:	460d      	mov	r5, r1
 800742e:	f7f8 ffe9 	bl	8000404 <__aeabi_i2d>
 8007432:	a365      	add	r3, pc, #404	@ (adr r3, 80075c8 <_dtoa_r+0x2c0>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 f84e 	bl	80004d8 <__aeabi_dmul>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4620      	mov	r0, r4
 8007442:	4629      	mov	r1, r5
 8007444:	f7f8 fe92 	bl	800016c <__adddf3>
 8007448:	4604      	mov	r4, r0
 800744a:	460d      	mov	r5, r1
 800744c:	f7f9 faf4 	bl	8000a38 <__aeabi_d2iz>
 8007450:	2200      	movs	r2, #0
 8007452:	4607      	mov	r7, r0
 8007454:	2300      	movs	r3, #0
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 faaf 	bl	80009bc <__aeabi_dcmplt>
 800745e:	b140      	cbz	r0, 8007472 <_dtoa_r+0x16a>
 8007460:	4638      	mov	r0, r7
 8007462:	f7f8 ffcf 	bl	8000404 <__aeabi_i2d>
 8007466:	4622      	mov	r2, r4
 8007468:	462b      	mov	r3, r5
 800746a:	f7f9 fa9d 	bl	80009a8 <__aeabi_dcmpeq>
 800746e:	b900      	cbnz	r0, 8007472 <_dtoa_r+0x16a>
 8007470:	3f01      	subs	r7, #1
 8007472:	2f16      	cmp	r7, #22
 8007474:	d853      	bhi.n	800751e <_dtoa_r+0x216>
 8007476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800747a:	4b5c      	ldr	r3, [pc, #368]	@ (80075ec <_dtoa_r+0x2e4>)
 800747c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f9 fa9a 	bl	80009bc <__aeabi_dcmplt>
 8007488:	2800      	cmp	r0, #0
 800748a:	d04a      	beq.n	8007522 <_dtoa_r+0x21a>
 800748c:	2300      	movs	r3, #0
 800748e:	3f01      	subs	r7, #1
 8007490:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007492:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007494:	1b9b      	subs	r3, r3, r6
 8007496:	1e5a      	subs	r2, r3, #1
 8007498:	bf46      	itte	mi
 800749a:	f1c3 0801 	rsbmi	r8, r3, #1
 800749e:	2300      	movmi	r3, #0
 80074a0:	f04f 0800 	movpl.w	r8, #0
 80074a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a6:	bf48      	it	mi
 80074a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80074aa:	2f00      	cmp	r7, #0
 80074ac:	db3b      	blt.n	8007526 <_dtoa_r+0x21e>
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80074b2:	443b      	add	r3, r7
 80074b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b6:	2300      	movs	r3, #0
 80074b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074bc:	2b09      	cmp	r3, #9
 80074be:	d866      	bhi.n	800758e <_dtoa_r+0x286>
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	bfc4      	itt	gt
 80074c4:	3b04      	subgt	r3, #4
 80074c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80074c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074ca:	bfc8      	it	gt
 80074cc:	2400      	movgt	r4, #0
 80074ce:	f1a3 0302 	sub.w	r3, r3, #2
 80074d2:	bfd8      	it	le
 80074d4:	2401      	movle	r4, #1
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d864      	bhi.n	80075a4 <_dtoa_r+0x29c>
 80074da:	e8df f003 	tbb	[pc, r3]
 80074de:	382b      	.short	0x382b
 80074e0:	5636      	.short	0x5636
 80074e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074e6:	441e      	add	r6, r3
 80074e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	bfc1      	itttt	gt
 80074f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80074f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007500:	bfd6      	itet	le
 8007502:	f1c3 0320 	rsble	r3, r3, #32
 8007506:	ea48 0003 	orrgt.w	r0, r8, r3
 800750a:	fa04 f003 	lslle.w	r0, r4, r3
 800750e:	f7f8 ff69 	bl	80003e4 <__aeabi_ui2d>
 8007512:	2201      	movs	r2, #1
 8007514:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007518:	3e01      	subs	r6, #1
 800751a:	9212      	str	r2, [sp, #72]	@ 0x48
 800751c:	e775      	b.n	800740a <_dtoa_r+0x102>
 800751e:	2301      	movs	r3, #1
 8007520:	e7b6      	b.n	8007490 <_dtoa_r+0x188>
 8007522:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007524:	e7b5      	b.n	8007492 <_dtoa_r+0x18a>
 8007526:	427b      	negs	r3, r7
 8007528:	930a      	str	r3, [sp, #40]	@ 0x28
 800752a:	2300      	movs	r3, #0
 800752c:	eba8 0807 	sub.w	r8, r8, r7
 8007530:	930e      	str	r3, [sp, #56]	@ 0x38
 8007532:	e7c2      	b.n	80074ba <_dtoa_r+0x1b2>
 8007534:	2300      	movs	r3, #0
 8007536:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007538:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800753a:	2b00      	cmp	r3, #0
 800753c:	dc35      	bgt.n	80075aa <_dtoa_r+0x2a2>
 800753e:	2301      	movs	r3, #1
 8007540:	461a      	mov	r2, r3
 8007542:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007546:	9221      	str	r2, [sp, #132]	@ 0x84
 8007548:	e00b      	b.n	8007562 <_dtoa_r+0x25a>
 800754a:	2301      	movs	r3, #1
 800754c:	e7f3      	b.n	8007536 <_dtoa_r+0x22e>
 800754e:	2300      	movs	r3, #0
 8007550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	3301      	adds	r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	9307      	str	r3, [sp, #28]
 800755e:	bfb8      	it	lt
 8007560:	2301      	movlt	r3, #1
 8007562:	2100      	movs	r1, #0
 8007564:	2204      	movs	r2, #4
 8007566:	f8db 001c 	ldr.w	r0, [fp, #28]
 800756a:	f102 0514 	add.w	r5, r2, #20
 800756e:	429d      	cmp	r5, r3
 8007570:	d91f      	bls.n	80075b2 <_dtoa_r+0x2aa>
 8007572:	6041      	str	r1, [r0, #4]
 8007574:	4658      	mov	r0, fp
 8007576:	f000 fd8d 	bl	8008094 <_Balloc>
 800757a:	4682      	mov	sl, r0
 800757c:	2800      	cmp	r0, #0
 800757e:	d139      	bne.n	80075f4 <_dtoa_r+0x2ec>
 8007580:	4602      	mov	r2, r0
 8007582:	f240 11af 	movw	r1, #431	@ 0x1af
 8007586:	4b1a      	ldr	r3, [pc, #104]	@ (80075f0 <_dtoa_r+0x2e8>)
 8007588:	e6d2      	b.n	8007330 <_dtoa_r+0x28>
 800758a:	2301      	movs	r3, #1
 800758c:	e7e0      	b.n	8007550 <_dtoa_r+0x248>
 800758e:	2401      	movs	r4, #1
 8007590:	2300      	movs	r3, #0
 8007592:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007594:	9320      	str	r3, [sp, #128]	@ 0x80
 8007596:	f04f 33ff 	mov.w	r3, #4294967295
 800759a:	2200      	movs	r2, #0
 800759c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075a0:	2312      	movs	r3, #18
 80075a2:	e7d0      	b.n	8007546 <_dtoa_r+0x23e>
 80075a4:	2301      	movs	r3, #1
 80075a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075a8:	e7f5      	b.n	8007596 <_dtoa_r+0x28e>
 80075aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075b0:	e7d7      	b.n	8007562 <_dtoa_r+0x25a>
 80075b2:	3101      	adds	r1, #1
 80075b4:	0052      	lsls	r2, r2, #1
 80075b6:	e7d8      	b.n	800756a <_dtoa_r+0x262>
 80075b8:	636f4361 	.word	0x636f4361
 80075bc:	3fd287a7 	.word	0x3fd287a7
 80075c0:	8b60c8b3 	.word	0x8b60c8b3
 80075c4:	3fc68a28 	.word	0x3fc68a28
 80075c8:	509f79fb 	.word	0x509f79fb
 80075cc:	3fd34413 	.word	0x3fd34413
 80075d0:	0800941b 	.word	0x0800941b
 80075d4:	08009432 	.word	0x08009432
 80075d8:	7ff00000 	.word	0x7ff00000
 80075dc:	08009417 	.word	0x08009417
 80075e0:	080093eb 	.word	0x080093eb
 80075e4:	080093ea 	.word	0x080093ea
 80075e8:	3ff80000 	.word	0x3ff80000
 80075ec:	08009528 	.word	0x08009528
 80075f0:	0800948a 	.word	0x0800948a
 80075f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075f8:	6018      	str	r0, [r3, #0]
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b0e      	cmp	r3, #14
 80075fe:	f200 80a4 	bhi.w	800774a <_dtoa_r+0x442>
 8007602:	2c00      	cmp	r4, #0
 8007604:	f000 80a1 	beq.w	800774a <_dtoa_r+0x442>
 8007608:	2f00      	cmp	r7, #0
 800760a:	dd33      	ble.n	8007674 <_dtoa_r+0x36c>
 800760c:	4b86      	ldr	r3, [pc, #536]	@ (8007828 <_dtoa_r+0x520>)
 800760e:	f007 020f 	and.w	r2, r7, #15
 8007612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007616:	05f8      	lsls	r0, r7, #23
 8007618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800761c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007620:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007624:	d516      	bpl.n	8007654 <_dtoa_r+0x34c>
 8007626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800762a:	4b80      	ldr	r3, [pc, #512]	@ (800782c <_dtoa_r+0x524>)
 800762c:	2603      	movs	r6, #3
 800762e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007632:	f7f9 f87b 	bl	800072c <__aeabi_ddiv>
 8007636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763a:	f004 040f 	and.w	r4, r4, #15
 800763e:	4d7b      	ldr	r5, [pc, #492]	@ (800782c <_dtoa_r+0x524>)
 8007640:	b954      	cbnz	r4, 8007658 <_dtoa_r+0x350>
 8007642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764a:	f7f9 f86f 	bl	800072c <__aeabi_ddiv>
 800764e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007652:	e028      	b.n	80076a6 <_dtoa_r+0x39e>
 8007654:	2602      	movs	r6, #2
 8007656:	e7f2      	b.n	800763e <_dtoa_r+0x336>
 8007658:	07e1      	lsls	r1, r4, #31
 800765a:	d508      	bpl.n	800766e <_dtoa_r+0x366>
 800765c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007660:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007664:	f7f8 ff38 	bl	80004d8 <__aeabi_dmul>
 8007668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800766c:	3601      	adds	r6, #1
 800766e:	1064      	asrs	r4, r4, #1
 8007670:	3508      	adds	r5, #8
 8007672:	e7e5      	b.n	8007640 <_dtoa_r+0x338>
 8007674:	f000 80d2 	beq.w	800781c <_dtoa_r+0x514>
 8007678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800767c:	427c      	negs	r4, r7
 800767e:	4b6a      	ldr	r3, [pc, #424]	@ (8007828 <_dtoa_r+0x520>)
 8007680:	f004 020f 	and.w	r2, r4, #15
 8007684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 ff24 	bl	80004d8 <__aeabi_dmul>
 8007690:	2602      	movs	r6, #2
 8007692:	2300      	movs	r3, #0
 8007694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007698:	4d64      	ldr	r5, [pc, #400]	@ (800782c <_dtoa_r+0x524>)
 800769a:	1124      	asrs	r4, r4, #4
 800769c:	2c00      	cmp	r4, #0
 800769e:	f040 80b2 	bne.w	8007806 <_dtoa_r+0x4fe>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1d3      	bne.n	800764e <_dtoa_r+0x346>
 80076a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80b7 	beq.w	8007820 <_dtoa_r+0x518>
 80076b2:	2200      	movs	r2, #0
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007830 <_dtoa_r+0x528>)
 80076ba:	f7f9 f97f 	bl	80009bc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f000 80ae 	beq.w	8007820 <_dtoa_r+0x518>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80aa 	beq.w	8007820 <_dtoa_r+0x518>
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dd37      	ble.n	8007742 <_dtoa_r+0x43a>
 80076d2:	1e7b      	subs	r3, r7, #1
 80076d4:	4620      	mov	r0, r4
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	2200      	movs	r2, #0
 80076da:	4629      	mov	r1, r5
 80076dc:	4b55      	ldr	r3, [pc, #340]	@ (8007834 <_dtoa_r+0x52c>)
 80076de:	f7f8 fefb 	bl	80004d8 <__aeabi_dmul>
 80076e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e6:	9c08      	ldr	r4, [sp, #32]
 80076e8:	3601      	adds	r6, #1
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7f8 fe8a 	bl	8000404 <__aeabi_i2d>
 80076f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076f4:	f7f8 fef0 	bl	80004d8 <__aeabi_dmul>
 80076f8:	2200      	movs	r2, #0
 80076fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007838 <_dtoa_r+0x530>)
 80076fc:	f7f8 fd36 	bl	800016c <__adddf3>
 8007700:	4605      	mov	r5, r0
 8007702:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007706:	2c00      	cmp	r4, #0
 8007708:	f040 809a 	bne.w	8007840 <_dtoa_r+0x538>
 800770c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	4b4a      	ldr	r3, [pc, #296]	@ (800783c <_dtoa_r+0x534>)
 8007714:	f7f8 fd28 	bl	8000168 <__aeabi_dsub>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007720:	462a      	mov	r2, r5
 8007722:	4633      	mov	r3, r6
 8007724:	f7f9 f968 	bl	80009f8 <__aeabi_dcmpgt>
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 828e 	bne.w	8007c4a <_dtoa_r+0x942>
 800772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007732:	462a      	mov	r2, r5
 8007734:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007738:	f7f9 f940 	bl	80009bc <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	f040 8127 	bne.w	8007990 <_dtoa_r+0x688>
 8007742:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007746:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800774a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800774c:	2b00      	cmp	r3, #0
 800774e:	f2c0 8163 	blt.w	8007a18 <_dtoa_r+0x710>
 8007752:	2f0e      	cmp	r7, #14
 8007754:	f300 8160 	bgt.w	8007a18 <_dtoa_r+0x710>
 8007758:	4b33      	ldr	r3, [pc, #204]	@ (8007828 <_dtoa_r+0x520>)
 800775a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800775e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007762:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007766:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007768:	2b00      	cmp	r3, #0
 800776a:	da03      	bge.n	8007774 <_dtoa_r+0x46c>
 800776c:	9b07      	ldr	r3, [sp, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f340 8100 	ble.w	8007974 <_dtoa_r+0x66c>
 8007774:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007778:	4656      	mov	r6, sl
 800777a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 ffd3 	bl	800072c <__aeabi_ddiv>
 8007786:	f7f9 f957 	bl	8000a38 <__aeabi_d2iz>
 800778a:	4680      	mov	r8, r0
 800778c:	f7f8 fe3a 	bl	8000404 <__aeabi_i2d>
 8007790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007794:	f7f8 fea0 	bl	80004d8 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fce2 	bl	8000168 <__aeabi_dsub>
 80077a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077a8:	9d07      	ldr	r5, [sp, #28]
 80077aa:	f806 4b01 	strb.w	r4, [r6], #1
 80077ae:	eba6 040a 	sub.w	r4, r6, sl
 80077b2:	42a5      	cmp	r5, r4
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	f040 8116 	bne.w	80079e8 <_dtoa_r+0x6e0>
 80077bc:	f7f8 fcd6 	bl	800016c <__adddf3>
 80077c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c4:	4604      	mov	r4, r0
 80077c6:	460d      	mov	r5, r1
 80077c8:	f7f9 f916 	bl	80009f8 <__aeabi_dcmpgt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f040 80f8 	bne.w	80079c2 <_dtoa_r+0x6ba>
 80077d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f9 f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80077de:	b118      	cbz	r0, 80077e8 <_dtoa_r+0x4e0>
 80077e0:	f018 0f01 	tst.w	r8, #1
 80077e4:	f040 80ed 	bne.w	80079c2 <_dtoa_r+0x6ba>
 80077e8:	4649      	mov	r1, r9
 80077ea:	4658      	mov	r0, fp
 80077ec:	f000 fc92 	bl	8008114 <_Bfree>
 80077f0:	2300      	movs	r3, #0
 80077f2:	7033      	strb	r3, [r6, #0]
 80077f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077f6:	3701      	adds	r7, #1
 80077f8:	601f      	str	r7, [r3, #0]
 80077fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8320 	beq.w	8007e42 <_dtoa_r+0xb3a>
 8007802:	601e      	str	r6, [r3, #0]
 8007804:	e31d      	b.n	8007e42 <_dtoa_r+0xb3a>
 8007806:	07e2      	lsls	r2, r4, #31
 8007808:	d505      	bpl.n	8007816 <_dtoa_r+0x50e>
 800780a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800780e:	f7f8 fe63 	bl	80004d8 <__aeabi_dmul>
 8007812:	2301      	movs	r3, #1
 8007814:	3601      	adds	r6, #1
 8007816:	1064      	asrs	r4, r4, #1
 8007818:	3508      	adds	r5, #8
 800781a:	e73f      	b.n	800769c <_dtoa_r+0x394>
 800781c:	2602      	movs	r6, #2
 800781e:	e742      	b.n	80076a6 <_dtoa_r+0x39e>
 8007820:	9c07      	ldr	r4, [sp, #28]
 8007822:	9704      	str	r7, [sp, #16]
 8007824:	e761      	b.n	80076ea <_dtoa_r+0x3e2>
 8007826:	bf00      	nop
 8007828:	08009528 	.word	0x08009528
 800782c:	08009500 	.word	0x08009500
 8007830:	3ff00000 	.word	0x3ff00000
 8007834:	40240000 	.word	0x40240000
 8007838:	401c0000 	.word	0x401c0000
 800783c:	40140000 	.word	0x40140000
 8007840:	4b70      	ldr	r3, [pc, #448]	@ (8007a04 <_dtoa_r+0x6fc>)
 8007842:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007848:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800784c:	4454      	add	r4, sl
 800784e:	2900      	cmp	r1, #0
 8007850:	d045      	beq.n	80078de <_dtoa_r+0x5d6>
 8007852:	2000      	movs	r0, #0
 8007854:	496c      	ldr	r1, [pc, #432]	@ (8007a08 <_dtoa_r+0x700>)
 8007856:	f7f8 ff69 	bl	800072c <__aeabi_ddiv>
 800785a:	4633      	mov	r3, r6
 800785c:	462a      	mov	r2, r5
 800785e:	f7f8 fc83 	bl	8000168 <__aeabi_dsub>
 8007862:	4656      	mov	r6, sl
 8007864:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800786c:	f7f9 f8e4 	bl	8000a38 <__aeabi_d2iz>
 8007870:	4605      	mov	r5, r0
 8007872:	f7f8 fdc7 	bl	8000404 <__aeabi_i2d>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787e:	f7f8 fc73 	bl	8000168 <__aeabi_dsub>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	3530      	adds	r5, #48	@ 0x30
 8007888:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800788c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007890:	f806 5b01 	strb.w	r5, [r6], #1
 8007894:	f7f9 f892 	bl	80009bc <__aeabi_dcmplt>
 8007898:	2800      	cmp	r0, #0
 800789a:	d163      	bne.n	8007964 <_dtoa_r+0x65c>
 800789c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a0:	2000      	movs	r0, #0
 80078a2:	495a      	ldr	r1, [pc, #360]	@ (8007a0c <_dtoa_r+0x704>)
 80078a4:	f7f8 fc60 	bl	8000168 <__aeabi_dsub>
 80078a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078ac:	f7f9 f886 	bl	80009bc <__aeabi_dcmplt>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f040 8087 	bne.w	80079c4 <_dtoa_r+0x6bc>
 80078b6:	42a6      	cmp	r6, r4
 80078b8:	f43f af43 	beq.w	8007742 <_dtoa_r+0x43a>
 80078bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078c0:	2200      	movs	r2, #0
 80078c2:	4b53      	ldr	r3, [pc, #332]	@ (8007a10 <_dtoa_r+0x708>)
 80078c4:	f7f8 fe08 	bl	80004d8 <__aeabi_dmul>
 80078c8:	2200      	movs	r2, #0
 80078ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007a10 <_dtoa_r+0x708>)
 80078d4:	f7f8 fe00 	bl	80004d8 <__aeabi_dmul>
 80078d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078dc:	e7c4      	b.n	8007868 <_dtoa_r+0x560>
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7f8 fdf9 	bl	80004d8 <__aeabi_dmul>
 80078e6:	4656      	mov	r6, sl
 80078e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f2:	f7f9 f8a1 	bl	8000a38 <__aeabi_d2iz>
 80078f6:	4605      	mov	r5, r0
 80078f8:	f7f8 fd84 	bl	8000404 <__aeabi_i2d>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007904:	f7f8 fc30 	bl	8000168 <__aeabi_dsub>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	3530      	adds	r5, #48	@ 0x30
 800790e:	f806 5b01 	strb.w	r5, [r6], #1
 8007912:	42a6      	cmp	r6, r4
 8007914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	d124      	bne.n	8007968 <_dtoa_r+0x660>
 800791e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007922:	4b39      	ldr	r3, [pc, #228]	@ (8007a08 <_dtoa_r+0x700>)
 8007924:	f7f8 fc22 	bl	800016c <__adddf3>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007930:	f7f9 f862 	bl	80009f8 <__aeabi_dcmpgt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d145      	bne.n	80079c4 <_dtoa_r+0x6bc>
 8007938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800793c:	2000      	movs	r0, #0
 800793e:	4932      	ldr	r1, [pc, #200]	@ (8007a08 <_dtoa_r+0x700>)
 8007940:	f7f8 fc12 	bl	8000168 <__aeabi_dsub>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794c:	f7f9 f836 	bl	80009bc <__aeabi_dcmplt>
 8007950:	2800      	cmp	r0, #0
 8007952:	f43f aef6 	beq.w	8007742 <_dtoa_r+0x43a>
 8007956:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007958:	1e73      	subs	r3, r6, #1
 800795a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800795c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007960:	2b30      	cmp	r3, #48	@ 0x30
 8007962:	d0f8      	beq.n	8007956 <_dtoa_r+0x64e>
 8007964:	9f04      	ldr	r7, [sp, #16]
 8007966:	e73f      	b.n	80077e8 <_dtoa_r+0x4e0>
 8007968:	4b29      	ldr	r3, [pc, #164]	@ (8007a10 <_dtoa_r+0x708>)
 800796a:	f7f8 fdb5 	bl	80004d8 <__aeabi_dmul>
 800796e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007972:	e7bc      	b.n	80078ee <_dtoa_r+0x5e6>
 8007974:	d10c      	bne.n	8007990 <_dtoa_r+0x688>
 8007976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800797a:	2200      	movs	r2, #0
 800797c:	4b25      	ldr	r3, [pc, #148]	@ (8007a14 <_dtoa_r+0x70c>)
 800797e:	f7f8 fdab 	bl	80004d8 <__aeabi_dmul>
 8007982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007986:	f7f9 f82d 	bl	80009e4 <__aeabi_dcmpge>
 800798a:	2800      	cmp	r0, #0
 800798c:	f000 815b 	beq.w	8007c46 <_dtoa_r+0x93e>
 8007990:	2400      	movs	r4, #0
 8007992:	4625      	mov	r5, r4
 8007994:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007996:	4656      	mov	r6, sl
 8007998:	43db      	mvns	r3, r3
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	2700      	movs	r7, #0
 800799e:	4621      	mov	r1, r4
 80079a0:	4658      	mov	r0, fp
 80079a2:	f000 fbb7 	bl	8008114 <_Bfree>
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d0dc      	beq.n	8007964 <_dtoa_r+0x65c>
 80079aa:	b12f      	cbz	r7, 80079b8 <_dtoa_r+0x6b0>
 80079ac:	42af      	cmp	r7, r5
 80079ae:	d003      	beq.n	80079b8 <_dtoa_r+0x6b0>
 80079b0:	4639      	mov	r1, r7
 80079b2:	4658      	mov	r0, fp
 80079b4:	f000 fbae 	bl	8008114 <_Bfree>
 80079b8:	4629      	mov	r1, r5
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fbaa 	bl	8008114 <_Bfree>
 80079c0:	e7d0      	b.n	8007964 <_dtoa_r+0x65c>
 80079c2:	9704      	str	r7, [sp, #16]
 80079c4:	4633      	mov	r3, r6
 80079c6:	461e      	mov	r6, r3
 80079c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079cc:	2a39      	cmp	r2, #57	@ 0x39
 80079ce:	d107      	bne.n	80079e0 <_dtoa_r+0x6d8>
 80079d0:	459a      	cmp	sl, r3
 80079d2:	d1f8      	bne.n	80079c6 <_dtoa_r+0x6be>
 80079d4:	9a04      	ldr	r2, [sp, #16]
 80079d6:	3201      	adds	r2, #1
 80079d8:	9204      	str	r2, [sp, #16]
 80079da:	2230      	movs	r2, #48	@ 0x30
 80079dc:	f88a 2000 	strb.w	r2, [sl]
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	3201      	adds	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e7bd      	b.n	8007964 <_dtoa_r+0x65c>
 80079e8:	2200      	movs	r2, #0
 80079ea:	4b09      	ldr	r3, [pc, #36]	@ (8007a10 <_dtoa_r+0x708>)
 80079ec:	f7f8 fd74 	bl	80004d8 <__aeabi_dmul>
 80079f0:	2200      	movs	r2, #0
 80079f2:	2300      	movs	r3, #0
 80079f4:	4604      	mov	r4, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	f7f8 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f43f aebc 	beq.w	800777a <_dtoa_r+0x472>
 8007a02:	e6f1      	b.n	80077e8 <_dtoa_r+0x4e0>
 8007a04:	08009528 	.word	0x08009528
 8007a08:	3fe00000 	.word	0x3fe00000
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	40240000 	.word	0x40240000
 8007a14:	40140000 	.word	0x40140000
 8007a18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	f000 80db 	beq.w	8007bd6 <_dtoa_r+0x8ce>
 8007a20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a22:	2a01      	cmp	r2, #1
 8007a24:	f300 80bf 	bgt.w	8007ba6 <_dtoa_r+0x89e>
 8007a28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	f000 80b7 	beq.w	8007b9e <_dtoa_r+0x896>
 8007a30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a34:	4646      	mov	r6, r8
 8007a36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	441a      	add	r2, r3
 8007a3e:	4658      	mov	r0, fp
 8007a40:	4498      	add	r8, r3
 8007a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a44:	f000 fc1a 	bl	800827c <__i2b>
 8007a48:	4605      	mov	r5, r0
 8007a4a:	b15e      	cbz	r6, 8007a64 <_dtoa_r+0x75c>
 8007a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd08      	ble.n	8007a64 <_dtoa_r+0x75c>
 8007a52:	42b3      	cmp	r3, r6
 8007a54:	bfa8      	it	ge
 8007a56:	4633      	movge	r3, r6
 8007a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a5a:	eba8 0803 	sub.w	r8, r8, r3
 8007a5e:	1af6      	subs	r6, r6, r3
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a66:	b1f3      	cbz	r3, 8007aa6 <_dtoa_r+0x79e>
 8007a68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80b7 	beq.w	8007bde <_dtoa_r+0x8d6>
 8007a70:	b18c      	cbz	r4, 8007a96 <_dtoa_r+0x78e>
 8007a72:	4629      	mov	r1, r5
 8007a74:	4622      	mov	r2, r4
 8007a76:	4658      	mov	r0, fp
 8007a78:	f000 fcbe 	bl	80083f8 <__pow5mult>
 8007a7c:	464a      	mov	r2, r9
 8007a7e:	4601      	mov	r1, r0
 8007a80:	4605      	mov	r5, r0
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 fc10 	bl	80082a8 <__multiply>
 8007a88:	4649      	mov	r1, r9
 8007a8a:	9004      	str	r0, [sp, #16]
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f000 fb41 	bl	8008114 <_Bfree>
 8007a92:	9b04      	ldr	r3, [sp, #16]
 8007a94:	4699      	mov	r9, r3
 8007a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a98:	1b1a      	subs	r2, r3, r4
 8007a9a:	d004      	beq.n	8007aa6 <_dtoa_r+0x79e>
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f000 fcaa 	bl	80083f8 <__pow5mult>
 8007aa4:	4681      	mov	r9, r0
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4658      	mov	r0, fp
 8007aaa:	f000 fbe7 	bl	800827c <__i2b>
 8007aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 81c9 	beq.w	8007e4a <_dtoa_r+0xb42>
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4601      	mov	r1, r0
 8007abc:	4658      	mov	r0, fp
 8007abe:	f000 fc9b 	bl	80083f8 <__pow5mult>
 8007ac2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	f300 808f 	bgt.w	8007bea <_dtoa_r+0x8e2>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 8087 	bne.w	8007be2 <_dtoa_r+0x8da>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 8083 	bne.w	8007be6 <_dtoa_r+0x8de>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ae6:	0d1b      	lsrs	r3, r3, #20
 8007ae8:	051b      	lsls	r3, r3, #20
 8007aea:	b12b      	cbz	r3, 8007af8 <_dtoa_r+0x7f0>
 8007aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aee:	f108 0801 	add.w	r8, r8, #1
 8007af2:	3301      	adds	r3, #1
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	2301      	movs	r3, #1
 8007af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 81aa 	beq.w	8007e56 <_dtoa_r+0xb4e>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b08:	6918      	ldr	r0, [r3, #16]
 8007b0a:	f000 fb6b 	bl	80081e4 <__hi0bits>
 8007b0e:	f1c0 0020 	rsb	r0, r0, #32
 8007b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b14:	4418      	add	r0, r3
 8007b16:	f010 001f 	ands.w	r0, r0, #31
 8007b1a:	d071      	beq.n	8007c00 <_dtoa_r+0x8f8>
 8007b1c:	f1c0 0320 	rsb	r3, r0, #32
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	dd65      	ble.n	8007bf0 <_dtoa_r+0x8e8>
 8007b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b26:	f1c0 001c 	rsb	r0, r0, #28
 8007b2a:	4403      	add	r3, r0
 8007b2c:	4480      	add	r8, r0
 8007b2e:	4406      	add	r6, r0
 8007b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b32:	f1b8 0f00 	cmp.w	r8, #0
 8007b36:	dd05      	ble.n	8007b44 <_dtoa_r+0x83c>
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	f000 fcb5 	bl	80084ac <__lshift>
 8007b42:	4681      	mov	r9, r0
 8007b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd05      	ble.n	8007b56 <_dtoa_r+0x84e>
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f000 fcac 	bl	80084ac <__lshift>
 8007b54:	4604      	mov	r4, r0
 8007b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d053      	beq.n	8007c04 <_dtoa_r+0x8fc>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f000 fd10 	bl	8008584 <__mcmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	da4d      	bge.n	8007c04 <_dtoa_r+0x8fc>
 8007b68:	1e7b      	subs	r3, r7, #1
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	220a      	movs	r2, #10
 8007b70:	2300      	movs	r3, #0
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 faf0 	bl	8008158 <__multadd>
 8007b78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b7a:	4681      	mov	r9, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 816c 	beq.w	8007e5a <_dtoa_r+0xb52>
 8007b82:	2300      	movs	r3, #0
 8007b84:	4629      	mov	r1, r5
 8007b86:	220a      	movs	r2, #10
 8007b88:	4658      	mov	r0, fp
 8007b8a:	f000 fae5 	bl	8008158 <__multadd>
 8007b8e:	9b08      	ldr	r3, [sp, #32]
 8007b90:	4605      	mov	r5, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc61      	bgt.n	8007c5a <_dtoa_r+0x952>
 8007b96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	dc3b      	bgt.n	8007c14 <_dtoa_r+0x90c>
 8007b9c:	e05d      	b.n	8007c5a <_dtoa_r+0x952>
 8007b9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ba0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ba4:	e746      	b.n	8007a34 <_dtoa_r+0x72c>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	1e5c      	subs	r4, r3, #1
 8007baa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	bfbf      	itttt	lt
 8007bb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007bb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007bb4:	1ae3      	sublt	r3, r4, r3
 8007bb6:	18d2      	addlt	r2, r2, r3
 8007bb8:	bfa8      	it	ge
 8007bba:	1b1c      	subge	r4, r3, r4
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	bfbe      	ittt	lt
 8007bc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007bc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007bc4:	2400      	movlt	r4, #0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb5      	itete	lt
 8007bca:	eba8 0603 	sublt.w	r6, r8, r3
 8007bce:	4646      	movge	r6, r8
 8007bd0:	2300      	movlt	r3, #0
 8007bd2:	9b07      	ldrge	r3, [sp, #28]
 8007bd4:	e730      	b.n	8007a38 <_dtoa_r+0x730>
 8007bd6:	4646      	mov	r6, r8
 8007bd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007bdc:	e735      	b.n	8007a4a <_dtoa_r+0x742>
 8007bde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007be0:	e75c      	b.n	8007a9c <_dtoa_r+0x794>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e788      	b.n	8007af8 <_dtoa_r+0x7f0>
 8007be6:	9b02      	ldr	r3, [sp, #8]
 8007be8:	e786      	b.n	8007af8 <_dtoa_r+0x7f0>
 8007bea:	2300      	movs	r3, #0
 8007bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bee:	e788      	b.n	8007b02 <_dtoa_r+0x7fa>
 8007bf0:	d09f      	beq.n	8007b32 <_dtoa_r+0x82a>
 8007bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bf4:	331c      	adds	r3, #28
 8007bf6:	441a      	add	r2, r3
 8007bf8:	4498      	add	r8, r3
 8007bfa:	441e      	add	r6, r3
 8007bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfe:	e798      	b.n	8007b32 <_dtoa_r+0x82a>
 8007c00:	4603      	mov	r3, r0
 8007c02:	e7f6      	b.n	8007bf2 <_dtoa_r+0x8ea>
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	9704      	str	r7, [sp, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc20      	bgt.n	8007c4e <_dtoa_r+0x946>
 8007c0c:	9308      	str	r3, [sp, #32]
 8007c0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	dd1e      	ble.n	8007c52 <_dtoa_r+0x94a>
 8007c14:	9b08      	ldr	r3, [sp, #32]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f47f aebc 	bne.w	8007994 <_dtoa_r+0x68c>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	2205      	movs	r2, #5
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 fa99 	bl	8008158 <__multadd>
 8007c26:	4601      	mov	r1, r0
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4648      	mov	r0, r9
 8007c2c:	f000 fcaa 	bl	8008584 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f77f aeaf 	ble.w	8007994 <_dtoa_r+0x68c>
 8007c36:	2331      	movs	r3, #49	@ 0x31
 8007c38:	4656      	mov	r6, sl
 8007c3a:	f806 3b01 	strb.w	r3, [r6], #1
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	3301      	adds	r3, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	e6aa      	b.n	800799c <_dtoa_r+0x694>
 8007c46:	9c07      	ldr	r4, [sp, #28]
 8007c48:	9704      	str	r7, [sp, #16]
 8007c4a:	4625      	mov	r5, r4
 8007c4c:	e7f3      	b.n	8007c36 <_dtoa_r+0x92e>
 8007c4e:	9b07      	ldr	r3, [sp, #28]
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8104 	beq.w	8007e62 <_dtoa_r+0xb5a>
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	dd05      	ble.n	8007c6a <_dtoa_r+0x962>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4632      	mov	r2, r6
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 fc22 	bl	80084ac <__lshift>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05a      	beq.n	8007d26 <_dtoa_r+0xa1e>
 8007c70:	4658      	mov	r0, fp
 8007c72:	6869      	ldr	r1, [r5, #4]
 8007c74:	f000 fa0e 	bl	8008094 <_Balloc>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	b928      	cbnz	r0, 8007c88 <_dtoa_r+0x980>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c82:	4b83      	ldr	r3, [pc, #524]	@ (8007e90 <_dtoa_r+0xb88>)
 8007c84:	f7ff bb54 	b.w	8007330 <_dtoa_r+0x28>
 8007c88:	692a      	ldr	r2, [r5, #16]
 8007c8a:	f105 010c 	add.w	r1, r5, #12
 8007c8e:	3202      	adds	r2, #2
 8007c90:	0092      	lsls	r2, r2, #2
 8007c92:	300c      	adds	r0, #12
 8007c94:	f7ff faa1 	bl	80071da <memcpy>
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fc05 	bl	80084ac <__lshift>
 8007ca2:	462f      	mov	r7, r5
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	f10a 0301 	add.w	r3, sl, #1
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	9b08      	ldr	r3, [sp, #32]
 8007cae:	4453      	add	r3, sl
 8007cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4648      	mov	r0, r9
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	f7ff fa97 	bl	80071f6 <quorem>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	9008      	str	r0, [sp, #32]
 8007ccc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cd0:	4648      	mov	r0, r9
 8007cd2:	f000 fc57 	bl	8008584 <__mcmp>
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4658      	mov	r0, fp
 8007cde:	f000 fc6d 	bl	80085bc <__mdiff>
 8007ce2:	68c2      	ldr	r2, [r0, #12]
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	bb02      	cbnz	r2, 8007d2a <_dtoa_r+0xa22>
 8007ce8:	4601      	mov	r1, r0
 8007cea:	4648      	mov	r0, r9
 8007cec:	f000 fc4a 	bl	8008584 <__mcmp>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4658      	mov	r0, fp
 8007cf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cf8:	f000 fa0c 	bl	8008114 <_Bfree>
 8007cfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d00:	9e07      	ldr	r6, [sp, #28]
 8007d02:	ea43 0102 	orr.w	r1, r3, r2
 8007d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d08:	4319      	orrs	r1, r3
 8007d0a:	d110      	bne.n	8007d2e <_dtoa_r+0xa26>
 8007d0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d10:	d029      	beq.n	8007d66 <_dtoa_r+0xa5e>
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dd02      	ble.n	8007d1e <_dtoa_r+0xa16>
 8007d18:	9b08      	ldr	r3, [sp, #32]
 8007d1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	f883 8000 	strb.w	r8, [r3]
 8007d24:	e63b      	b.n	800799e <_dtoa_r+0x696>
 8007d26:	4628      	mov	r0, r5
 8007d28:	e7bb      	b.n	8007ca2 <_dtoa_r+0x99a>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	e7e1      	b.n	8007cf2 <_dtoa_r+0x9ea>
 8007d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	db04      	blt.n	8007d3e <_dtoa_r+0xa36>
 8007d34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007d36:	430b      	orrs	r3, r1
 8007d38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	d120      	bne.n	8007d80 <_dtoa_r+0xa78>
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	dded      	ble.n	8007d1e <_dtoa_r+0xa16>
 8007d42:	4649      	mov	r1, r9
 8007d44:	2201      	movs	r2, #1
 8007d46:	4658      	mov	r0, fp
 8007d48:	f000 fbb0 	bl	80084ac <__lshift>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4681      	mov	r9, r0
 8007d50:	f000 fc18 	bl	8008584 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	dc03      	bgt.n	8007d60 <_dtoa_r+0xa58>
 8007d58:	d1e1      	bne.n	8007d1e <_dtoa_r+0xa16>
 8007d5a:	f018 0f01 	tst.w	r8, #1
 8007d5e:	d0de      	beq.n	8007d1e <_dtoa_r+0xa16>
 8007d60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d64:	d1d8      	bne.n	8007d18 <_dtoa_r+0xa10>
 8007d66:	2339      	movs	r3, #57	@ 0x39
 8007d68:	9a02      	ldr	r2, [sp, #8]
 8007d6a:	7013      	strb	r3, [r2, #0]
 8007d6c:	4633      	mov	r3, r6
 8007d6e:	461e      	mov	r6, r3
 8007d70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	2a39      	cmp	r2, #57	@ 0x39
 8007d78:	d052      	beq.n	8007e20 <_dtoa_r+0xb18>
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e60e      	b.n	800799e <_dtoa_r+0x696>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dd07      	ble.n	8007d94 <_dtoa_r+0xa8c>
 8007d84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d88:	d0ed      	beq.n	8007d66 <_dtoa_r+0xa5e>
 8007d8a:	9a02      	ldr	r2, [sp, #8]
 8007d8c:	f108 0301 	add.w	r3, r8, #1
 8007d90:	7013      	strb	r3, [r2, #0]
 8007d92:	e604      	b.n	800799e <_dtoa_r+0x696>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	9a07      	ldr	r2, [sp, #28]
 8007d98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d028      	beq.n	8007df4 <_dtoa_r+0xaec>
 8007da2:	4649      	mov	r1, r9
 8007da4:	2300      	movs	r3, #0
 8007da6:	220a      	movs	r2, #10
 8007da8:	4658      	mov	r0, fp
 8007daa:	f000 f9d5 	bl	8008158 <__multadd>
 8007dae:	42af      	cmp	r7, r5
 8007db0:	4681      	mov	r9, r0
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	f04f 020a 	mov.w	r2, #10
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	d107      	bne.n	8007dd0 <_dtoa_r+0xac8>
 8007dc0:	f000 f9ca 	bl	8008158 <__multadd>
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	9307      	str	r3, [sp, #28]
 8007dce:	e774      	b.n	8007cba <_dtoa_r+0x9b2>
 8007dd0:	f000 f9c2 	bl	8008158 <__multadd>
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	220a      	movs	r2, #10
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f000 f9bb 	bl	8008158 <__multadd>
 8007de2:	4605      	mov	r5, r0
 8007de4:	e7f0      	b.n	8007dc8 <_dtoa_r+0xac0>
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	2700      	movs	r7, #0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfcc      	ite	gt
 8007dee:	461e      	movgt	r6, r3
 8007df0:	2601      	movle	r6, #1
 8007df2:	4456      	add	r6, sl
 8007df4:	4649      	mov	r1, r9
 8007df6:	2201      	movs	r2, #1
 8007df8:	4658      	mov	r0, fp
 8007dfa:	f000 fb57 	bl	80084ac <__lshift>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4681      	mov	r9, r0
 8007e02:	f000 fbbf 	bl	8008584 <__mcmp>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	dcb0      	bgt.n	8007d6c <_dtoa_r+0xa64>
 8007e0a:	d102      	bne.n	8007e12 <_dtoa_r+0xb0a>
 8007e0c:	f018 0f01 	tst.w	r8, #1
 8007e10:	d1ac      	bne.n	8007d6c <_dtoa_r+0xa64>
 8007e12:	4633      	mov	r3, r6
 8007e14:	461e      	mov	r6, r3
 8007e16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e1a:	2a30      	cmp	r2, #48	@ 0x30
 8007e1c:	d0fa      	beq.n	8007e14 <_dtoa_r+0xb0c>
 8007e1e:	e5be      	b.n	800799e <_dtoa_r+0x696>
 8007e20:	459a      	cmp	sl, r3
 8007e22:	d1a4      	bne.n	8007d6e <_dtoa_r+0xa66>
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	3301      	adds	r3, #1
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	2331      	movs	r3, #49	@ 0x31
 8007e2c:	f88a 3000 	strb.w	r3, [sl]
 8007e30:	e5b5      	b.n	800799e <_dtoa_r+0x696>
 8007e32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e94 <_dtoa_r+0xb8c>
 8007e38:	b11b      	cbz	r3, 8007e42 <_dtoa_r+0xb3a>
 8007e3a:	f10a 0308 	add.w	r3, sl, #8
 8007e3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4650      	mov	r0, sl
 8007e44:	b017      	add	sp, #92	@ 0x5c
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	f77f ae3d 	ble.w	8007acc <_dtoa_r+0x7c4>
 8007e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e56:	2001      	movs	r0, #1
 8007e58:	e65b      	b.n	8007b12 <_dtoa_r+0x80a>
 8007e5a:	9b08      	ldr	r3, [sp, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f77f aed6 	ble.w	8007c0e <_dtoa_r+0x906>
 8007e62:	4656      	mov	r6, sl
 8007e64:	4621      	mov	r1, r4
 8007e66:	4648      	mov	r0, r9
 8007e68:	f7ff f9c5 	bl	80071f6 <quorem>
 8007e6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e70:	9b08      	ldr	r3, [sp, #32]
 8007e72:	f806 8b01 	strb.w	r8, [r6], #1
 8007e76:	eba6 020a 	sub.w	r2, r6, sl
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	ddb3      	ble.n	8007de6 <_dtoa_r+0xade>
 8007e7e:	4649      	mov	r1, r9
 8007e80:	2300      	movs	r3, #0
 8007e82:	220a      	movs	r2, #10
 8007e84:	4658      	mov	r0, fp
 8007e86:	f000 f967 	bl	8008158 <__multadd>
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	e7ea      	b.n	8007e64 <_dtoa_r+0xb5c>
 8007e8e:	bf00      	nop
 8007e90:	0800948a 	.word	0x0800948a
 8007e94:	0800940e 	.word	0x0800940e

08007e98 <_free_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d040      	beq.n	8007f22 <_free_r+0x8a>
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f0c      	subs	r4, r1, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb8      	it	lt
 8007eaa:	18e4      	addlt	r4, r4, r3
 8007eac:	f000 f8e6 	bl	800807c <__malloc_lock>
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f24 <_free_r+0x8c>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	b933      	cbnz	r3, 8007ec4 <_free_r+0x2c>
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	4628      	mov	r0, r5
 8007ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec0:	f000 b8e2 	b.w	8008088 <__malloc_unlock>
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d908      	bls.n	8007eda <_free_r+0x42>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	1821      	adds	r1, r4, r0
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf01      	itttt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	e7ed      	b.n	8007eb6 <_free_r+0x1e>
 8007eda:	461a      	mov	r2, r3
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b10b      	cbz	r3, 8007ee4 <_free_r+0x4c>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x42>
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	1850      	adds	r0, r2, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x6c>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1850      	adds	r0, r2, r1
 8007ef2:	4283      	cmp	r3, r0
 8007ef4:	6011      	str	r1, [r2, #0]
 8007ef6:	d1e0      	bne.n	8007eba <_free_r+0x22>
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4408      	add	r0, r1
 8007efe:	6010      	str	r0, [r2, #0]
 8007f00:	6053      	str	r3, [r2, #4]
 8007f02:	e7da      	b.n	8007eba <_free_r+0x22>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x74>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d6      	b.n	8007eba <_free_r+0x22>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf01      	itttt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	1809      	addeq	r1, r1, r0
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	6054      	str	r4, [r2, #4]
 8007f20:	e7cb      	b.n	8007eba <_free_r+0x22>
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	200014b4 	.word	0x200014b4

08007f28 <malloc>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	@ (8007f34 <malloc+0xc>)
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f000 b825 	b.w	8007f7c <_malloc_r>
 8007f32:	bf00      	nop
 8007f34:	20000038 	.word	0x20000038

08007f38 <sbrk_aligned>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007f78 <sbrk_aligned+0x40>)
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	6831      	ldr	r1, [r6, #0]
 8007f40:	4605      	mov	r5, r0
 8007f42:	b911      	cbnz	r1, 8007f4a <sbrk_aligned+0x12>
 8007f44:	f000 fe40 	bl	8008bc8 <_sbrk_r>
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 fe3b 	bl	8008bc8 <_sbrk_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d103      	bne.n	8007f5e <sbrk_aligned+0x26>
 8007f56:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d0f8      	beq.n	8007f5a <sbrk_aligned+0x22>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 fe2c 	bl	8008bc8 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d1f2      	bne.n	8007f5a <sbrk_aligned+0x22>
 8007f74:	e7ef      	b.n	8007f56 <sbrk_aligned+0x1e>
 8007f76:	bf00      	nop
 8007f78:	200014b0 	.word	0x200014b0

08007f7c <_malloc_r>:
 8007f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4606      	mov	r6, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d904      	bls.n	8007fa2 <_malloc_r+0x26>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	6033      	str	r3, [r6, #0]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008078 <_malloc_r+0xfc>
 8007fa6:	f000 f869 	bl	800807c <__malloc_lock>
 8007faa:	f8d8 3000 	ldr.w	r3, [r8]
 8007fae:	461c      	mov	r4, r3
 8007fb0:	bb44      	cbnz	r4, 8008004 <_malloc_r+0x88>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff ffbf 	bl	8007f38 <sbrk_aligned>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	d158      	bne.n	8008072 <_malloc_r+0xf6>
 8007fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc4:	4627      	mov	r7, r4
 8007fc6:	2f00      	cmp	r7, #0
 8007fc8:	d143      	bne.n	8008052 <_malloc_r+0xd6>
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d04b      	beq.n	8008066 <_malloc_r+0xea>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	eb04 0903 	add.w	r9, r4, r3
 8007fd8:	f000 fdf6 	bl	8008bc8 <_sbrk_r>
 8007fdc:	4581      	cmp	r9, r0
 8007fde:	d142      	bne.n	8008066 <_malloc_r+0xea>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	1a6d      	subs	r5, r5, r1
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7ff ffa6 	bl	8007f38 <sbrk_aligned>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d03a      	beq.n	8008066 <_malloc_r+0xea>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	442b      	add	r3, r5
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	bb62      	cbnz	r2, 8008058 <_malloc_r+0xdc>
 8007ffe:	f8c8 7000 	str.w	r7, [r8]
 8008002:	e00f      	b.n	8008024 <_malloc_r+0xa8>
 8008004:	6822      	ldr	r2, [r4, #0]
 8008006:	1b52      	subs	r2, r2, r5
 8008008:	d420      	bmi.n	800804c <_malloc_r+0xd0>
 800800a:	2a0b      	cmp	r2, #11
 800800c:	d917      	bls.n	800803e <_malloc_r+0xc2>
 800800e:	1961      	adds	r1, r4, r5
 8008010:	42a3      	cmp	r3, r4
 8008012:	6025      	str	r5, [r4, #0]
 8008014:	bf18      	it	ne
 8008016:	6059      	strne	r1, [r3, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	bf08      	it	eq
 800801c:	f8c8 1000 	streq.w	r1, [r8]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f82f 	bl	8008088 <__malloc_unlock>
 800802a:	f104 000b 	add.w	r0, r4, #11
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	f020 0007 	bic.w	r0, r0, #7
 8008034:	1ac2      	subs	r2, r0, r3
 8008036:	bf1c      	itt	ne
 8008038:	1a1b      	subne	r3, r3, r0
 800803a:	50a3      	strne	r3, [r4, r2]
 800803c:	e7af      	b.n	8007f9e <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	f8c8 2000 	streq.w	r2, [r8]
 8008048:	605a      	strne	r2, [r3, #4]
 800804a:	e7eb      	b.n	8008024 <_malloc_r+0xa8>
 800804c:	4623      	mov	r3, r4
 800804e:	6864      	ldr	r4, [r4, #4]
 8008050:	e7ae      	b.n	8007fb0 <_malloc_r+0x34>
 8008052:	463c      	mov	r4, r7
 8008054:	687f      	ldr	r7, [r7, #4]
 8008056:	e7b6      	b.n	8007fc6 <_malloc_r+0x4a>
 8008058:	461a      	mov	r2, r3
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	d1fb      	bne.n	8008058 <_malloc_r+0xdc>
 8008060:	2300      	movs	r3, #0
 8008062:	6053      	str	r3, [r2, #4]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa8>
 8008066:	230c      	movs	r3, #12
 8008068:	4630      	mov	r0, r6
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	f000 f80c 	bl	8008088 <__malloc_unlock>
 8008070:	e794      	b.n	8007f9c <_malloc_r+0x20>
 8008072:	6005      	str	r5, [r0, #0]
 8008074:	e7d6      	b.n	8008024 <_malloc_r+0xa8>
 8008076:	bf00      	nop
 8008078:	200014b4 	.word	0x200014b4

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_lock+0x8>)
 800807e:	f7ff b89c 	b.w	80071ba <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	200014ac 	.word	0x200014ac

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	@ (8008090 <__malloc_unlock+0x8>)
 800808a:	f7ff b897 	b.w	80071bc <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	200014ac 	.word	0x200014ac

08008094 <_Balloc>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	69c6      	ldr	r6, [r0, #28]
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	b976      	cbnz	r6, 80080bc <_Balloc+0x28>
 800809e:	2010      	movs	r0, #16
 80080a0:	f7ff ff42 	bl	8007f28 <malloc>
 80080a4:	4602      	mov	r2, r0
 80080a6:	61e0      	str	r0, [r4, #28]
 80080a8:	b920      	cbnz	r0, 80080b4 <_Balloc+0x20>
 80080aa:	216b      	movs	r1, #107	@ 0x6b
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <_Balloc+0x78>)
 80080ae:	4818      	ldr	r0, [pc, #96]	@ (8008110 <_Balloc+0x7c>)
 80080b0:	f000 fd9a 	bl	8008be8 <__assert_func>
 80080b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b8:	6006      	str	r6, [r0, #0]
 80080ba:	60c6      	str	r6, [r0, #12]
 80080bc:	69e6      	ldr	r6, [r4, #28]
 80080be:	68f3      	ldr	r3, [r6, #12]
 80080c0:	b183      	cbz	r3, 80080e4 <_Balloc+0x50>
 80080c2:	69e3      	ldr	r3, [r4, #28]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ca:	b9b8      	cbnz	r0, 80080fc <_Balloc+0x68>
 80080cc:	2101      	movs	r1, #1
 80080ce:	fa01 f605 	lsl.w	r6, r1, r5
 80080d2:	1d72      	adds	r2, r6, #5
 80080d4:	4620      	mov	r0, r4
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	f000 fda4 	bl	8008c24 <_calloc_r>
 80080dc:	b160      	cbz	r0, 80080f8 <_Balloc+0x64>
 80080de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e2:	e00e      	b.n	8008102 <_Balloc+0x6e>
 80080e4:	2221      	movs	r2, #33	@ 0x21
 80080e6:	2104      	movs	r1, #4
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fd9b 	bl	8008c24 <_calloc_r>
 80080ee:	69e3      	ldr	r3, [r4, #28]
 80080f0:	60f0      	str	r0, [r6, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <_Balloc+0x2e>
 80080f8:	2000      	movs	r0, #0
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	6802      	ldr	r2, [r0, #0]
 80080fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008102:	2300      	movs	r3, #0
 8008104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008108:	e7f7      	b.n	80080fa <_Balloc+0x66>
 800810a:	bf00      	nop
 800810c:	0800941b 	.word	0x0800941b
 8008110:	0800949b 	.word	0x0800949b

08008114 <_Bfree>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	69c6      	ldr	r6, [r0, #28]
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b976      	cbnz	r6, 800813c <_Bfree+0x28>
 800811e:	2010      	movs	r0, #16
 8008120:	f7ff ff02 	bl	8007f28 <malloc>
 8008124:	4602      	mov	r2, r0
 8008126:	61e8      	str	r0, [r5, #28]
 8008128:	b920      	cbnz	r0, 8008134 <_Bfree+0x20>
 800812a:	218f      	movs	r1, #143	@ 0x8f
 800812c:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <_Bfree+0x3c>)
 800812e:	4809      	ldr	r0, [pc, #36]	@ (8008154 <_Bfree+0x40>)
 8008130:	f000 fd5a 	bl	8008be8 <__assert_func>
 8008134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008138:	6006      	str	r6, [r0, #0]
 800813a:	60c6      	str	r6, [r0, #12]
 800813c:	b13c      	cbz	r4, 800814e <_Bfree+0x3a>
 800813e:	69eb      	ldr	r3, [r5, #28]
 8008140:	6862      	ldr	r2, [r4, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008148:	6021      	str	r1, [r4, #0]
 800814a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	0800941b 	.word	0x0800941b
 8008154:	0800949b 	.word	0x0800949b

08008158 <__multadd>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	4607      	mov	r7, r0
 800815e:	460c      	mov	r4, r1
 8008160:	461e      	mov	r6, r3
 8008162:	2000      	movs	r0, #0
 8008164:	690d      	ldr	r5, [r1, #16]
 8008166:	f101 0c14 	add.w	ip, r1, #20
 800816a:	f8dc 3000 	ldr.w	r3, [ip]
 800816e:	3001      	adds	r0, #1
 8008170:	b299      	uxth	r1, r3
 8008172:	fb02 6101 	mla	r1, r2, r1, r6
 8008176:	0c1e      	lsrs	r6, r3, #16
 8008178:	0c0b      	lsrs	r3, r1, #16
 800817a:	fb02 3306 	mla	r3, r2, r6, r3
 800817e:	b289      	uxth	r1, r1
 8008180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008184:	4285      	cmp	r5, r0
 8008186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	dcec      	bgt.n	800816a <__multadd+0x12>
 8008190:	b30e      	cbz	r6, 80081d6 <__multadd+0x7e>
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc19      	bgt.n	80081cc <__multadd+0x74>
 8008198:	6861      	ldr	r1, [r4, #4]
 800819a:	4638      	mov	r0, r7
 800819c:	3101      	adds	r1, #1
 800819e:	f7ff ff79 	bl	8008094 <_Balloc>
 80081a2:	4680      	mov	r8, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__multadd+0x5a>
 80081a6:	4602      	mov	r2, r0
 80081a8:	21ba      	movs	r1, #186	@ 0xba
 80081aa:	4b0c      	ldr	r3, [pc, #48]	@ (80081dc <__multadd+0x84>)
 80081ac:	480c      	ldr	r0, [pc, #48]	@ (80081e0 <__multadd+0x88>)
 80081ae:	f000 fd1b 	bl	8008be8 <__assert_func>
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	f104 010c 	add.w	r1, r4, #12
 80081b8:	3202      	adds	r2, #2
 80081ba:	0092      	lsls	r2, r2, #2
 80081bc:	300c      	adds	r0, #12
 80081be:	f7ff f80c 	bl	80071da <memcpy>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ffa5 	bl	8008114 <_Bfree>
 80081ca:	4644      	mov	r4, r8
 80081cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d0:	3501      	adds	r5, #1
 80081d2:	615e      	str	r6, [r3, #20]
 80081d4:	6125      	str	r5, [r4, #16]
 80081d6:	4620      	mov	r0, r4
 80081d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081dc:	0800948a 	.word	0x0800948a
 80081e0:	0800949b 	.word	0x0800949b

080081e4 <__hi0bits>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081ea:	bf3a      	itte	cc
 80081ec:	0403      	lslcc	r3, r0, #16
 80081ee:	2010      	movcc	r0, #16
 80081f0:	2000      	movcs	r0, #0
 80081f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081f6:	bf3c      	itt	cc
 80081f8:	021b      	lslcc	r3, r3, #8
 80081fa:	3008      	addcc	r0, #8
 80081fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008200:	bf3c      	itt	cc
 8008202:	011b      	lslcc	r3, r3, #4
 8008204:	3004      	addcc	r0, #4
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820a:	bf3c      	itt	cc
 800820c:	009b      	lslcc	r3, r3, #2
 800820e:	3002      	addcc	r0, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	db05      	blt.n	8008220 <__hi0bits+0x3c>
 8008214:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008218:	f100 0001 	add.w	r0, r0, #1
 800821c:	bf08      	it	eq
 800821e:	2020      	moveq	r0, #32
 8008220:	4770      	bx	lr

08008222 <__lo0bits>:
 8008222:	6803      	ldr	r3, [r0, #0]
 8008224:	4602      	mov	r2, r0
 8008226:	f013 0007 	ands.w	r0, r3, #7
 800822a:	d00b      	beq.n	8008244 <__lo0bits+0x22>
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	d421      	bmi.n	8008274 <__lo0bits+0x52>
 8008230:	0798      	lsls	r0, r3, #30
 8008232:	bf49      	itett	mi
 8008234:	085b      	lsrmi	r3, r3, #1
 8008236:	089b      	lsrpl	r3, r3, #2
 8008238:	2001      	movmi	r0, #1
 800823a:	6013      	strmi	r3, [r2, #0]
 800823c:	bf5c      	itt	pl
 800823e:	2002      	movpl	r0, #2
 8008240:	6013      	strpl	r3, [r2, #0]
 8008242:	4770      	bx	lr
 8008244:	b299      	uxth	r1, r3
 8008246:	b909      	cbnz	r1, 800824c <__lo0bits+0x2a>
 8008248:	2010      	movs	r0, #16
 800824a:	0c1b      	lsrs	r3, r3, #16
 800824c:	b2d9      	uxtb	r1, r3
 800824e:	b909      	cbnz	r1, 8008254 <__lo0bits+0x32>
 8008250:	3008      	adds	r0, #8
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	0719      	lsls	r1, r3, #28
 8008256:	bf04      	itt	eq
 8008258:	091b      	lsreq	r3, r3, #4
 800825a:	3004      	addeq	r0, #4
 800825c:	0799      	lsls	r1, r3, #30
 800825e:	bf04      	itt	eq
 8008260:	089b      	lsreq	r3, r3, #2
 8008262:	3002      	addeq	r0, #2
 8008264:	07d9      	lsls	r1, r3, #31
 8008266:	d403      	bmi.n	8008270 <__lo0bits+0x4e>
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	f100 0001 	add.w	r0, r0, #1
 800826e:	d003      	beq.n	8008278 <__lo0bits+0x56>
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	4770      	bx	lr
 8008274:	2000      	movs	r0, #0
 8008276:	4770      	bx	lr
 8008278:	2020      	movs	r0, #32
 800827a:	4770      	bx	lr

0800827c <__i2b>:
 800827c:	b510      	push	{r4, lr}
 800827e:	460c      	mov	r4, r1
 8008280:	2101      	movs	r1, #1
 8008282:	f7ff ff07 	bl	8008094 <_Balloc>
 8008286:	4602      	mov	r2, r0
 8008288:	b928      	cbnz	r0, 8008296 <__i2b+0x1a>
 800828a:	f240 1145 	movw	r1, #325	@ 0x145
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <__i2b+0x24>)
 8008290:	4804      	ldr	r0, [pc, #16]	@ (80082a4 <__i2b+0x28>)
 8008292:	f000 fca9 	bl	8008be8 <__assert_func>
 8008296:	2301      	movs	r3, #1
 8008298:	6144      	str	r4, [r0, #20]
 800829a:	6103      	str	r3, [r0, #16]
 800829c:	bd10      	pop	{r4, pc}
 800829e:	bf00      	nop
 80082a0:	0800948a 	.word	0x0800948a
 80082a4:	0800949b 	.word	0x0800949b

080082a8 <__multiply>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	4614      	mov	r4, r2
 80082ae:	690a      	ldr	r2, [r1, #16]
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	460f      	mov	r7, r1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	bfa2      	ittt	ge
 80082b8:	4623      	movge	r3, r4
 80082ba:	460c      	movge	r4, r1
 80082bc:	461f      	movge	r7, r3
 80082be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80082c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	6861      	ldr	r1, [r4, #4]
 80082ca:	eb0a 0609 	add.w	r6, sl, r9
 80082ce:	42b3      	cmp	r3, r6
 80082d0:	b085      	sub	sp, #20
 80082d2:	bfb8      	it	lt
 80082d4:	3101      	addlt	r1, #1
 80082d6:	f7ff fedd 	bl	8008094 <_Balloc>
 80082da:	b930      	cbnz	r0, 80082ea <__multiply+0x42>
 80082dc:	4602      	mov	r2, r0
 80082de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082e2:	4b43      	ldr	r3, [pc, #268]	@ (80083f0 <__multiply+0x148>)
 80082e4:	4843      	ldr	r0, [pc, #268]	@ (80083f4 <__multiply+0x14c>)
 80082e6:	f000 fc7f 	bl	8008be8 <__assert_func>
 80082ea:	f100 0514 	add.w	r5, r0, #20
 80082ee:	462b      	mov	r3, r5
 80082f0:	2200      	movs	r2, #0
 80082f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082f6:	4543      	cmp	r3, r8
 80082f8:	d321      	bcc.n	800833e <__multiply+0x96>
 80082fa:	f107 0114 	add.w	r1, r7, #20
 80082fe:	f104 0214 	add.w	r2, r4, #20
 8008302:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008306:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	1b13      	subs	r3, r2, r4
 800830e:	3b15      	subs	r3, #21
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	3304      	adds	r3, #4
 8008316:	f104 0715 	add.w	r7, r4, #21
 800831a:	42ba      	cmp	r2, r7
 800831c:	bf38      	it	cc
 800831e:	2304      	movcc	r3, #4
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	9103      	str	r1, [sp, #12]
 8008326:	428b      	cmp	r3, r1
 8008328:	d80c      	bhi.n	8008344 <__multiply+0x9c>
 800832a:	2e00      	cmp	r6, #0
 800832c:	dd03      	ble.n	8008336 <__multiply+0x8e>
 800832e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008332:	2b00      	cmp	r3, #0
 8008334:	d05a      	beq.n	80083ec <__multiply+0x144>
 8008336:	6106      	str	r6, [r0, #16]
 8008338:	b005      	add	sp, #20
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	f843 2b04 	str.w	r2, [r3], #4
 8008342:	e7d8      	b.n	80082f6 <__multiply+0x4e>
 8008344:	f8b1 a000 	ldrh.w	sl, [r1]
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d023      	beq.n	8008396 <__multiply+0xee>
 800834e:	46a9      	mov	r9, r5
 8008350:	f04f 0c00 	mov.w	ip, #0
 8008354:	f104 0e14 	add.w	lr, r4, #20
 8008358:	f85e 7b04 	ldr.w	r7, [lr], #4
 800835c:	f8d9 3000 	ldr.w	r3, [r9]
 8008360:	fa1f fb87 	uxth.w	fp, r7
 8008364:	b29b      	uxth	r3, r3
 8008366:	fb0a 330b 	mla	r3, sl, fp, r3
 800836a:	4463      	add	r3, ip
 800836c:	f8d9 c000 	ldr.w	ip, [r9]
 8008370:	0c3f      	lsrs	r7, r7, #16
 8008372:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008376:	fb0a c707 	mla	r7, sl, r7, ip
 800837a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008384:	4572      	cmp	r2, lr
 8008386:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800838a:	f849 3b04 	str.w	r3, [r9], #4
 800838e:	d8e3      	bhi.n	8008358 <__multiply+0xb0>
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	f845 c003 	str.w	ip, [r5, r3]
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	3104      	adds	r1, #4
 800839a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800839e:	f1b9 0f00 	cmp.w	r9, #0
 80083a2:	d021      	beq.n	80083e8 <__multiply+0x140>
 80083a4:	46ae      	mov	lr, r5
 80083a6:	f04f 0a00 	mov.w	sl, #0
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	f104 0c14 	add.w	ip, r4, #20
 80083b0:	f8bc b000 	ldrh.w	fp, [ip]
 80083b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	fb09 770b 	mla	r7, r9, fp, r7
 80083be:	4457      	add	r7, sl
 80083c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083c4:	f84e 3b04 	str.w	r3, [lr], #4
 80083c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083d0:	f8be 3000 	ldrh.w	r3, [lr]
 80083d4:	4562      	cmp	r2, ip
 80083d6:	fb09 330a 	mla	r3, r9, sl, r3
 80083da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083e2:	d8e5      	bhi.n	80083b0 <__multiply+0x108>
 80083e4:	9f01      	ldr	r7, [sp, #4]
 80083e6:	51eb      	str	r3, [r5, r7]
 80083e8:	3504      	adds	r5, #4
 80083ea:	e79a      	b.n	8008322 <__multiply+0x7a>
 80083ec:	3e01      	subs	r6, #1
 80083ee:	e79c      	b.n	800832a <__multiply+0x82>
 80083f0:	0800948a 	.word	0x0800948a
 80083f4:	0800949b 	.word	0x0800949b

080083f8 <__pow5mult>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4615      	mov	r5, r2
 80083fe:	f012 0203 	ands.w	r2, r2, #3
 8008402:	4607      	mov	r7, r0
 8008404:	460e      	mov	r6, r1
 8008406:	d007      	beq.n	8008418 <__pow5mult+0x20>
 8008408:	4c25      	ldr	r4, [pc, #148]	@ (80084a0 <__pow5mult+0xa8>)
 800840a:	3a01      	subs	r2, #1
 800840c:	2300      	movs	r3, #0
 800840e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008412:	f7ff fea1 	bl	8008158 <__multadd>
 8008416:	4606      	mov	r6, r0
 8008418:	10ad      	asrs	r5, r5, #2
 800841a:	d03d      	beq.n	8008498 <__pow5mult+0xa0>
 800841c:	69fc      	ldr	r4, [r7, #28]
 800841e:	b97c      	cbnz	r4, 8008440 <__pow5mult+0x48>
 8008420:	2010      	movs	r0, #16
 8008422:	f7ff fd81 	bl	8007f28 <malloc>
 8008426:	4602      	mov	r2, r0
 8008428:	61f8      	str	r0, [r7, #28]
 800842a:	b928      	cbnz	r0, 8008438 <__pow5mult+0x40>
 800842c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008430:	4b1c      	ldr	r3, [pc, #112]	@ (80084a4 <__pow5mult+0xac>)
 8008432:	481d      	ldr	r0, [pc, #116]	@ (80084a8 <__pow5mult+0xb0>)
 8008434:	f000 fbd8 	bl	8008be8 <__assert_func>
 8008438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800843c:	6004      	str	r4, [r0, #0]
 800843e:	60c4      	str	r4, [r0, #12]
 8008440:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008448:	b94c      	cbnz	r4, 800845e <__pow5mult+0x66>
 800844a:	f240 2171 	movw	r1, #625	@ 0x271
 800844e:	4638      	mov	r0, r7
 8008450:	f7ff ff14 	bl	800827c <__i2b>
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	f8c8 0008 	str.w	r0, [r8, #8]
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	07eb      	lsls	r3, r5, #31
 8008464:	d50a      	bpl.n	800847c <__pow5mult+0x84>
 8008466:	4631      	mov	r1, r6
 8008468:	4622      	mov	r2, r4
 800846a:	4638      	mov	r0, r7
 800846c:	f7ff ff1c 	bl	80082a8 <__multiply>
 8008470:	4680      	mov	r8, r0
 8008472:	4631      	mov	r1, r6
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff fe4d 	bl	8008114 <_Bfree>
 800847a:	4646      	mov	r6, r8
 800847c:	106d      	asrs	r5, r5, #1
 800847e:	d00b      	beq.n	8008498 <__pow5mult+0xa0>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	b938      	cbnz	r0, 8008494 <__pow5mult+0x9c>
 8008484:	4622      	mov	r2, r4
 8008486:	4621      	mov	r1, r4
 8008488:	4638      	mov	r0, r7
 800848a:	f7ff ff0d 	bl	80082a8 <__multiply>
 800848e:	6020      	str	r0, [r4, #0]
 8008490:	f8c0 9000 	str.w	r9, [r0]
 8008494:	4604      	mov	r4, r0
 8008496:	e7e4      	b.n	8008462 <__pow5mult+0x6a>
 8008498:	4630      	mov	r0, r6
 800849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849e:	bf00      	nop
 80084a0:	080094f4 	.word	0x080094f4
 80084a4:	0800941b 	.word	0x0800941b
 80084a8:	0800949b 	.word	0x0800949b

080084ac <__lshift>:
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	460c      	mov	r4, r1
 80084b2:	4607      	mov	r7, r0
 80084b4:	4691      	mov	r9, r2
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	6849      	ldr	r1, [r1, #4]
 80084ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084c4:	f108 0601 	add.w	r6, r8, #1
 80084c8:	42b3      	cmp	r3, r6
 80084ca:	db0b      	blt.n	80084e4 <__lshift+0x38>
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff fde1 	bl	8008094 <_Balloc>
 80084d2:	4605      	mov	r5, r0
 80084d4:	b948      	cbnz	r0, 80084ea <__lshift+0x3e>
 80084d6:	4602      	mov	r2, r0
 80084d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084dc:	4b27      	ldr	r3, [pc, #156]	@ (800857c <__lshift+0xd0>)
 80084de:	4828      	ldr	r0, [pc, #160]	@ (8008580 <__lshift+0xd4>)
 80084e0:	f000 fb82 	bl	8008be8 <__assert_func>
 80084e4:	3101      	adds	r1, #1
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	e7ee      	b.n	80084c8 <__lshift+0x1c>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f100 0114 	add.w	r1, r0, #20
 80084f0:	f100 0210 	add.w	r2, r0, #16
 80084f4:	4618      	mov	r0, r3
 80084f6:	4553      	cmp	r3, sl
 80084f8:	db33      	blt.n	8008562 <__lshift+0xb6>
 80084fa:	6920      	ldr	r0, [r4, #16]
 80084fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008500:	f104 0314 	add.w	r3, r4, #20
 8008504:	f019 091f 	ands.w	r9, r9, #31
 8008508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800850c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008510:	d02b      	beq.n	800856a <__lshift+0xbe>
 8008512:	468a      	mov	sl, r1
 8008514:	2200      	movs	r2, #0
 8008516:	f1c9 0e20 	rsb	lr, r9, #32
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	fa00 f009 	lsl.w	r0, r0, r9
 8008520:	4310      	orrs	r0, r2
 8008522:	f84a 0b04 	str.w	r0, [sl], #4
 8008526:	f853 2b04 	ldr.w	r2, [r3], #4
 800852a:	459c      	cmp	ip, r3
 800852c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008530:	d8f3      	bhi.n	800851a <__lshift+0x6e>
 8008532:	ebac 0304 	sub.w	r3, ip, r4
 8008536:	3b15      	subs	r3, #21
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	3304      	adds	r3, #4
 800853e:	f104 0015 	add.w	r0, r4, #21
 8008542:	4584      	cmp	ip, r0
 8008544:	bf38      	it	cc
 8008546:	2304      	movcc	r3, #4
 8008548:	50ca      	str	r2, [r1, r3]
 800854a:	b10a      	cbz	r2, 8008550 <__lshift+0xa4>
 800854c:	f108 0602 	add.w	r6, r8, #2
 8008550:	3e01      	subs	r6, #1
 8008552:	4638      	mov	r0, r7
 8008554:	4621      	mov	r1, r4
 8008556:	612e      	str	r6, [r5, #16]
 8008558:	f7ff fddc 	bl	8008114 <_Bfree>
 800855c:	4628      	mov	r0, r5
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	f842 0f04 	str.w	r0, [r2, #4]!
 8008566:	3301      	adds	r3, #1
 8008568:	e7c5      	b.n	80084f6 <__lshift+0x4a>
 800856a:	3904      	subs	r1, #4
 800856c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008570:	459c      	cmp	ip, r3
 8008572:	f841 2f04 	str.w	r2, [r1, #4]!
 8008576:	d8f9      	bhi.n	800856c <__lshift+0xc0>
 8008578:	e7ea      	b.n	8008550 <__lshift+0xa4>
 800857a:	bf00      	nop
 800857c:	0800948a 	.word	0x0800948a
 8008580:	0800949b 	.word	0x0800949b

08008584 <__mcmp>:
 8008584:	4603      	mov	r3, r0
 8008586:	690a      	ldr	r2, [r1, #16]
 8008588:	6900      	ldr	r0, [r0, #16]
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	1a80      	subs	r0, r0, r2
 800858e:	d10e      	bne.n	80085ae <__mcmp+0x2a>
 8008590:	3314      	adds	r3, #20
 8008592:	3114      	adds	r1, #20
 8008594:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008598:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800859c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085a4:	4295      	cmp	r5, r2
 80085a6:	d003      	beq.n	80085b0 <__mcmp+0x2c>
 80085a8:	d205      	bcs.n	80085b6 <__mcmp+0x32>
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	bd30      	pop	{r4, r5, pc}
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d3f3      	bcc.n	800859c <__mcmp+0x18>
 80085b4:	e7fb      	b.n	80085ae <__mcmp+0x2a>
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7f9      	b.n	80085ae <__mcmp+0x2a>
	...

080085bc <__mdiff>:
 80085bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4689      	mov	r9, r1
 80085c2:	4606      	mov	r6, r0
 80085c4:	4611      	mov	r1, r2
 80085c6:	4648      	mov	r0, r9
 80085c8:	4614      	mov	r4, r2
 80085ca:	f7ff ffdb 	bl	8008584 <__mcmp>
 80085ce:	1e05      	subs	r5, r0, #0
 80085d0:	d112      	bne.n	80085f8 <__mdiff+0x3c>
 80085d2:	4629      	mov	r1, r5
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7ff fd5d 	bl	8008094 <_Balloc>
 80085da:	4602      	mov	r2, r0
 80085dc:	b928      	cbnz	r0, 80085ea <__mdiff+0x2e>
 80085de:	f240 2137 	movw	r1, #567	@ 0x237
 80085e2:	4b3e      	ldr	r3, [pc, #248]	@ (80086dc <__mdiff+0x120>)
 80085e4:	483e      	ldr	r0, [pc, #248]	@ (80086e0 <__mdiff+0x124>)
 80085e6:	f000 faff 	bl	8008be8 <__assert_func>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085f0:	4610      	mov	r0, r2
 80085f2:	b003      	add	sp, #12
 80085f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f8:	bfbc      	itt	lt
 80085fa:	464b      	movlt	r3, r9
 80085fc:	46a1      	movlt	r9, r4
 80085fe:	4630      	mov	r0, r6
 8008600:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008604:	bfba      	itte	lt
 8008606:	461c      	movlt	r4, r3
 8008608:	2501      	movlt	r5, #1
 800860a:	2500      	movge	r5, #0
 800860c:	f7ff fd42 	bl	8008094 <_Balloc>
 8008610:	4602      	mov	r2, r0
 8008612:	b918      	cbnz	r0, 800861c <__mdiff+0x60>
 8008614:	f240 2145 	movw	r1, #581	@ 0x245
 8008618:	4b30      	ldr	r3, [pc, #192]	@ (80086dc <__mdiff+0x120>)
 800861a:	e7e3      	b.n	80085e4 <__mdiff+0x28>
 800861c:	f100 0b14 	add.w	fp, r0, #20
 8008620:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008624:	f109 0310 	add.w	r3, r9, #16
 8008628:	60c5      	str	r5, [r0, #12]
 800862a:	f04f 0c00 	mov.w	ip, #0
 800862e:	f109 0514 	add.w	r5, r9, #20
 8008632:	46d9      	mov	r9, fp
 8008634:	6926      	ldr	r6, [r4, #16]
 8008636:	f104 0e14 	add.w	lr, r4, #20
 800863a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800863e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	f85e 0b04 	ldr.w	r0, [lr], #4
 800864a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800864e:	b281      	uxth	r1, r0
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	fa1f f38a 	uxth.w	r3, sl
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	0c00      	lsrs	r0, r0, #16
 800865a:	4463      	add	r3, ip
 800865c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008660:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800866a:	4576      	cmp	r6, lr
 800866c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008670:	f849 3b04 	str.w	r3, [r9], #4
 8008674:	d8e6      	bhi.n	8008644 <__mdiff+0x88>
 8008676:	1b33      	subs	r3, r6, r4
 8008678:	3b15      	subs	r3, #21
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	3415      	adds	r4, #21
 8008680:	3304      	adds	r3, #4
 8008682:	42a6      	cmp	r6, r4
 8008684:	bf38      	it	cc
 8008686:	2304      	movcc	r3, #4
 8008688:	441d      	add	r5, r3
 800868a:	445b      	add	r3, fp
 800868c:	461e      	mov	r6, r3
 800868e:	462c      	mov	r4, r5
 8008690:	4544      	cmp	r4, r8
 8008692:	d30e      	bcc.n	80086b2 <__mdiff+0xf6>
 8008694:	f108 0103 	add.w	r1, r8, #3
 8008698:	1b49      	subs	r1, r1, r5
 800869a:	f021 0103 	bic.w	r1, r1, #3
 800869e:	3d03      	subs	r5, #3
 80086a0:	45a8      	cmp	r8, r5
 80086a2:	bf38      	it	cc
 80086a4:	2100      	movcc	r1, #0
 80086a6:	440b      	add	r3, r1
 80086a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086ac:	b199      	cbz	r1, 80086d6 <__mdiff+0x11a>
 80086ae:	6117      	str	r7, [r2, #16]
 80086b0:	e79e      	b.n	80085f0 <__mdiff+0x34>
 80086b2:	46e6      	mov	lr, ip
 80086b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80086b8:	fa1f fc81 	uxth.w	ip, r1
 80086bc:	44f4      	add	ip, lr
 80086be:	0c08      	lsrs	r0, r1, #16
 80086c0:	4471      	add	r1, lr
 80086c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086c6:	b289      	uxth	r1, r1
 80086c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086d0:	f846 1b04 	str.w	r1, [r6], #4
 80086d4:	e7dc      	b.n	8008690 <__mdiff+0xd4>
 80086d6:	3f01      	subs	r7, #1
 80086d8:	e7e6      	b.n	80086a8 <__mdiff+0xec>
 80086da:	bf00      	nop
 80086dc:	0800948a 	.word	0x0800948a
 80086e0:	0800949b 	.word	0x0800949b

080086e4 <__d2b>:
 80086e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80086e8:	2101      	movs	r1, #1
 80086ea:	4690      	mov	r8, r2
 80086ec:	4699      	mov	r9, r3
 80086ee:	9e08      	ldr	r6, [sp, #32]
 80086f0:	f7ff fcd0 	bl	8008094 <_Balloc>
 80086f4:	4604      	mov	r4, r0
 80086f6:	b930      	cbnz	r0, 8008706 <__d2b+0x22>
 80086f8:	4602      	mov	r2, r0
 80086fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80086fe:	4b23      	ldr	r3, [pc, #140]	@ (800878c <__d2b+0xa8>)
 8008700:	4823      	ldr	r0, [pc, #140]	@ (8008790 <__d2b+0xac>)
 8008702:	f000 fa71 	bl	8008be8 <__assert_func>
 8008706:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800870a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800870e:	b10d      	cbz	r5, 8008714 <__d2b+0x30>
 8008710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f1b8 0300 	subs.w	r3, r8, #0
 800871a:	d024      	beq.n	8008766 <__d2b+0x82>
 800871c:	4668      	mov	r0, sp
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f7ff fd7f 	bl	8008222 <__lo0bits>
 8008724:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008728:	b1d8      	cbz	r0, 8008762 <__d2b+0x7e>
 800872a:	f1c0 0320 	rsb	r3, r0, #32
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	430b      	orrs	r3, r1
 8008734:	40c2      	lsrs	r2, r0
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	9201      	str	r2, [sp, #4]
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	bf0c      	ite	eq
 8008740:	2201      	moveq	r2, #1
 8008742:	2202      	movne	r2, #2
 8008744:	61a3      	str	r3, [r4, #24]
 8008746:	6122      	str	r2, [r4, #16]
 8008748:	b1ad      	cbz	r5, 8008776 <__d2b+0x92>
 800874a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800874e:	4405      	add	r5, r0
 8008750:	6035      	str	r5, [r6, #0]
 8008752:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008758:	6018      	str	r0, [r3, #0]
 800875a:	4620      	mov	r0, r4
 800875c:	b002      	add	sp, #8
 800875e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008762:	6161      	str	r1, [r4, #20]
 8008764:	e7e9      	b.n	800873a <__d2b+0x56>
 8008766:	a801      	add	r0, sp, #4
 8008768:	f7ff fd5b 	bl	8008222 <__lo0bits>
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	6163      	str	r3, [r4, #20]
 8008772:	3020      	adds	r0, #32
 8008774:	e7e7      	b.n	8008746 <__d2b+0x62>
 8008776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800877a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800877e:	6030      	str	r0, [r6, #0]
 8008780:	6918      	ldr	r0, [r3, #16]
 8008782:	f7ff fd2f 	bl	80081e4 <__hi0bits>
 8008786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800878a:	e7e4      	b.n	8008756 <__d2b+0x72>
 800878c:	0800948a 	.word	0x0800948a
 8008790:	0800949b 	.word	0x0800949b

08008794 <__ssputs_r>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	461f      	mov	r7, r3
 800879a:	688e      	ldr	r6, [r1, #8]
 800879c:	4682      	mov	sl, r0
 800879e:	42be      	cmp	r6, r7
 80087a0:	460c      	mov	r4, r1
 80087a2:	4690      	mov	r8, r2
 80087a4:	680b      	ldr	r3, [r1, #0]
 80087a6:	d82d      	bhi.n	8008804 <__ssputs_r+0x70>
 80087a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087b0:	d026      	beq.n	8008800 <__ssputs_r+0x6c>
 80087b2:	6965      	ldr	r5, [r4, #20]
 80087b4:	6909      	ldr	r1, [r1, #16]
 80087b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ba:	eba3 0901 	sub.w	r9, r3, r1
 80087be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087c2:	1c7b      	adds	r3, r7, #1
 80087c4:	444b      	add	r3, r9
 80087c6:	106d      	asrs	r5, r5, #1
 80087c8:	429d      	cmp	r5, r3
 80087ca:	bf38      	it	cc
 80087cc:	461d      	movcc	r5, r3
 80087ce:	0553      	lsls	r3, r2, #21
 80087d0:	d527      	bpl.n	8008822 <__ssputs_r+0x8e>
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7ff fbd2 	bl	8007f7c <_malloc_r>
 80087d8:	4606      	mov	r6, r0
 80087da:	b360      	cbz	r0, 8008836 <__ssputs_r+0xa2>
 80087dc:	464a      	mov	r2, r9
 80087de:	6921      	ldr	r1, [r4, #16]
 80087e0:	f7fe fcfb 	bl	80071da <memcpy>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	6126      	str	r6, [r4, #16]
 80087f2:	444e      	add	r6, r9
 80087f4:	6026      	str	r6, [r4, #0]
 80087f6:	463e      	mov	r6, r7
 80087f8:	6165      	str	r5, [r4, #20]
 80087fa:	eba5 0509 	sub.w	r5, r5, r9
 80087fe:	60a5      	str	r5, [r4, #8]
 8008800:	42be      	cmp	r6, r7
 8008802:	d900      	bls.n	8008806 <__ssputs_r+0x72>
 8008804:	463e      	mov	r6, r7
 8008806:	4632      	mov	r2, r6
 8008808:	4641      	mov	r1, r8
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	f000 f9c2 	bl	8008b94 <memmove>
 8008810:	2000      	movs	r0, #0
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	1b9b      	subs	r3, r3, r6
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	4433      	add	r3, r6
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008822:	462a      	mov	r2, r5
 8008824:	f000 fa24 	bl	8008c70 <_realloc_r>
 8008828:	4606      	mov	r6, r0
 800882a:	2800      	cmp	r0, #0
 800882c:	d1e0      	bne.n	80087f0 <__ssputs_r+0x5c>
 800882e:	4650      	mov	r0, sl
 8008830:	6921      	ldr	r1, [r4, #16]
 8008832:	f7ff fb31 	bl	8007e98 <_free_r>
 8008836:	230c      	movs	r3, #12
 8008838:	f8ca 3000 	str.w	r3, [sl]
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	e7e9      	b.n	800881e <__ssputs_r+0x8a>
	...

0800884c <_svfiprintf_r>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	4698      	mov	r8, r3
 8008852:	898b      	ldrh	r3, [r1, #12]
 8008854:	4607      	mov	r7, r0
 8008856:	061b      	lsls	r3, r3, #24
 8008858:	460d      	mov	r5, r1
 800885a:	4614      	mov	r4, r2
 800885c:	b09d      	sub	sp, #116	@ 0x74
 800885e:	d510      	bpl.n	8008882 <_svfiprintf_r+0x36>
 8008860:	690b      	ldr	r3, [r1, #16]
 8008862:	b973      	cbnz	r3, 8008882 <_svfiprintf_r+0x36>
 8008864:	2140      	movs	r1, #64	@ 0x40
 8008866:	f7ff fb89 	bl	8007f7c <_malloc_r>
 800886a:	6028      	str	r0, [r5, #0]
 800886c:	6128      	str	r0, [r5, #16]
 800886e:	b930      	cbnz	r0, 800887e <_svfiprintf_r+0x32>
 8008870:	230c      	movs	r3, #12
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	b01d      	add	sp, #116	@ 0x74
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	2340      	movs	r3, #64	@ 0x40
 8008880:	616b      	str	r3, [r5, #20]
 8008882:	2300      	movs	r3, #0
 8008884:	9309      	str	r3, [sp, #36]	@ 0x24
 8008886:	2320      	movs	r3, #32
 8008888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800888c:	2330      	movs	r3, #48	@ 0x30
 800888e:	f04f 0901 	mov.w	r9, #1
 8008892:	f8cd 800c 	str.w	r8, [sp, #12]
 8008896:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a30 <_svfiprintf_r+0x1e4>
 800889a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800889e:	4623      	mov	r3, r4
 80088a0:	469a      	mov	sl, r3
 80088a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a6:	b10a      	cbz	r2, 80088ac <_svfiprintf_r+0x60>
 80088a8:	2a25      	cmp	r2, #37	@ 0x25
 80088aa:	d1f9      	bne.n	80088a0 <_svfiprintf_r+0x54>
 80088ac:	ebba 0b04 	subs.w	fp, sl, r4
 80088b0:	d00b      	beq.n	80088ca <_svfiprintf_r+0x7e>
 80088b2:	465b      	mov	r3, fp
 80088b4:	4622      	mov	r2, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff ff6b 	bl	8008794 <__ssputs_r>
 80088be:	3001      	adds	r0, #1
 80088c0:	f000 80a7 	beq.w	8008a12 <_svfiprintf_r+0x1c6>
 80088c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c6:	445a      	add	r2, fp
 80088c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80088ca:	f89a 3000 	ldrb.w	r3, [sl]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 809f 	beq.w	8008a12 <_svfiprintf_r+0x1c6>
 80088d4:	2300      	movs	r3, #0
 80088d6:	f04f 32ff 	mov.w	r2, #4294967295
 80088da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088de:	f10a 0a01 	add.w	sl, sl, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	9307      	str	r3, [sp, #28]
 80088e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ec:	4654      	mov	r4, sl
 80088ee:	2205      	movs	r2, #5
 80088f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f4:	484e      	ldr	r0, [pc, #312]	@ (8008a30 <_svfiprintf_r+0x1e4>)
 80088f6:	f7fe fc62 	bl	80071be <memchr>
 80088fa:	9a04      	ldr	r2, [sp, #16]
 80088fc:	b9d8      	cbnz	r0, 8008936 <_svfiprintf_r+0xea>
 80088fe:	06d0      	lsls	r0, r2, #27
 8008900:	bf44      	itt	mi
 8008902:	2320      	movmi	r3, #32
 8008904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008908:	0711      	lsls	r1, r2, #28
 800890a:	bf44      	itt	mi
 800890c:	232b      	movmi	r3, #43	@ 0x2b
 800890e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008912:	f89a 3000 	ldrb.w	r3, [sl]
 8008916:	2b2a      	cmp	r3, #42	@ 0x2a
 8008918:	d015      	beq.n	8008946 <_svfiprintf_r+0xfa>
 800891a:	4654      	mov	r4, sl
 800891c:	2000      	movs	r0, #0
 800891e:	f04f 0c0a 	mov.w	ip, #10
 8008922:	9a07      	ldr	r2, [sp, #28]
 8008924:	4621      	mov	r1, r4
 8008926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800892a:	3b30      	subs	r3, #48	@ 0x30
 800892c:	2b09      	cmp	r3, #9
 800892e:	d94b      	bls.n	80089c8 <_svfiprintf_r+0x17c>
 8008930:	b1b0      	cbz	r0, 8008960 <_svfiprintf_r+0x114>
 8008932:	9207      	str	r2, [sp, #28]
 8008934:	e014      	b.n	8008960 <_svfiprintf_r+0x114>
 8008936:	eba0 0308 	sub.w	r3, r0, r8
 800893a:	fa09 f303 	lsl.w	r3, r9, r3
 800893e:	4313      	orrs	r3, r2
 8008940:	46a2      	mov	sl, r4
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	e7d2      	b.n	80088ec <_svfiprintf_r+0xa0>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	1d19      	adds	r1, r3, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	9103      	str	r1, [sp, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfbb      	ittet	lt
 8008952:	425b      	neglt	r3, r3
 8008954:	f042 0202 	orrlt.w	r2, r2, #2
 8008958:	9307      	strge	r3, [sp, #28]
 800895a:	9307      	strlt	r3, [sp, #28]
 800895c:	bfb8      	it	lt
 800895e:	9204      	strlt	r2, [sp, #16]
 8008960:	7823      	ldrb	r3, [r4, #0]
 8008962:	2b2e      	cmp	r3, #46	@ 0x2e
 8008964:	d10a      	bne.n	800897c <_svfiprintf_r+0x130>
 8008966:	7863      	ldrb	r3, [r4, #1]
 8008968:	2b2a      	cmp	r3, #42	@ 0x2a
 800896a:	d132      	bne.n	80089d2 <_svfiprintf_r+0x186>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	3402      	adds	r4, #2
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9203      	str	r2, [sp, #12]
 8008976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a34 <_svfiprintf_r+0x1e8>
 8008980:	2203      	movs	r2, #3
 8008982:	4650      	mov	r0, sl
 8008984:	7821      	ldrb	r1, [r4, #0]
 8008986:	f7fe fc1a 	bl	80071be <memchr>
 800898a:	b138      	cbz	r0, 800899c <_svfiprintf_r+0x150>
 800898c:	2240      	movs	r2, #64	@ 0x40
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	eba0 000a 	sub.w	r0, r0, sl
 8008994:	4082      	lsls	r2, r0
 8008996:	4313      	orrs	r3, r2
 8008998:	3401      	adds	r4, #1
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a0:	2206      	movs	r2, #6
 80089a2:	4825      	ldr	r0, [pc, #148]	@ (8008a38 <_svfiprintf_r+0x1ec>)
 80089a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a8:	f7fe fc09 	bl	80071be <memchr>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d036      	beq.n	8008a1e <_svfiprintf_r+0x1d2>
 80089b0:	4b22      	ldr	r3, [pc, #136]	@ (8008a3c <_svfiprintf_r+0x1f0>)
 80089b2:	bb1b      	cbnz	r3, 80089fc <_svfiprintf_r+0x1b0>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	3307      	adds	r3, #7
 80089b8:	f023 0307 	bic.w	r3, r3, #7
 80089bc:	3308      	adds	r3, #8
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c2:	4433      	add	r3, r6
 80089c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c6:	e76a      	b.n	800889e <_svfiprintf_r+0x52>
 80089c8:	460c      	mov	r4, r1
 80089ca:	2001      	movs	r0, #1
 80089cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d0:	e7a8      	b.n	8008924 <_svfiprintf_r+0xd8>
 80089d2:	2300      	movs	r3, #0
 80089d4:	f04f 0c0a 	mov.w	ip, #10
 80089d8:	4619      	mov	r1, r3
 80089da:	3401      	adds	r4, #1
 80089dc:	9305      	str	r3, [sp, #20]
 80089de:	4620      	mov	r0, r4
 80089e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e4:	3a30      	subs	r2, #48	@ 0x30
 80089e6:	2a09      	cmp	r2, #9
 80089e8:	d903      	bls.n	80089f2 <_svfiprintf_r+0x1a6>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0c6      	beq.n	800897c <_svfiprintf_r+0x130>
 80089ee:	9105      	str	r1, [sp, #20]
 80089f0:	e7c4      	b.n	800897c <_svfiprintf_r+0x130>
 80089f2:	4604      	mov	r4, r0
 80089f4:	2301      	movs	r3, #1
 80089f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089fa:	e7f0      	b.n	80089de <_svfiprintf_r+0x192>
 80089fc:	ab03      	add	r3, sp, #12
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	4b0e      	ldr	r3, [pc, #56]	@ (8008a40 <_svfiprintf_r+0x1f4>)
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	f7fd fe0c 	bl	8006624 <_printf_float>
 8008a0c:	1c42      	adds	r2, r0, #1
 8008a0e:	4606      	mov	r6, r0
 8008a10:	d1d6      	bne.n	80089c0 <_svfiprintf_r+0x174>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	065b      	lsls	r3, r3, #25
 8008a16:	f53f af2d 	bmi.w	8008874 <_svfiprintf_r+0x28>
 8008a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a1c:	e72c      	b.n	8008878 <_svfiprintf_r+0x2c>
 8008a1e:	ab03      	add	r3, sp, #12
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	462a      	mov	r2, r5
 8008a24:	4638      	mov	r0, r7
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <_svfiprintf_r+0x1f4>)
 8008a28:	a904      	add	r1, sp, #16
 8008a2a:	f7fe f899 	bl	8006b60 <_printf_i>
 8008a2e:	e7ed      	b.n	8008a0c <_svfiprintf_r+0x1c0>
 8008a30:	080095f0 	.word	0x080095f0
 8008a34:	080095f6 	.word	0x080095f6
 8008a38:	080095fa 	.word	0x080095fa
 8008a3c:	08006625 	.word	0x08006625
 8008a40:	08008795 	.word	0x08008795

08008a44 <__sflush_r>:
 8008a44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	0716      	lsls	r6, r2, #28
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	d454      	bmi.n	8008afc <__sflush_r+0xb8>
 8008a52:	684b      	ldr	r3, [r1, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc02      	bgt.n	8008a5e <__sflush_r+0x1a>
 8008a58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd48      	ble.n	8008af0 <__sflush_r+0xac>
 8008a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	d045      	beq.n	8008af0 <__sflush_r+0xac>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a6a:	682f      	ldr	r7, [r5, #0]
 8008a6c:	6a21      	ldr	r1, [r4, #32]
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	d030      	beq.n	8008ad4 <__sflush_r+0x90>
 8008a72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	0759      	lsls	r1, r3, #29
 8008a78:	d505      	bpl.n	8008a86 <__sflush_r+0x42>
 8008a7a:	6863      	ldr	r3, [r4, #4]
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a80:	b10b      	cbz	r3, 8008a86 <__sflush_r+0x42>
 8008a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a84:	1ad2      	subs	r2, r2, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	4628      	mov	r0, r5
 8008a8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a8c:	6a21      	ldr	r1, [r4, #32]
 8008a8e:	47b0      	blx	r6
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	d106      	bne.n	8008aa4 <__sflush_r+0x60>
 8008a96:	6829      	ldr	r1, [r5, #0]
 8008a98:	291d      	cmp	r1, #29
 8008a9a:	d82b      	bhi.n	8008af4 <__sflush_r+0xb0>
 8008a9c:	4a28      	ldr	r2, [pc, #160]	@ (8008b40 <__sflush_r+0xfc>)
 8008a9e:	410a      	asrs	r2, r1
 8008aa0:	07d6      	lsls	r6, r2, #31
 8008aa2:	d427      	bmi.n	8008af4 <__sflush_r+0xb0>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	6062      	str	r2, [r4, #4]
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	04d9      	lsls	r1, r3, #19
 8008aac:	6022      	str	r2, [r4, #0]
 8008aae:	d504      	bpl.n	8008aba <__sflush_r+0x76>
 8008ab0:	1c42      	adds	r2, r0, #1
 8008ab2:	d101      	bne.n	8008ab8 <__sflush_r+0x74>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b903      	cbnz	r3, 8008aba <__sflush_r+0x76>
 8008ab8:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008abc:	602f      	str	r7, [r5, #0]
 8008abe:	b1b9      	cbz	r1, 8008af0 <__sflush_r+0xac>
 8008ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d002      	beq.n	8008ace <__sflush_r+0x8a>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7ff f9e5 	bl	8007e98 <_free_r>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ad2:	e00d      	b.n	8008af0 <__sflush_r+0xac>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b0      	blx	r6
 8008ada:	4602      	mov	r2, r0
 8008adc:	1c50      	adds	r0, r2, #1
 8008ade:	d1c9      	bne.n	8008a74 <__sflush_r+0x30>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c6      	beq.n	8008a74 <__sflush_r+0x30>
 8008ae6:	2b1d      	cmp	r3, #29
 8008ae8:	d001      	beq.n	8008aee <__sflush_r+0xaa>
 8008aea:	2b16      	cmp	r3, #22
 8008aec:	d11d      	bne.n	8008b2a <__sflush_r+0xe6>
 8008aee:	602f      	str	r7, [r5, #0]
 8008af0:	2000      	movs	r0, #0
 8008af2:	e021      	b.n	8008b38 <__sflush_r+0xf4>
 8008af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af8:	b21b      	sxth	r3, r3
 8008afa:	e01a      	b.n	8008b32 <__sflush_r+0xee>
 8008afc:	690f      	ldr	r7, [r1, #16]
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	d0f6      	beq.n	8008af0 <__sflush_r+0xac>
 8008b02:	0793      	lsls	r3, r2, #30
 8008b04:	bf18      	it	ne
 8008b06:	2300      	movne	r3, #0
 8008b08:	680e      	ldr	r6, [r1, #0]
 8008b0a:	bf08      	it	eq
 8008b0c:	694b      	ldreq	r3, [r1, #20]
 8008b0e:	1bf6      	subs	r6, r6, r7
 8008b10:	600f      	str	r7, [r1, #0]
 8008b12:	608b      	str	r3, [r1, #8]
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	ddeb      	ble.n	8008af0 <__sflush_r+0xac>
 8008b18:	4633      	mov	r3, r6
 8008b1a:	463a      	mov	r2, r7
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	6a21      	ldr	r1, [r4, #32]
 8008b20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b24:	47e0      	blx	ip
 8008b26:	2800      	cmp	r0, #0
 8008b28:	dc07      	bgt.n	8008b3a <__sflush_r+0xf6>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3a:	4407      	add	r7, r0
 8008b3c:	1a36      	subs	r6, r6, r0
 8008b3e:	e7e9      	b.n	8008b14 <__sflush_r+0xd0>
 8008b40:	dfbffffe 	.word	0xdfbffffe

08008b44 <_fflush_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	690b      	ldr	r3, [r1, #16]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b913      	cbnz	r3, 8008b54 <_fflush_r+0x10>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	4628      	mov	r0, r5
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	b118      	cbz	r0, 8008b5e <_fflush_r+0x1a>
 8008b56:	6a03      	ldr	r3, [r0, #32]
 8008b58:	b90b      	cbnz	r3, 8008b5e <_fflush_r+0x1a>
 8008b5a:	f7fe f9ad 	bl	8006eb8 <__sinit>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f3      	beq.n	8008b4e <_fflush_r+0xa>
 8008b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b68:	07d0      	lsls	r0, r2, #31
 8008b6a:	d404      	bmi.n	8008b76 <_fflush_r+0x32>
 8008b6c:	0599      	lsls	r1, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_fflush_r+0x32>
 8008b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b72:	f7fe fb22 	bl	80071ba <__retarget_lock_acquire_recursive>
 8008b76:	4628      	mov	r0, r5
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7ff ff63 	bl	8008a44 <__sflush_r>
 8008b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b80:	4605      	mov	r5, r0
 8008b82:	07da      	lsls	r2, r3, #31
 8008b84:	d4e4      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	059b      	lsls	r3, r3, #22
 8008b8a:	d4e1      	bmi.n	8008b50 <_fflush_r+0xc>
 8008b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8e:	f7fe fb15 	bl	80071bc <__retarget_lock_release_recursive>
 8008b92:	e7dd      	b.n	8008b50 <_fflush_r+0xc>

08008b94 <memmove>:
 8008b94:	4288      	cmp	r0, r1
 8008b96:	b510      	push	{r4, lr}
 8008b98:	eb01 0402 	add.w	r4, r1, r2
 8008b9c:	d902      	bls.n	8008ba4 <memmove+0x10>
 8008b9e:	4284      	cmp	r4, r0
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	d807      	bhi.n	8008bb4 <memmove+0x20>
 8008ba4:	1e43      	subs	r3, r0, #1
 8008ba6:	42a1      	cmp	r1, r4
 8008ba8:	d008      	beq.n	8008bbc <memmove+0x28>
 8008baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bb2:	e7f8      	b.n	8008ba6 <memmove+0x12>
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	4402      	add	r2, r0
 8008bb8:	428a      	cmp	r2, r1
 8008bba:	d100      	bne.n	8008bbe <memmove+0x2a>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bc6:	e7f7      	b.n	8008bb8 <memmove+0x24>

08008bc8 <_sbrk_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4d05      	ldr	r5, [pc, #20]	@ (8008be4 <_sbrk_r+0x1c>)
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f9 f840 	bl	8001c58 <_sbrk>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_sbrk_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_sbrk_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	200014a8 	.word	0x200014a8

08008be8 <__assert_func>:
 8008be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bea:	4614      	mov	r4, r2
 8008bec:	461a      	mov	r2, r3
 8008bee:	4b09      	ldr	r3, [pc, #36]	@ (8008c14 <__assert_func+0x2c>)
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68d8      	ldr	r0, [r3, #12]
 8008bf6:	b954      	cbnz	r4, 8008c0e <__assert_func+0x26>
 8008bf8:	4b07      	ldr	r3, [pc, #28]	@ (8008c18 <__assert_func+0x30>)
 8008bfa:	461c      	mov	r4, r3
 8008bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c00:	9100      	str	r1, [sp, #0]
 8008c02:	462b      	mov	r3, r5
 8008c04:	4905      	ldr	r1, [pc, #20]	@ (8008c1c <__assert_func+0x34>)
 8008c06:	f000 f86f 	bl	8008ce8 <fiprintf>
 8008c0a:	f000 f87f 	bl	8008d0c <abort>
 8008c0e:	4b04      	ldr	r3, [pc, #16]	@ (8008c20 <__assert_func+0x38>)
 8008c10:	e7f4      	b.n	8008bfc <__assert_func+0x14>
 8008c12:	bf00      	nop
 8008c14:	20000038 	.word	0x20000038
 8008c18:	08009646 	.word	0x08009646
 8008c1c:	08009618 	.word	0x08009618
 8008c20:	0800960b 	.word	0x0800960b

08008c24 <_calloc_r>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	fba1 5402 	umull	r5, r4, r1, r2
 8008c2a:	b93c      	cbnz	r4, 8008c3c <_calloc_r+0x18>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7ff f9a5 	bl	8007f7c <_malloc_r>
 8008c32:	4606      	mov	r6, r0
 8008c34:	b928      	cbnz	r0, 8008c42 <_calloc_r+0x1e>
 8008c36:	2600      	movs	r6, #0
 8008c38:	4630      	mov	r0, r6
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	220c      	movs	r2, #12
 8008c3e:	6002      	str	r2, [r0, #0]
 8008c40:	e7f9      	b.n	8008c36 <_calloc_r+0x12>
 8008c42:	462a      	mov	r2, r5
 8008c44:	4621      	mov	r1, r4
 8008c46:	f7fe f9e4 	bl	8007012 <memset>
 8008c4a:	e7f5      	b.n	8008c38 <_calloc_r+0x14>

08008c4c <__ascii_mbtowc>:
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	b901      	cbnz	r1, 8008c52 <__ascii_mbtowc+0x6>
 8008c50:	a901      	add	r1, sp, #4
 8008c52:	b142      	cbz	r2, 8008c66 <__ascii_mbtowc+0x1a>
 8008c54:	b14b      	cbz	r3, 8008c6a <__ascii_mbtowc+0x1e>
 8008c56:	7813      	ldrb	r3, [r2, #0]
 8008c58:	600b      	str	r3, [r1, #0]
 8008c5a:	7812      	ldrb	r2, [r2, #0]
 8008c5c:	1e10      	subs	r0, r2, #0
 8008c5e:	bf18      	it	ne
 8008c60:	2001      	movne	r0, #1
 8008c62:	b002      	add	sp, #8
 8008c64:	4770      	bx	lr
 8008c66:	4610      	mov	r0, r2
 8008c68:	e7fb      	b.n	8008c62 <__ascii_mbtowc+0x16>
 8008c6a:	f06f 0001 	mvn.w	r0, #1
 8008c6e:	e7f8      	b.n	8008c62 <__ascii_mbtowc+0x16>

08008c70 <_realloc_r>:
 8008c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c74:	4680      	mov	r8, r0
 8008c76:	4615      	mov	r5, r2
 8008c78:	460c      	mov	r4, r1
 8008c7a:	b921      	cbnz	r1, 8008c86 <_realloc_r+0x16>
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	f7ff b97b 	b.w	8007f7c <_malloc_r>
 8008c86:	b92a      	cbnz	r2, 8008c94 <_realloc_r+0x24>
 8008c88:	f7ff f906 	bl	8007e98 <_free_r>
 8008c8c:	2400      	movs	r4, #0
 8008c8e:	4620      	mov	r0, r4
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	f000 f841 	bl	8008d1a <_malloc_usable_size_r>
 8008c98:	4285      	cmp	r5, r0
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	d802      	bhi.n	8008ca4 <_realloc_r+0x34>
 8008c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ca2:	d8f4      	bhi.n	8008c8e <_realloc_r+0x1e>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7ff f968 	bl	8007f7c <_malloc_r>
 8008cac:	4607      	mov	r7, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d0ec      	beq.n	8008c8c <_realloc_r+0x1c>
 8008cb2:	42b5      	cmp	r5, r6
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	bf28      	it	cs
 8008cba:	4632      	movcs	r2, r6
 8008cbc:	f7fe fa8d 	bl	80071da <memcpy>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7ff f8e8 	bl	8007e98 <_free_r>
 8008cc8:	463c      	mov	r4, r7
 8008cca:	e7e0      	b.n	8008c8e <_realloc_r+0x1e>

08008ccc <__ascii_wctomb>:
 8008ccc:	4603      	mov	r3, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	b141      	cbz	r1, 8008ce4 <__ascii_wctomb+0x18>
 8008cd2:	2aff      	cmp	r2, #255	@ 0xff
 8008cd4:	d904      	bls.n	8008ce0 <__ascii_wctomb+0x14>
 8008cd6:	228a      	movs	r2, #138	@ 0x8a
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	4770      	bx	lr
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	700a      	strb	r2, [r1, #0]
 8008ce4:	4770      	bx	lr
	...

08008ce8 <fiprintf>:
 8008ce8:	b40e      	push	{r1, r2, r3}
 8008cea:	b503      	push	{r0, r1, lr}
 8008cec:	4601      	mov	r1, r0
 8008cee:	ab03      	add	r3, sp, #12
 8008cf0:	4805      	ldr	r0, [pc, #20]	@ (8008d08 <fiprintf+0x20>)
 8008cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	f000 f83d 	bl	8008d78 <_vfiprintf_r>
 8008cfe:	b002      	add	sp, #8
 8008d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d04:	b003      	add	sp, #12
 8008d06:	4770      	bx	lr
 8008d08:	20000038 	.word	0x20000038

08008d0c <abort>:
 8008d0c:	2006      	movs	r0, #6
 8008d0e:	b508      	push	{r3, lr}
 8008d10:	f000 fa06 	bl	8009120 <raise>
 8008d14:	2001      	movs	r0, #1
 8008d16:	f7f8 ff2a 	bl	8001b6e <_exit>

08008d1a <_malloc_usable_size_r>:
 8008d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1e:	1f18      	subs	r0, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfbc      	itt	lt
 8008d24:	580b      	ldrlt	r3, [r1, r0]
 8008d26:	18c0      	addlt	r0, r0, r3
 8008d28:	4770      	bx	lr

08008d2a <__sfputc_r>:
 8008d2a:	6893      	ldr	r3, [r2, #8]
 8008d2c:	b410      	push	{r4}
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	6093      	str	r3, [r2, #8]
 8008d34:	da07      	bge.n	8008d46 <__sfputc_r+0x1c>
 8008d36:	6994      	ldr	r4, [r2, #24]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	db01      	blt.n	8008d40 <__sfputc_r+0x16>
 8008d3c:	290a      	cmp	r1, #10
 8008d3e:	d102      	bne.n	8008d46 <__sfputc_r+0x1c>
 8008d40:	bc10      	pop	{r4}
 8008d42:	f000 b931 	b.w	8008fa8 <__swbuf_r>
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	1c58      	adds	r0, r3, #1
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	7019      	strb	r1, [r3, #0]
 8008d4e:	4608      	mov	r0, r1
 8008d50:	bc10      	pop	{r4}
 8008d52:	4770      	bx	lr

08008d54 <__sfputs_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	18d5      	adds	r5, r2, r3
 8008d5e:	42ac      	cmp	r4, r5
 8008d60:	d101      	bne.n	8008d66 <__sfputs_r+0x12>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e007      	b.n	8008d76 <__sfputs_r+0x22>
 8008d66:	463a      	mov	r2, r7
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6e:	f7ff ffdc 	bl	8008d2a <__sfputc_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d1f3      	bne.n	8008d5e <__sfputs_r+0xa>
 8008d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d78 <_vfiprintf_r>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	460d      	mov	r5, r1
 8008d7e:	4614      	mov	r4, r2
 8008d80:	4698      	mov	r8, r3
 8008d82:	4606      	mov	r6, r0
 8008d84:	b09d      	sub	sp, #116	@ 0x74
 8008d86:	b118      	cbz	r0, 8008d90 <_vfiprintf_r+0x18>
 8008d88:	6a03      	ldr	r3, [r0, #32]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <_vfiprintf_r+0x18>
 8008d8c:	f7fe f894 	bl	8006eb8 <__sinit>
 8008d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d92:	07d9      	lsls	r1, r3, #31
 8008d94:	d405      	bmi.n	8008da2 <_vfiprintf_r+0x2a>
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	059a      	lsls	r2, r3, #22
 8008d9a:	d402      	bmi.n	8008da2 <_vfiprintf_r+0x2a>
 8008d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d9e:	f7fe fa0c 	bl	80071ba <__retarget_lock_acquire_recursive>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	071b      	lsls	r3, r3, #28
 8008da6:	d501      	bpl.n	8008dac <_vfiprintf_r+0x34>
 8008da8:	692b      	ldr	r3, [r5, #16]
 8008daa:	b99b      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x5c>
 8008dac:	4629      	mov	r1, r5
 8008dae:	4630      	mov	r0, r6
 8008db0:	f000 f938 	bl	8009024 <__swsetup_r>
 8008db4:	b170      	cbz	r0, 8008dd4 <_vfiprintf_r+0x5c>
 8008db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008db8:	07dc      	lsls	r4, r3, #31
 8008dba:	d504      	bpl.n	8008dc6 <_vfiprintf_r+0x4e>
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc0:	b01d      	add	sp, #116	@ 0x74
 8008dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d4f7      	bmi.n	8008dbc <_vfiprintf_r+0x44>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dce:	f7fe f9f5 	bl	80071bc <__retarget_lock_release_recursive>
 8008dd2:	e7f3      	b.n	8008dbc <_vfiprintf_r+0x44>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dde:	2330      	movs	r3, #48	@ 0x30
 8008de0:	f04f 0901 	mov.w	r9, #1
 8008de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008f94 <_vfiprintf_r+0x21c>
 8008dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008df0:	4623      	mov	r3, r4
 8008df2:	469a      	mov	sl, r3
 8008df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df8:	b10a      	cbz	r2, 8008dfe <_vfiprintf_r+0x86>
 8008dfa:	2a25      	cmp	r2, #37	@ 0x25
 8008dfc:	d1f9      	bne.n	8008df2 <_vfiprintf_r+0x7a>
 8008dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008e02:	d00b      	beq.n	8008e1c <_vfiprintf_r+0xa4>
 8008e04:	465b      	mov	r3, fp
 8008e06:	4622      	mov	r2, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ffa2 	bl	8008d54 <__sfputs_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f000 80a7 	beq.w	8008f64 <_vfiprintf_r+0x1ec>
 8008e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e18:	445a      	add	r2, fp
 8008e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 809f 	beq.w	8008f64 <_vfiprintf_r+0x1ec>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e30:	f10a 0a01 	add.w	sl, sl, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2205      	movs	r2, #5
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4853      	ldr	r0, [pc, #332]	@ (8008f94 <_vfiprintf_r+0x21c>)
 8008e48:	f7fe f9b9 	bl	80071be <memchr>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	b9d8      	cbnz	r0, 8008e88 <_vfiprintf_r+0x110>
 8008e50:	06d1      	lsls	r1, r2, #27
 8008e52:	bf44      	itt	mi
 8008e54:	2320      	movmi	r3, #32
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5a:	0713      	lsls	r3, r2, #28
 8008e5c:	bf44      	itt	mi
 8008e5e:	232b      	movmi	r3, #43	@ 0x2b
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6a:	d015      	beq.n	8008e98 <_vfiprintf_r+0x120>
 8008e6c:	4654      	mov	r4, sl
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f04f 0c0a 	mov.w	ip, #10
 8008e74:	9a07      	ldr	r2, [sp, #28]
 8008e76:	4621      	mov	r1, r4
 8008e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7c:	3b30      	subs	r3, #48	@ 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d94b      	bls.n	8008f1a <_vfiprintf_r+0x1a2>
 8008e82:	b1b0      	cbz	r0, 8008eb2 <_vfiprintf_r+0x13a>
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e014      	b.n	8008eb2 <_vfiprintf_r+0x13a>
 8008e88:	eba0 0308 	sub.w	r3, r0, r8
 8008e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	46a2      	mov	sl, r4
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	e7d2      	b.n	8008e3e <_vfiprintf_r+0xc6>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbb      	ittet	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eaa:	9307      	strge	r3, [sp, #28]
 8008eac:	9307      	strlt	r3, [sp, #28]
 8008eae:	bfb8      	it	lt
 8008eb0:	9204      	strlt	r2, [sp, #16]
 8008eb2:	7823      	ldrb	r3, [r4, #0]
 8008eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eb6:	d10a      	bne.n	8008ece <_vfiprintf_r+0x156>
 8008eb8:	7863      	ldrb	r3, [r4, #1]
 8008eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ebc:	d132      	bne.n	8008f24 <_vfiprintf_r+0x1ac>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	3402      	adds	r4, #2
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	9203      	str	r2, [sp, #12]
 8008ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008f98 <_vfiprintf_r+0x220>
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	f7fe f971 	bl	80071be <memchr>
 8008edc:	b138      	cbz	r0, 8008eee <_vfiprintf_r+0x176>
 8008ede:	2240      	movs	r2, #64	@ 0x40
 8008ee0:	9b04      	ldr	r3, [sp, #16]
 8008ee2:	eba0 000a 	sub.w	r0, r0, sl
 8008ee6:	4082      	lsls	r2, r0
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	3401      	adds	r4, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	2206      	movs	r2, #6
 8008ef4:	4829      	ldr	r0, [pc, #164]	@ (8008f9c <_vfiprintf_r+0x224>)
 8008ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008efa:	f7fe f960 	bl	80071be <memchr>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d03f      	beq.n	8008f82 <_vfiprintf_r+0x20a>
 8008f02:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <_vfiprintf_r+0x228>)
 8008f04:	bb1b      	cbnz	r3, 8008f4e <_vfiprintf_r+0x1d6>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	3307      	adds	r3, #7
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	3308      	adds	r3, #8
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f14:	443b      	add	r3, r7
 8008f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f18:	e76a      	b.n	8008df0 <_vfiprintf_r+0x78>
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f22:	e7a8      	b.n	8008e76 <_vfiprintf_r+0xfe>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f04f 0c0a 	mov.w	ip, #10
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	4620      	mov	r0, r4
 8008f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f36:	3a30      	subs	r2, #48	@ 0x30
 8008f38:	2a09      	cmp	r2, #9
 8008f3a:	d903      	bls.n	8008f44 <_vfiprintf_r+0x1cc>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0c6      	beq.n	8008ece <_vfiprintf_r+0x156>
 8008f40:	9105      	str	r1, [sp, #20]
 8008f42:	e7c4      	b.n	8008ece <_vfiprintf_r+0x156>
 8008f44:	4604      	mov	r4, r0
 8008f46:	2301      	movs	r3, #1
 8008f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4c:	e7f0      	b.n	8008f30 <_vfiprintf_r+0x1b8>
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4630      	mov	r0, r6
 8008f56:	4b13      	ldr	r3, [pc, #76]	@ (8008fa4 <_vfiprintf_r+0x22c>)
 8008f58:	a904      	add	r1, sp, #16
 8008f5a:	f7fd fb63 	bl	8006624 <_printf_float>
 8008f5e:	4607      	mov	r7, r0
 8008f60:	1c78      	adds	r0, r7, #1
 8008f62:	d1d6      	bne.n	8008f12 <_vfiprintf_r+0x19a>
 8008f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f66:	07d9      	lsls	r1, r3, #31
 8008f68:	d405      	bmi.n	8008f76 <_vfiprintf_r+0x1fe>
 8008f6a:	89ab      	ldrh	r3, [r5, #12]
 8008f6c:	059a      	lsls	r2, r3, #22
 8008f6e:	d402      	bmi.n	8008f76 <_vfiprintf_r+0x1fe>
 8008f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f72:	f7fe f923 	bl	80071bc <__retarget_lock_release_recursive>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	065b      	lsls	r3, r3, #25
 8008f7a:	f53f af1f 	bmi.w	8008dbc <_vfiprintf_r+0x44>
 8008f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f80:	e71e      	b.n	8008dc0 <_vfiprintf_r+0x48>
 8008f82:	ab03      	add	r3, sp, #12
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	462a      	mov	r2, r5
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <_vfiprintf_r+0x22c>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	f7fd fde7 	bl	8006b60 <_printf_i>
 8008f92:	e7e4      	b.n	8008f5e <_vfiprintf_r+0x1e6>
 8008f94:	080095f0 	.word	0x080095f0
 8008f98:	080095f6 	.word	0x080095f6
 8008f9c:	080095fa 	.word	0x080095fa
 8008fa0:	08006625 	.word	0x08006625
 8008fa4:	08008d55 	.word	0x08008d55

08008fa8 <__swbuf_r>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	460e      	mov	r6, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	4605      	mov	r5, r0
 8008fb0:	b118      	cbz	r0, 8008fba <__swbuf_r+0x12>
 8008fb2:	6a03      	ldr	r3, [r0, #32]
 8008fb4:	b90b      	cbnz	r3, 8008fba <__swbuf_r+0x12>
 8008fb6:	f7fd ff7f 	bl	8006eb8 <__sinit>
 8008fba:	69a3      	ldr	r3, [r4, #24]
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	071a      	lsls	r2, r3, #28
 8008fc2:	d501      	bpl.n	8008fc8 <__swbuf_r+0x20>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	b943      	cbnz	r3, 8008fda <__swbuf_r+0x32>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 f82a 	bl	8009024 <__swsetup_r>
 8008fd0:	b118      	cbz	r0, 8008fda <__swbuf_r+0x32>
 8008fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	6922      	ldr	r2, [r4, #16]
 8008fde:	b2f6      	uxtb	r6, r6
 8008fe0:	1a98      	subs	r0, r3, r2
 8008fe2:	6963      	ldr	r3, [r4, #20]
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	4283      	cmp	r3, r0
 8008fe8:	dc05      	bgt.n	8008ff6 <__swbuf_r+0x4e>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f7ff fda9 	bl	8008b44 <_fflush_r>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1ed      	bne.n	8008fd2 <__swbuf_r+0x2a>
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	60a3      	str	r3, [r4, #8]
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	6022      	str	r2, [r4, #0]
 8009002:	701e      	strb	r6, [r3, #0]
 8009004:	6962      	ldr	r2, [r4, #20]
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	429a      	cmp	r2, r3
 800900a:	d004      	beq.n	8009016 <__swbuf_r+0x6e>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	07db      	lsls	r3, r3, #31
 8009010:	d5e1      	bpl.n	8008fd6 <__swbuf_r+0x2e>
 8009012:	2e0a      	cmp	r6, #10
 8009014:	d1df      	bne.n	8008fd6 <__swbuf_r+0x2e>
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f7ff fd93 	bl	8008b44 <_fflush_r>
 800901e:	2800      	cmp	r0, #0
 8009020:	d0d9      	beq.n	8008fd6 <__swbuf_r+0x2e>
 8009022:	e7d6      	b.n	8008fd2 <__swbuf_r+0x2a>

08009024 <__swsetup_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4b29      	ldr	r3, [pc, #164]	@ (80090cc <__swsetup_r+0xa8>)
 8009028:	4605      	mov	r5, r0
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	460c      	mov	r4, r1
 800902e:	b118      	cbz	r0, 8009038 <__swsetup_r+0x14>
 8009030:	6a03      	ldr	r3, [r0, #32]
 8009032:	b90b      	cbnz	r3, 8009038 <__swsetup_r+0x14>
 8009034:	f7fd ff40 	bl	8006eb8 <__sinit>
 8009038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903c:	0719      	lsls	r1, r3, #28
 800903e:	d422      	bmi.n	8009086 <__swsetup_r+0x62>
 8009040:	06da      	lsls	r2, r3, #27
 8009042:	d407      	bmi.n	8009054 <__swsetup_r+0x30>
 8009044:	2209      	movs	r2, #9
 8009046:	602a      	str	r2, [r5, #0]
 8009048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	e033      	b.n	80090bc <__swsetup_r+0x98>
 8009054:	0758      	lsls	r0, r3, #29
 8009056:	d512      	bpl.n	800907e <__swsetup_r+0x5a>
 8009058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800905a:	b141      	cbz	r1, 800906e <__swsetup_r+0x4a>
 800905c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009060:	4299      	cmp	r1, r3
 8009062:	d002      	beq.n	800906a <__swsetup_r+0x46>
 8009064:	4628      	mov	r0, r5
 8009066:	f7fe ff17 	bl	8007e98 <_free_r>
 800906a:	2300      	movs	r3, #0
 800906c:	6363      	str	r3, [r4, #52]	@ 0x34
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	2300      	movs	r3, #0
 8009078:	6063      	str	r3, [r4, #4]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	f043 0308 	orr.w	r3, r3, #8
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	b94b      	cbnz	r3, 800909e <__swsetup_r+0x7a>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009094:	d003      	beq.n	800909e <__swsetup_r+0x7a>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f000 f882 	bl	80091a2 <__smakebuf_r>
 800909e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a2:	f013 0201 	ands.w	r2, r3, #1
 80090a6:	d00a      	beq.n	80090be <__swsetup_r+0x9a>
 80090a8:	2200      	movs	r2, #0
 80090aa:	60a2      	str	r2, [r4, #8]
 80090ac:	6962      	ldr	r2, [r4, #20]
 80090ae:	4252      	negs	r2, r2
 80090b0:	61a2      	str	r2, [r4, #24]
 80090b2:	6922      	ldr	r2, [r4, #16]
 80090b4:	b942      	cbnz	r2, 80090c8 <__swsetup_r+0xa4>
 80090b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090ba:	d1c5      	bne.n	8009048 <__swsetup_r+0x24>
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	0799      	lsls	r1, r3, #30
 80090c0:	bf58      	it	pl
 80090c2:	6962      	ldrpl	r2, [r4, #20]
 80090c4:	60a2      	str	r2, [r4, #8]
 80090c6:	e7f4      	b.n	80090b2 <__swsetup_r+0x8e>
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7f7      	b.n	80090bc <__swsetup_r+0x98>
 80090cc:	20000038 	.word	0x20000038

080090d0 <_raise_r>:
 80090d0:	291f      	cmp	r1, #31
 80090d2:	b538      	push	{r3, r4, r5, lr}
 80090d4:	4605      	mov	r5, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	d904      	bls.n	80090e4 <_raise_r+0x14>
 80090da:	2316      	movs	r3, #22
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090e6:	b112      	cbz	r2, 80090ee <_raise_r+0x1e>
 80090e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090ec:	b94b      	cbnz	r3, 8009102 <_raise_r+0x32>
 80090ee:	4628      	mov	r0, r5
 80090f0:	f000 f830 	bl	8009154 <_getpid_r>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4601      	mov	r1, r0
 80090f8:	4628      	mov	r0, r5
 80090fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090fe:	f000 b817 	b.w	8009130 <_kill_r>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d00a      	beq.n	800911c <_raise_r+0x4c>
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	d103      	bne.n	8009112 <_raise_r+0x42>
 800910a:	2316      	movs	r3, #22
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	2001      	movs	r0, #1
 8009110:	e7e7      	b.n	80090e2 <_raise_r+0x12>
 8009112:	2100      	movs	r1, #0
 8009114:	4620      	mov	r0, r4
 8009116:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800911a:	4798      	blx	r3
 800911c:	2000      	movs	r0, #0
 800911e:	e7e0      	b.n	80090e2 <_raise_r+0x12>

08009120 <raise>:
 8009120:	4b02      	ldr	r3, [pc, #8]	@ (800912c <raise+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f7ff bfd3 	b.w	80090d0 <_raise_r>
 800912a:	bf00      	nop
 800912c:	20000038 	.word	0x20000038

08009130 <_kill_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	2300      	movs	r3, #0
 8009134:	4d06      	ldr	r5, [pc, #24]	@ (8009150 <_kill_r+0x20>)
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f7f8 fd06 	bl	8001b4e <_kill>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	d102      	bne.n	800914c <_kill_r+0x1c>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	b103      	cbz	r3, 800914c <_kill_r+0x1c>
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	200014a8 	.word	0x200014a8

08009154 <_getpid_r>:
 8009154:	f7f8 bcf4 	b.w	8001b40 <_getpid>

08009158 <__swhatbuf_r>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	4615      	mov	r5, r2
 8009162:	2900      	cmp	r1, #0
 8009164:	461e      	mov	r6, r3
 8009166:	b096      	sub	sp, #88	@ 0x58
 8009168:	da0c      	bge.n	8009184 <__swhatbuf_r+0x2c>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	2100      	movs	r1, #0
 800916e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009172:	bf14      	ite	ne
 8009174:	2340      	movne	r3, #64	@ 0x40
 8009176:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800917a:	2000      	movs	r0, #0
 800917c:	6031      	str	r1, [r6, #0]
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	b016      	add	sp, #88	@ 0x58
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	466a      	mov	r2, sp
 8009186:	f000 f849 	bl	800921c <_fstat_r>
 800918a:	2800      	cmp	r0, #0
 800918c:	dbed      	blt.n	800916a <__swhatbuf_r+0x12>
 800918e:	9901      	ldr	r1, [sp, #4]
 8009190:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009194:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009198:	4259      	negs	r1, r3
 800919a:	4159      	adcs	r1, r3
 800919c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091a0:	e7eb      	b.n	800917a <__swhatbuf_r+0x22>

080091a2 <__smakebuf_r>:
 80091a2:	898b      	ldrh	r3, [r1, #12]
 80091a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091a6:	079d      	lsls	r5, r3, #30
 80091a8:	4606      	mov	r6, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	d507      	bpl.n	80091be <__smakebuf_r+0x1c>
 80091ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	2301      	movs	r3, #1
 80091b8:	6163      	str	r3, [r4, #20]
 80091ba:	b003      	add	sp, #12
 80091bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091be:	466a      	mov	r2, sp
 80091c0:	ab01      	add	r3, sp, #4
 80091c2:	f7ff ffc9 	bl	8009158 <__swhatbuf_r>
 80091c6:	9f00      	ldr	r7, [sp, #0]
 80091c8:	4605      	mov	r5, r0
 80091ca:	4639      	mov	r1, r7
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7fe fed5 	bl	8007f7c <_malloc_r>
 80091d2:	b948      	cbnz	r0, 80091e8 <__smakebuf_r+0x46>
 80091d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d8:	059a      	lsls	r2, r3, #22
 80091da:	d4ee      	bmi.n	80091ba <__smakebuf_r+0x18>
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	e7e2      	b.n	80091ae <__smakebuf_r+0xc>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	9b01      	ldr	r3, [sp, #4]
 80091f6:	6020      	str	r0, [r4, #0]
 80091f8:	b15b      	cbz	r3, 8009212 <__smakebuf_r+0x70>
 80091fa:	4630      	mov	r0, r6
 80091fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009200:	f000 f81e 	bl	8009240 <_isatty_r>
 8009204:	b128      	cbz	r0, 8009212 <__smakebuf_r+0x70>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	f043 0301 	orr.w	r3, r3, #1
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	431d      	orrs	r5, r3
 8009216:	81a5      	strh	r5, [r4, #12]
 8009218:	e7cf      	b.n	80091ba <__smakebuf_r+0x18>
	...

0800921c <_fstat_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	2300      	movs	r3, #0
 8009220:	4d06      	ldr	r5, [pc, #24]	@ (800923c <_fstat_r+0x20>)
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	f7f8 fcef 	bl	8001c0c <_fstat>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d102      	bne.n	8009238 <_fstat_r+0x1c>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	b103      	cbz	r3, 8009238 <_fstat_r+0x1c>
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	200014a8 	.word	0x200014a8

08009240 <_isatty_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	2300      	movs	r3, #0
 8009244:	4d05      	ldr	r5, [pc, #20]	@ (800925c <_isatty_r+0x1c>)
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	f7f8 fced 	bl	8001c2a <_isatty>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_isatty_r+0x1a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_isatty_r+0x1a>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	200014a8 	.word	0x200014a8

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
